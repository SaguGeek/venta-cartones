{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { storage, db } from '../firebase';\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { collection, query, where, getDocs } from 'firebase/firestore';\nexport default {\n  name: 'UploadCarton',\n  data() {\n    return {\n      files: [],\n      uploading: false,\n      uploadedCount: 0,\n      totalFiles: 0,\n      uploadErrors: []\n    };\n  },\n  methods: {\n    handleFileChange(event) {\n      this.files = Array.from(event.target.files);\n      this.uploadErrors = []; // Reiniciar errores al seleccionar nuevos archivos\n    },\n    async uploadImages() {\n      if (!this.files.length) return;\n      this.uploading = true;\n      this.totalFiles = this.files.length;\n      this.uploadedCount = 0;\n      this.uploadErrors = [];\n      try {\n        const serials = this.files.map(file => file.name.split('.')[0]);\n        const nonDuplicates = await this.checkDuplicates(serials);\n        if (nonDuplicates.length === 0) {\n          alert('No hay cartones nuevos para subir (todos son duplicados).');\n          this.uploading = false;\n          return;\n        }\n\n        // Procesar en lotes de 5 archivos\n        const batchSize = 5;\n        for (let i = 0; i < nonDuplicates.length; i += batchSize) {\n          const batch = nonDuplicates.slice(i, i + batchSize);\n          await Promise.all(batch.map(file => this.processFile(file)));\n        }\n        this.$emit('images-uploaded', this.successfulUploads);\n        alert('Subida completada. Algunos archivos podrían no haberse subido debido a errores.');\n        this.files = [];\n      } catch (error) {\n        console.error('Error general al subir imágenes:', error);\n        alert('Error general al subir imágenes: ' + error.message);\n      } finally {\n        this.uploading = false;\n      }\n    },\n    async processFile(file) {\n      try {\n        const serial = file.name.split('.')[0];\n        const storageRef = ref(storage, `cartones/${serial}_${Date.now()}.${file.name.split('.').pop()}`);\n        await uploadBytes(storageRef, file);\n        const imageUrl = await getDownloadURL(storageRef);\n        this.successfulUploads.push({\n          serial,\n          imageUrl\n        });\n        this.uploadedCount++;\n      } catch (error) {\n        console.error(`Error al subir ${file.name}:`, error);\n        this.uploadErrors.push(`Error con ${file.name}: ${error.message}`);\n      }\n    },\n    async checkDuplicates(serials) {\n      try {\n        const cartonesRef = collection(db, 'cartones');\n        const q = query(cartonesRef, where('serial', 'in', serials));\n        const querySnapshot = await getDocs(q);\n        const existingSerials = querySnapshot.docs.map(doc => doc.data().serial);\n        return this.files.filter(file => !existingSerials.includes(file.name.split('.')[0]));\n      } catch (error) {\n        console.error('Error al verificar duplicados:', error);\n        return [];\n      }\n    }\n  },\n  computed: {\n    successfulUploads() {\n      return [];\n    }\n  }\n};","map":{"version":3,"names":["storage","db","ref","uploadBytes","getDownloadURL","collection","query","where","getDocs","name","data","files","uploading","uploadedCount","totalFiles","uploadErrors","methods","handleFileChange","event","Array","from","target","uploadImages","length","serials","map","file","split","nonDuplicates","checkDuplicates","alert","batchSize","i","batch","slice","Promise","all","processFile","$emit","successfulUploads","error","console","message","serial","storageRef","Date","now","pop","imageUrl","push","cartonesRef","q","querySnapshot","existingSerials","docs","doc","filter","includes","computed"],"sources":["D:\\Lotweb\\venta-cartones\\src\\components\\UploadCarton.vue"],"sourcesContent":["```vue\r\n<template>\r\n  <div class=\"space-y-4\">\r\n    <h2 class=\"text-xl font-semibold text-gray-800 mb-4\">Subir Cartones</h2>\r\n    <form @submit.prevent=\"uploadImages\" class=\"space-y-4\">\r\n      <div>\r\n        <label for=\"files\" class=\"block text-sm font-medium text-gray-700\">Seleccionar Cartones (múltiples imágenes)</label>\r\n        <input\r\n          type=\"file\"\r\n          id=\"files\"\r\n          multiple\r\n          accept=\"image/*\"\r\n          @change=\"handleFileChange\"\r\n          class=\"mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-300\"\r\n        />\r\n      </div>\r\n      <button\r\n        type=\"submit\"\r\n        :disabled=\"uploading || !files.length\"\r\n        class=\"w-full bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50 transition duration-300 flex items-center justify-center\"\r\n      >\r\n        <span v-if=\"uploading\" class=\"flex items-center\">\r\n          <svg class=\"animate-spin h-5 w-5 mr-2 text-white\" viewBox=\"0 0 24 24\">\r\n            <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\r\n            <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n          </svg>\r\n          Subiendo... ({{ uploadedCount }}/{{ totalFiles }})\r\n        </span>\r\n        <span v-else>Subir Cartones</span>\r\n      </button>\r\n      <p v-if=\"uploadErrors.length\" class=\"text-red-600 text-sm\">\r\n        Errores: {{ uploadErrors.join(', ') }}\r\n      </p>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { storage, db } from '../firebase';\r\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\r\nimport { collection, query, where, getDocs } from 'firebase/firestore';\r\n\r\nexport default {\r\n  name: 'UploadCarton',\r\n  data() {\r\n    return {\r\n      files: [],\r\n      uploading: false,\r\n      uploadedCount: 0,\r\n      totalFiles: 0,\r\n      uploadErrors: []\r\n    };\r\n  },\r\n  methods: {\r\n    handleFileChange(event) {\r\n      this.files = Array.from(event.target.files);\r\n      this.uploadErrors = []; // Reiniciar errores al seleccionar nuevos archivos\r\n    },\r\n    async uploadImages() {\r\n      if (!this.files.length) return;\r\n\r\n      this.uploading = true;\r\n      this.totalFiles = this.files.length;\r\n      this.uploadedCount = 0;\r\n      this.uploadErrors = [];\r\n\r\n      try {\r\n        const serials = this.files.map(file => file.name.split('.')[0]);\r\n        const nonDuplicates = await this.checkDuplicates(serials);\r\n\r\n        if (nonDuplicates.length === 0) {\r\n          alert('No hay cartones nuevos para subir (todos son duplicados).');\r\n          this.uploading = false;\r\n          return;\r\n        }\r\n\r\n        // Procesar en lotes de 5 archivos\r\n        const batchSize = 5;\r\n        for (let i = 0; i < nonDuplicates.length; i += batchSize) {\r\n          const batch = nonDuplicates.slice(i, i + batchSize);\r\n          await Promise.all(batch.map(file => this.processFile(file)));\r\n        }\r\n\r\n        this.$emit('images-uploaded', this.successfulUploads);\r\n        alert('Subida completada. Algunos archivos podrían no haberse subido debido a errores.');\r\n        this.files = [];\r\n      } catch (error) {\r\n        console.error('Error general al subir imágenes:', error);\r\n        alert('Error general al subir imágenes: ' + error.message);\r\n      } finally {\r\n        this.uploading = false;\r\n      }\r\n    },\r\n    async processFile(file) {\r\n      try {\r\n        const serial = file.name.split('.')[0];\r\n        const storageRef = ref(storage, `cartones/${serial}_${Date.now()}.${file.name.split('.').pop()}`);\r\n        await uploadBytes(storageRef, file);\r\n        const imageUrl = await getDownloadURL(storageRef);\r\n        this.successfulUploads.push({ serial, imageUrl });\r\n        this.uploadedCount++;\r\n      } catch (error) {\r\n        console.error(`Error al subir ${file.name}:`, error);\r\n        this.uploadErrors.push(`Error con ${file.name}: ${error.message}`);\r\n      }\r\n    },\r\n    async checkDuplicates(serials) {\r\n      try {\r\n        const cartonesRef = collection(db, 'cartones');\r\n        const q = query(cartonesRef, where('serial', 'in', serials));\r\n        const querySnapshot = await getDocs(q);\r\n        const existingSerials = querySnapshot.docs.map(doc => doc.data().serial);\r\n        return this.files.filter(file => !existingSerials.includes(file.name.split('.')[0]));\r\n      } catch (error) {\r\n        console.error('Error al verificar duplicados:', error);\r\n        return [];\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    successfulUploads() {\r\n      return [];\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Tailwind maneja los estilos */\r\n</style>\r\n```"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}