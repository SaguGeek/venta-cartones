{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { db } from '../firebase';\nimport { collection, query, where, getDocs, addDoc } from 'firebase/firestore';\nexport default {\n  data() {\n    return {\n      uploadMessage: '',\n      errorMessage: ''\n    };\n  },\n  methods: {\n    async handleFileUpload(event) {\n      const files = Array.from(event.target.files);\n      if (files.length === 0) return;\n      const serials = files.map(file => file.name.split('.')[0]);\n      const images = [];\n      try {\n        // Verificar duplicados\n        const nonDuplicates = await this.checkDuplicates({\n          serials,\n          files\n        });\n        if (nonDuplicates.length === 0) {\n          this.errorMessage = 'Todos los cartones seleccionados ya existen.';\n          return;\n        }\n\n        // Simular URLs de imágenes (en producción, subirías las imágenes a Firebase Storage)\n        for (const file of nonDuplicates) {\n          const serial = file.name.split('.')[0];\n          const imageUrl = URL.createObjectURL(file); // Simulación de URL\n          images.push({\n            serial,\n            imageUrl\n          });\n        }\n\n        // Guardar en Firestore\n        await this.handleImagesUploaded(images);\n        this.uploadMessage = 'Cartones subidos exitosamente.';\n        this.errorMessage = '';\n      } catch (error) {\n        this.errorMessage = 'Error al subir los cartones: ' + error.message;\n        this.uploadMessage = '';\n      }\n    },\n    async checkDuplicates({\n      serials,\n      files\n    }) {\n      try {\n        const cartonesRef = collection(db, 'cartones');\n        const q = query(cartonesRef, where('serial', 'in', serials));\n        const querySnapshot = await getDocs(q);\n        const existingSerials = querySnapshot.docs.map(doc => doc.data().serial);\n        const nonDuplicates = files.filter(file => !existingSerials.includes(file.name.split('.')[0]));\n        return nonDuplicates;\n      } catch (error) {\n        console.error('Error al verificar duplicados:', error);\n        throw error;\n      }\n    },\n    async handleImagesUploaded(images) {\n      try {\n        for (const image of images) {\n          const docRef = await addDoc(collection(db, 'cartones'), {\n            serial: image.serial,\n            imageUrl: image.imageUrl,\n            estado: 'disponible',\n            createdAt: new Date(),\n            vendedorId: null\n          });\n          console.log(`Cartón ${image.serial} guardado con ID:`, docRef.id);\n        }\n      } catch (error) {\n        console.error('Error al guardar los cartones:', error);\n        throw error;\n      }\n    }\n  }\n};","map":{"version":3,"names":["db","collection","query","where","getDocs","addDoc","data","uploadMessage","errorMessage","methods","handleFileUpload","event","files","Array","from","target","length","serials","map","file","name","split","images","nonDuplicates","checkDuplicates","serial","imageUrl","URL","createObjectURL","push","handleImagesUploaded","error","message","cartonesRef","q","querySnapshot","existingSerials","docs","doc","filter","includes","console","image","docRef","estado","createdAt","Date","vendedorId","log","id"],"sources":["D:\\Lotweb\\venta-cartones\\src\\components\\UploadCarton.vue"],"sourcesContent":["```vue\r\n<template>\r\n  <div class=\"bg-white p-6 rounded-lg shadow-md\">\r\n    <h2 class=\"text-2xl font-semibold text-gray-800 mb-4\">Subir Cartones</h2>\r\n    <input type=\"file\" multiple @change=\"handleFileUpload\" accept=\"image/*\" class=\"mb-4\" />\r\n    <p v-if=\"uploadMessage\" class=\"text-green-500\">{{ uploadMessage }}</p>\r\n    <p v-if=\"errorMessage\" class=\"text-red-500\">{{ errorMessage }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { db } from '../firebase';\r\nimport { collection, query, where, getDocs, addDoc } from 'firebase/firestore';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      uploadMessage: '',\r\n      errorMessage: ''\r\n    };\r\n  },\r\n  methods: {\r\n    async handleFileUpload(event) {\r\n      const files = Array.from(event.target.files);\r\n      if (files.length === 0) return;\r\n\r\n      const serials = files.map(file => file.name.split('.')[0]);\r\n      const images = [];\r\n\r\n      try {\r\n        // Verificar duplicados\r\n        const nonDuplicates = await this.checkDuplicates({ serials, files });\r\n        if (nonDuplicates.length === 0) {\r\n          this.errorMessage = 'Todos los cartones seleccionados ya existen.';\r\n          return;\r\n        }\r\n\r\n        // Simular URLs de imágenes (en producción, subirías las imágenes a Firebase Storage)\r\n        for (const file of nonDuplicates) {\r\n          const serial = file.name.split('.')[0];\r\n          const imageUrl = URL.createObjectURL(file); // Simulación de URL\r\n          images.push({ serial, imageUrl });\r\n        }\r\n\r\n        // Guardar en Firestore\r\n        await this.handleImagesUploaded(images);\r\n        this.uploadMessage = 'Cartones subidos exitosamente.';\r\n        this.errorMessage = '';\r\n      } catch (error) {\r\n        this.errorMessage = 'Error al subir los cartones: ' + error.message;\r\n        this.uploadMessage = '';\r\n      }\r\n    },\r\n    async checkDuplicates({ serials, files }) {\r\n      try {\r\n        const cartonesRef = collection(db, 'cartones');\r\n        const q = query(cartonesRef, where('serial', 'in', serials));\r\n        const querySnapshot = await getDocs(q);\r\n        const existingSerials = querySnapshot.docs.map(doc => doc.data().serial);\r\n        const nonDuplicates = files.filter(file => !existingSerials.includes(file.name.split('.')[0]));\r\n        return nonDuplicates;\r\n      } catch (error) {\r\n        console.error('Error al verificar duplicados:', error);\r\n        throw error;\r\n      }\r\n    },\r\n    async handleImagesUploaded(images) {\r\n      try {\r\n        for (const image of images) {\r\n          const docRef = await addDoc(collection(db, 'cartones'), {\r\n            serial: image.serial,\r\n            imageUrl: image.imageUrl,\r\n            estado: 'disponible',\r\n            createdAt: new Date(),\r\n            vendedorId: null\r\n          });\r\n          console.log(`Cartón ${image.serial} guardado con ID:`, docRef.id);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al guardar los cartones:', error);\r\n        throw error;\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Tailwind maneja los estilos */\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}