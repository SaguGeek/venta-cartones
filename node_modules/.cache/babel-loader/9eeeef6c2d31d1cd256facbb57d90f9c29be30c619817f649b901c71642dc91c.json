{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"bg-white p-6 rounded-lg shadow-md mb-6\"\n};\nconst _hoisted_2 = {\n  class: \"space-y-4\"\n};\nconst _hoisted_3 = [\"value\"];\nconst _hoisted_4 = [\"value\"];\nconst _hoisted_5 = [\"value\"];\nconst _hoisted_6 = [\"disabled\"];\nconst _hoisted_7 = {\n  key: 0,\n  class: \"text-red-600 mt-2\"\n};\nconst _hoisted_8 = {\n  key: 1,\n  class: \"text-green-600 mt-2\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[10] || (_cache[10] = _createElementVNode(\"h2\", {\n    class: \"text-2xl font-semibold text-gray-800 mb-4\"\n  }, \"Asignar Cartones por Lote\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", null, [_cache[5] || (_cache[5] = _createElementVNode(\"label\", {\n    class: \"block text-gray-600 mb-1\"\n  }, \"Seleccionar Vendedor\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedVendedorId = $event),\n    class: \"w-full p-2 border rounded-md\"\n  }, [_cache[4] || (_cache[4] = _createElementVNode(\"option\", {\n    value: \"\",\n    disabled: \"\"\n  }, \"Selecciona un vendedor\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.sellers, seller => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: seller.vendedorId,\n      value: seller.vendedorId\n    }, _toDisplayString(seller.nombre || seller.vendedorId), 9 /* TEXT, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedVendedorId]])]), _createElementVNode(\"div\", null, [_cache[7] || (_cache[7] = _createElementVNode(\"label\", {\n    class: \"block text-gray-600 mb-1\"\n  }, \"Desde\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.startSerial = $event),\n    class: \"w-full p-2 border rounded-md\"\n  }, [_cache[6] || (_cache[6] = _createElementVNode(\"option\", {\n    value: \"\",\n    disabled: \"\"\n  }, \"Selecciona un serial inicial\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.availableCartons, carton => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: carton.serial,\n      value: carton.serial\n    }, _toDisplayString(carton.serial), 9 /* TEXT, PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.startSerial]])]), _createElementVNode(\"div\", null, [_cache[9] || (_cache[9] = _createElementVNode(\"label\", {\n    class: \"block text-gray-600 mb-1\"\n  }, \"Hasta\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.endSerial = $event),\n    class: \"w-full p-2 border rounded-md\"\n  }, [_cache[8] || (_cache[8] = _createElementVNode(\"option\", {\n    value: \"\",\n    disabled: \"\"\n  }, \"Selecciona un serial final\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.availableCartons, carton => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: carton.serial,\n      value: carton.serial\n    }, _toDisplayString(carton.serial), 9 /* TEXT, PROPS */, _hoisted_5);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.endSerial]])]), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.assignCartons && $options.assignCartons(...args)),\n    class: \"bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 transition\",\n    disabled: !$data.selectedVendedorId || !$data.startSerial || !$data.endSerial\n  }, \" Asignar Cartones \", 8 /* PROPS */, _hoisted_6)]), $data.errorMessage ? (_openBlock(), _createElementBlock(\"p\", _hoisted_7, _toDisplayString($data.errorMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), $data.successMessage ? (_openBlock(), _createElementBlock(\"p\", _hoisted_8, _toDisplayString($data.successMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_cache","$event","$data","selectedVendedorId","value","disabled","_Fragment","_renderList","sellers","seller","vendedorId","nombre","_hoisted_3","startSerial","availableCartons","carton","serial","_hoisted_4","endSerial","_hoisted_5","onClick","args","$options","assignCartons","_hoisted_6","errorMessage","_hoisted_7","_toDisplayString","_createCommentVNode","successMessage","_hoisted_8"],"sources":["D:\\Lotweb\\venta-cartones\\src\\components\\AssignCartons.vue"],"sourcesContent":["```vue\r\n   <template>\r\n     <div class=\"bg-white p-6 rounded-lg shadow-md mb-6\">\r\n       <h2 class=\"text-2xl font-semibold text-gray-800 mb-4\">Asignar Cartones por Lote</h2>\r\n       <div class=\"space-y-4\">\r\n         <div>\r\n           <label class=\"block text-gray-600 mb-1\">Seleccionar Vendedor</label>\r\n           <select\r\n             v-model=\"selectedVendedorId\"\r\n             class=\"w-full p-2 border rounded-md\"\r\n           >\r\n             <option value=\"\" disabled>Selecciona un vendedor</option>\r\n             <option v-for=\"seller in sellers\" :key=\"seller.vendedorId\" :value=\"seller.vendedorId\">\r\n               {{ seller.nombre || seller.vendedorId }}\r\n             </option>\r\n           </select>\r\n         </div>\r\n         <div>\r\n           <label class=\"block text-gray-600 mb-1\">Desde</label>\r\n           <select\r\n             v-model=\"startSerial\"\r\n             class=\"w-full p-2 border rounded-md\"\r\n           >\r\n             <option value=\"\" disabled>Selecciona un serial inicial</option>\r\n             <option v-for=\"carton in availableCartons\" :key=\"carton.serial\" :value=\"carton.serial\">\r\n               {{ carton.serial }}\r\n             </option>\r\n           </select>\r\n         </div>\r\n         <div>\r\n           <label class=\"block text-gray-600 mb-1\">Hasta</label>\r\n           <select\r\n             v-model=\"endSerial\"\r\n             class=\"w-full p-2 border rounded-md\"\r\n           >\r\n             <option value=\"\" disabled>Selecciona un serial final</option>\r\n             <option v-for=\"carton in availableCartons\" :key=\"carton.serial\" :value=\"carton.serial\">\r\n               {{ carton.serial }}\r\n             </option>\r\n           </select>\r\n         </div>\r\n         <button\r\n           @click=\"assignCartons\"\r\n           class=\"bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 transition\"\r\n           :disabled=\"!selectedVendedorId || !startSerial || !endSerial\"\r\n         >\r\n           Asignar Cartones\r\n         </button>\r\n       </div>\r\n       <p v-if=\"errorMessage\" class=\"text-red-600 mt-2\">{{ errorMessage }}</p>\r\n       <p v-if=\"successMessage\" class=\"text-green-600 mt-2\">{{ successMessage }}</p>\r\n     </div>\r\n   </template>\r\n\r\n   <script>\r\n   import { db } from '../firebase';\r\n   import { collection, query, where, getDocs, doc, getDoc, updateDoc } from 'firebase/firestore';\r\n\r\n   export default {\r\n     data() {\r\n       return {\r\n         sellers: [],\r\n         availableCartons: [],\r\n         selectedVendedorId: '',\r\n         startSerial: '',\r\n         endSerial: '',\r\n         errorMessage: '',\r\n         successMessage: ''\r\n       };\r\n     },\r\n     async mounted() {\r\n       console.log('Componente AssignCartons montado');\r\n       await this.loadSellers();\r\n       await this.loadAvailableCartons();\r\n     },\r\n     methods: {\r\n       async loadSellers() {\r\n         try {\r\n           console.log('Iniciando carga de vendedores...');\r\n           const querySnapshot = await getDocs(collection(db, 'vendedores'));\r\n           this.sellers = querySnapshot.docs.map(doc => doc.data());\r\n           console.log('Vendedores cargados:', this.sellers);\r\n         } catch (error) {\r\n           console.error('Error al cargar los vendedores:', error);\r\n           this.errorMessage = 'Error al cargar los vendedores: ' + error.message;\r\n         }\r\n       },\r\n       async loadAvailableCartons() {\r\n         try {\r\n           console.log('Cargando cartones disponibles...');\r\n           const q = query(\r\n             collection(db, 'cartones'),\r\n             where('estado', '==', 'disponible'),\r\n             where('vendedorId', '==', null)\r\n           );\r\n           const querySnapshot = await getDocs(q);\r\n           this.availableCartons = querySnapshot.docs.map(doc => ({\r\n             id: doc.id,\r\n             serial: doc.data().serial\r\n           }));\r\n           console.log('Cartones disponibles cargados:', this.availableCartons);\r\n         } catch (error) {\r\n           console.error('Error al cargar los cartones disponibles:', error);\r\n           this.errorMessage = 'Error al cargar los cartones disponibles: ' + error.message;\r\n         }\r\n       },\r\n       async assignCartons() {\r\n         console.log('Funci√≥n assignCartons ejecutada');\r\n         console.log('Valores seleccionados:', {\r\n           selectedVendedorId: this.selectedVendedorId,\r\n           startSerial: this.startSerial,\r\n           endSerial: this.endSerial\r\n         });\r\n\r\n         this.errorMessage = '';\r\n         this.successMessage = '';\r\n\r\n         if (!this.selectedVendedorId || !this.startSerial || !this.endSerial) {\r\n           console.log('Campos incompletos, mostrando mensaje de error');\r\n           this.errorMessage = 'Por favor, completa todos los campos.';\r\n           return;\r\n         }\r\n\r\n         try {\r\n           // Determinar el rango de seriales seleccionados\r\n           const startIndex = this.availableCartons.findIndex(carton => carton.serial === this.startSerial);\r\n           const endIndex = this.availableCartons.findIndex(carton => carton.serial === this.endSerial);\r\n\r\n           if (startIndex === -1 || endIndex === -1) {\r\n             console.log('Seriales no encontrados en la lista de cartones disponibles');\r\n             this.errorMessage = 'Los seriales seleccionados no est√°n disponibles.';\r\n             return;\r\n           }\r\n\r\n           if (startIndex > endIndex) {\r\n             console.log('Rango inv√°lido: el serial inicial debe ser menor o igual al serial final');\r\n             this.errorMessage = 'El serial inicial debe ser menor o igual al serial final.';\r\n             return;\r\n           }\r\n\r\n           const cartonesToAssign = this.availableCartons.slice(startIndex, endIndex + 1);\r\n           console.log('Cartones a asignar:', cartonesToAssign);\r\n\r\n           if (cartonesToAssign.length === 0) {\r\n             console.log('No hay cartones para asignar en el rango seleccionado');\r\n             this.errorMessage = 'No hay cartones para asignar en el rango seleccionado.';\r\n             return;\r\n           }\r\n\r\n           // Verificar si alg√∫n cart√≥n ya est√° asignado (por si cambi√≥ mientras se cargaba la p√°gina)\r\n           let alreadyAssignedSerials = [];\r\n           for (const carton of cartonesToAssign) {\r\n             const cartonRef = doc(db, 'cartones', carton.id);\r\n             const cartonDoc = await getDoc(cartonRef);\r\n             if (cartonDoc.exists() && cartonDoc.data().vendedorId && cartonDoc.data().vendedorId !== this.selectedVendedorId) {\r\n               alreadyAssignedSerials.push(carton.serial);\r\n             }\r\n           }\r\n\r\n           if (alreadyAssignedSerials.length > 0) {\r\n             console.log('Cartones ya asignados detectados:', alreadyAssignedSerials);\r\n             this.errorMessage = `Los siguientes cartones ya est√°n asignados a otro vendedor: ${alreadyAssignedSerials.join(', ')}`;\r\n             return;\r\n           }\r\n\r\n           // Asignar los cartones\r\n           console.log('Procediendo a asignar cartones...');\r\n           for (const carton of cartonesToAssign) {\r\n             console.log(`Asignando cart√≥n ${carton.serial} a ${this.selectedVendedorId}`);\r\n             await updateDoc(doc(db, 'cartones', carton.id), {\r\n               vendedorId: this.selectedVendedorId\r\n             });\r\n             console.log(`Cart√≥n ${carton.serial} asignado exitosamente`);\r\n           }\r\n\r\n           console.log('Asignaci√≥n completada para', cartonesToAssign.length, 'cartones');\r\n           this.successMessage = 'Cartones asignados';\r\n           this.startSerial = '';\r\n           this.endSerial = '';\r\n           this.selectedVendedorId = '';\r\n           // Recargar los cartones disponibles despu√©s de asignar\r\n           await this.loadAvailableCartons();\r\n         } catch (error) {\r\n           console.error('Error al asignar cartones:', error);\r\n           this.errorMessage = 'Error al asignar cartones: ' + error.message;\r\n         }\r\n       }\r\n     }\r\n   };\r\n   </script>\r\n\r\n   <style scoped>\r\n   /* Tailwind maneja los estilos */\r\n   </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}