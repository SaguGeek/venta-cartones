{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { db } from '../firebase';\nimport { collection, getDocs, query, where, updateDoc, doc } from 'firebase/firestore';\nexport default {\n  data() {\n    return {\n      sellers: [],\n      selectedVendedorId: '',\n      startSerial: '',\n      endSerial: '',\n      errorMessage: '',\n      successMessage: ''\n    };\n  },\n  async mounted() {\n    console.log('Componente AssignCartons montado');\n    await this.loadSellers();\n  },\n  methods: {\n    async loadSellers() {\n      try {\n        console.log('Iniciando carga de vendedores...');\n        const querySnapshot = await getDocs(collection(db, 'vendedores'));\n        this.sellers = querySnapshot.docs.map(doc => doc.data());\n        console.log('Vendedores cargados en AssignCartons:', this.sellers);\n      } catch (error) {\n        console.error('Error al cargar los vendedores:', error);\n        this.errorMessage = 'Error al cargar los vendedores: ' + error.message;\n      }\n    },\n    async assignCartons() {\n      console.log('Función assignCartons ejecutada');\n      console.log('Valores del formulario:', {\n        selectedVendedorId: this.selectedVendedorId,\n        startSerial: this.startSerial,\n        endSerial: this.endSerial\n      });\n      this.errorMessage = '';\n      this.successMessage = '';\n      if (!this.selectedVendedorId || !this.startSerial || !this.endSerial) {\n        console.log('Campos incompletos, mostrando mensaje de error');\n        this.errorMessage = 'Por favor, completa todos los campos.';\n        return;\n      }\n\n      // Validar formato de seriales (LM seguido de números)\n      console.log('Validando formato de seriales...');\n      const serialRegex = /^LM\\d+$/;\n      if (!serialRegex.test(this.startSerial) || !serialRegex.test(this.endSerial)) {\n        console.log('Formato de seriales inválido');\n        this.errorMessage = 'Los seriales deben comenzar con \"LM\" seguido de números (ej. LM0001).';\n        return;\n      }\n\n      // Extraer números de los seriales\n      console.log('Extrayendo números de seriales...');\n      const startNum = parseInt(this.startSerial.replace('LM', ''), 10);\n      const endNum = parseInt(this.endSerial.replace('LM', ''), 10);\n      console.log('Números extraídos:', {\n        startNum,\n        endNum\n      });\n      if (isNaN(startNum) || isNaN(endNum) || startNum > endNum) {\n        console.log('Validación de rango fallida');\n        this.errorMessage = 'El serial inicial debe ser menor o igual al serial final.';\n        return;\n      }\n      try {\n        console.log('Generando lista de seriales...');\n        const cartonesRef = collection(db, 'cartones');\n        const serials = [];\n        for (let i = startNum; i <= endNum; i++) {\n          const serial = `LM${i.toString().padStart(4, '0')}`;\n          serials.push(serial);\n        }\n        console.log('Seriales generados:', serials);\n\n        // Dividir serials en grupos de 10 (límite de 'in' en Firestore)\n        const chunkSize = 10;\n        const serialChunks = [];\n        for (let i = 0; i < serials.length; i += chunkSize) {\n          serialChunks.push(serials.slice(i, i + chunkSize));\n        }\n        console.log('Grupos de seriales:', serialChunks);\n        let allCartones = [];\n        for (const chunk of serialChunks) {\n          console.log('Consultando seriales:', chunk);\n          const q = query(cartonesRef, where('serial', 'in', chunk));\n          const querySnapshot = await getDocs(q);\n          const chunkCartones = querySnapshot.docs;\n          console.log('Cartones encontrados en este grupo:', chunkCartones.map(doc => doc.data().serial));\n          allCartones = allCartones.concat(chunkCartones);\n        }\n        if (allCartones.length === 0) {\n          console.log('No se encontraron cartones para el rango:', serials);\n          this.errorMessage = 'No se encontraron cartones en el rango especificado.';\n          return;\n        }\n        console.log('Total de cartones encontrados:', allCartones.map(doc => doc.data().serial));\n\n        // Verificar si algún cartón ya está asignado a otro vendedor\n        console.log('Verificando cartones ya asignados...');\n        const alreadyAssigned = allCartones.filter(doc => doc.data().vendedorId && doc.data().vendedorId !== this.selectedVendedorId);\n        if (alreadyAssigned.length > 0) {\n          const assignedSerials = alreadyAssigned.map(doc => doc.data().serial).join(', ');\n          console.log('Cartones ya asignados detectados:', assignedSerials);\n          this.errorMessage = `Los siguientes cartones ya están asignados a otro vendedor: ${assignedSerials}`;\n          return;\n        }\n\n        // Actualizar vendedorId para cada cartón\n        console.log('Procediendo a asignar cartones...');\n        const updates = allCartones.map(async cartonDoc => {\n          console.log(`Asignando cartón ${cartonDoc.data().serial} a ${this.selectedVendedorId}`);\n          try {\n            await updateDoc(doc(db, 'cartones', cartonDoc.id), {\n              vendedorId: this.selectedVendedorId\n            });\n            console.log(`Cartón ${cartonDoc.data().serial} asignado exitosamente`);\n          } catch (updateError) {\n            console.error(`Error al asignar cartón ${cartonDoc.data().serial}:`, updateError);\n            throw updateError;\n          }\n        });\n        await Promise.all(updates);\n        console.log('Asignación completada para', allCartones.length, 'cartones');\n        this.successMessage = 'Cartones asignados';\n        this.startSerial = '';\n        this.endSerial = '';\n        this.selectedVendedorId = '';\n      } catch (error) {\n        console.error('Error general al asignar cartones:', error);\n        this.errorMessage = 'Error al asignar cartones: ' + error.message;\n      }\n    }\n  }\n};","map":{"version":3,"names":["db","collection","getDocs","query","where","updateDoc","doc","data","sellers","selectedVendedorId","startSerial","endSerial","errorMessage","successMessage","mounted","console","log","loadSellers","methods","querySnapshot","docs","map","error","message","assignCartons","serialRegex","test","startNum","parseInt","replace","endNum","isNaN","cartonesRef","serials","i","serial","toString","padStart","push","chunkSize","serialChunks","length","slice","allCartones","chunk","q","chunkCartones","concat","alreadyAssigned","filter","vendedorId","assignedSerials","join","updates","cartonDoc","id","updateError","Promise","all"],"sources":["D:\\Lotweb\\venta-cartones\\src\\components\\AssignCartons.vue"],"sourcesContent":["```vue\r\n   <template>\r\n     <div class=\"bg-white p-6 rounded-lg shadow-md mb-6\">\r\n       <h2 class=\"text-2xl font-semibold text-gray-800 mb-4\">Asignar Cartones por Lote</h2>\r\n       <div class=\"space-y-4\">\r\n         <div>\r\n           <label class=\"block text-gray-600 mb-1\">Seleccionar Vendedor</label>\r\n           <select\r\n             v-model=\"selectedVendedorId\"\r\n             class=\"w-full p-2 border rounded-md\"\r\n           >\r\n             <option value=\"\" disabled>Selecciona un vendedor</option>\r\n             <option v-for=\"seller in sellers\" :key=\"seller.vendedorId\" :value=\"seller.vendedorId\">\r\n               {{ seller.nombre || seller.vendedorId }}\r\n             </option>\r\n           </select>\r\n         </div>\r\n         <div>\r\n           <label class=\"block text-gray-600 mb-1\">Serial Inicial (ej. LM0001)</label>\r\n           <input\r\n             v-model=\"startSerial\"\r\n             type=\"text\"\r\n             placeholder=\"LM0001\"\r\n             class=\"w-full p-2 border rounded-md\"\r\n           />\r\n         </div>\r\n         <div>\r\n           <label class=\"block text-gray-600 mb-1\">Serial Final (ej. LM0100)</label>\r\n           <input\r\n             v-model=\"endSerial\"\r\n             type=\"text\"\r\n             placeholder=\"LM0100\"\r\n             class=\"w-full p-2 border rounded-md\"\r\n           />\r\n         </div>\r\n         <button\r\n           @click=\"assignCartons\"\r\n           class=\"bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 transition\"\r\n           :disabled=\"!selectedVendedorId || !startSerial || !endSerial\"\r\n         >\r\n           Asignar Lote\r\n         </button>\r\n       </div>\r\n       <p v-if=\"errorMessage\" class=\"text-red-600 mt-2\">{{ errorMessage }}</p>\r\n       <p v-if=\"successMessage\" class=\"text-green-600 mt-2\">{{ successMessage }}</p>\r\n     </div>\r\n   </template>\r\n\r\n   <script>\r\n   import { db } from '../firebase';\r\n   import { collection, getDocs, query, where, updateDoc, doc } from 'firebase/firestore';\r\n\r\n   export default {\r\n     data() {\r\n       return {\r\n         sellers: [],\r\n         selectedVendedorId: '',\r\n         startSerial: '',\r\n         endSerial: '',\r\n         errorMessage: '',\r\n         successMessage: ''\r\n       };\r\n     },\r\n     async mounted() {\r\n       console.log('Componente AssignCartons montado');\r\n       await this.loadSellers();\r\n     },\r\n     methods: {\r\n       async loadSellers() {\r\n         try {\r\n           console.log('Iniciando carga de vendedores...');\r\n           const querySnapshot = await getDocs(collection(db, 'vendedores'));\r\n           this.sellers = querySnapshot.docs.map(doc => doc.data());\r\n           console.log('Vendedores cargados en AssignCartons:', this.sellers);\r\n         } catch (error) {\r\n           console.error('Error al cargar los vendedores:', error);\r\n           this.errorMessage = 'Error al cargar los vendedores: ' + error.message;\r\n         }\r\n       },\r\n       async assignCartons() {\r\n         console.log('Función assignCartons ejecutada');\r\n         console.log('Valores del formulario:', {\r\n           selectedVendedorId: this.selectedVendedorId,\r\n           startSerial: this.startSerial,\r\n           endSerial: this.endSerial\r\n         });\r\n\r\n         this.errorMessage = '';\r\n         this.successMessage = '';\r\n\r\n         if (!this.selectedVendedorId || !this.startSerial || !this.endSerial) {\r\n           console.log('Campos incompletos, mostrando mensaje de error');\r\n           this.errorMessage = 'Por favor, completa todos los campos.';\r\n           return;\r\n         }\r\n\r\n         // Validar formato de seriales (LM seguido de números)\r\n         console.log('Validando formato de seriales...');\r\n         const serialRegex = /^LM\\d+$/;\r\n         if (!serialRegex.test(this.startSerial) || !serialRegex.test(this.endSerial)) {\r\n           console.log('Formato de seriales inválido');\r\n           this.errorMessage = 'Los seriales deben comenzar con \"LM\" seguido de números (ej. LM0001).';\r\n           return;\r\n         }\r\n\r\n         // Extraer números de los seriales\r\n         console.log('Extrayendo números de seriales...');\r\n         const startNum = parseInt(this.startSerial.replace('LM', ''), 10);\r\n         const endNum = parseInt(this.endSerial.replace('LM', ''), 10);\r\n         console.log('Números extraídos:', { startNum, endNum });\r\n\r\n         if (isNaN(startNum) || isNaN(endNum) || startNum > endNum) {\r\n           console.log('Validación de rango fallida');\r\n           this.errorMessage = 'El serial inicial debe ser menor o igual al serial final.';\r\n           return;\r\n         }\r\n\r\n         try {\r\n           console.log('Generando lista de seriales...');\r\n           const cartonesRef = collection(db, 'cartones');\r\n           const serials = [];\r\n           for (let i = startNum; i <= endNum; i++) {\r\n             const serial = `LM${i.toString().padStart(4, '0')}`;\r\n             serials.push(serial);\r\n           }\r\n           console.log('Seriales generados:', serials);\r\n\r\n           // Dividir serials en grupos de 10 (límite de 'in' en Firestore)\r\n           const chunkSize = 10;\r\n           const serialChunks = [];\r\n           for (let i = 0; i < serials.length; i += chunkSize) {\r\n             serialChunks.push(serials.slice(i, i + chunkSize));\r\n           }\r\n           console.log('Grupos de seriales:', serialChunks);\r\n\r\n           let allCartones = [];\r\n           for (const chunk of serialChunks) {\r\n             console.log('Consultando seriales:', chunk);\r\n             const q = query(cartonesRef, where('serial', 'in', chunk));\r\n             const querySnapshot = await getDocs(q);\r\n             const chunkCartones = querySnapshot.docs;\r\n             console.log('Cartones encontrados en este grupo:', chunkCartones.map(doc => doc.data().serial));\r\n             allCartones = allCartones.concat(chunkCartones);\r\n           }\r\n\r\n           if (allCartones.length === 0) {\r\n             console.log('No se encontraron cartones para el rango:', serials);\r\n             this.errorMessage = 'No se encontraron cartones en el rango especificado.';\r\n             return;\r\n           }\r\n           console.log('Total de cartones encontrados:', allCartones.map(doc => doc.data().serial));\r\n\r\n           // Verificar si algún cartón ya está asignado a otro vendedor\r\n           console.log('Verificando cartones ya asignados...');\r\n           const alreadyAssigned = allCartones.filter(\r\n             doc => doc.data().vendedorId && doc.data().vendedorId !== this.selectedVendedorId\r\n           );\r\n\r\n           if (alreadyAssigned.length > 0) {\r\n             const assignedSerials = alreadyAssigned.map(doc => doc.data().serial).join(', ');\r\n             console.log('Cartones ya asignados detectados:', assignedSerials);\r\n             this.errorMessage = `Los siguientes cartones ya están asignados a otro vendedor: ${assignedSerials}`;\r\n             return;\r\n           }\r\n\r\n           // Actualizar vendedorId para cada cartón\r\n           console.log('Procediendo a asignar cartones...');\r\n           const updates = allCartones.map(async (cartonDoc) => {\r\n             console.log(`Asignando cartón ${cartonDoc.data().serial} a ${this.selectedVendedorId}`);\r\n             try {\r\n               await updateDoc(doc(db, 'cartones', cartonDoc.id), {\r\n                 vendedorId: this.selectedVendedorId\r\n               });\r\n               console.log(`Cartón ${cartonDoc.data().serial} asignado exitosamente`);\r\n             } catch (updateError) {\r\n               console.error(`Error al asignar cartón ${cartonDoc.data().serial}:`, updateError);\r\n               throw updateError;\r\n             }\r\n           });\r\n\r\n           await Promise.all(updates);\r\n           console.log('Asignación completada para', allCartones.length, 'cartones');\r\n           this.successMessage = 'Cartones asignados';\r\n           this.startSerial = '';\r\n           this.endSerial = '';\r\n           this.selectedVendedorId = '';\r\n         } catch (error) {\r\n           console.error('Error general al asignar cartones:', error);\r\n           this.errorMessage = 'Error al asignar cartones: ' + error.message;\r\n         }\r\n       }\r\n     }\r\n   };\r\n   </script>\r\n\r\n   <style scoped>\r\n   /* Tailwind maneja los estilos */\r\n   </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}