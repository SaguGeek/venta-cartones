{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { db } from '../firebase';\nimport { collection, query, where, getDocs, onSnapshot } from 'firebase/firestore';\nexport default {\n  data() {\n    return {\n      cartones: []\n    };\n  },\n  async mounted() {\n    await this.loadCartones();\n    // Escuchar cambios en tiempo real\n    this.setupRealtimeListener();\n  },\n  methods: {\n    async loadCartones() {\n      try {\n        console.log('Cargando cartones...');\n        const q = query(collection(db, 'cartones'));\n        const querySnapshot = await getDocs(q);\n        this.cartones = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        console.log('Cartones cargados:', this.cartones);\n      } catch (error) {\n        console.error('Error al cargar cartones:', error);\n      }\n    },\n    setupRealtimeListener() {\n      const q = query(collection(db, 'cartones'));\n      onSnapshot(q, snapshot => {\n        this.cartones = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        console.log('Cartones actualizados en tiempo real:', this.cartones);\n      }, error => {\n        console.error('Error en tiempo real:', error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["db","collection","query","where","getDocs","onSnapshot","data","cartones","mounted","loadCartones","setupRealtimeListener","methods","console","log","q","querySnapshot","docs","map","doc","id","error","snapshot"],"sources":["D:\\Lotweb\\venta-cartones\\src\\components\\CartonList.vue"],"sourcesContent":["```vue\r\n   <template>\r\n     <div class=\"bg-white p-6 rounded-lg shadow-md\">\r\n       <h2 class=\"text-2xl font-semibold text-gray-800 mb-4\">Lista de Cartones</h2>\r\n       <div class=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n         <div v-for=\"carton in cartones\" :key=\"carton.id\" class=\"bg-gray-100 p-4 rounded-lg shadow text-center\">\r\n           <img :src=\"carton.imageUrl\" alt=\"Carton\" class=\"w-full h-48 object-cover mb-2 rounded\">\r\n           <p><strong>Serial:</strong> {{ carton.serial }}</p>\r\n           <p><strong>Estado:</strong> {{ carton.estado }}</p>\r\n         </div>\r\n       </div>\r\n     </div>\r\n   </template>\r\n\r\n   <script>\r\n   import { db } from '../firebase';\r\n   import { collection, query, where, getDocs, onSnapshot } from 'firebase/firestore';\r\n\r\n   export default {\r\n     data() {\r\n       return {\r\n         cartones: []\r\n       };\r\n     },\r\n     async mounted() {\r\n       await this.loadCartones();\r\n       // Escuchar cambios en tiempo real\r\n       this.setupRealtimeListener();\r\n     },\r\n     methods: {\r\n       async loadCartones() {\r\n         try {\r\n           console.log('Cargando cartones...');\r\n           const q = query(collection(db, 'cartones'));\r\n           const querySnapshot = await getDocs(q);\r\n           this.cartones = querySnapshot.docs.map(doc => ({\r\n             id: doc.id,\r\n             ...doc.data()\r\n           }));\r\n           console.log('Cartones cargados:', this.cartones);\r\n         } catch (error) {\r\n           console.error('Error al cargar cartones:', error);\r\n         }\r\n       },\r\n       setupRealtimeListener() {\r\n         const q = query(collection(db, 'cartones'));\r\n         onSnapshot(q, (snapshot) => {\r\n           this.cartones = snapshot.docs.map(doc => ({\r\n             id: doc.id,\r\n             ...doc.data()\r\n           }));\r\n           console.log('Cartones actualizados en tiempo real:', this.cartones);\r\n         }, (error) => {\r\n           console.error('Error en tiempo real:', error);\r\n         });\r\n       }\r\n     }\r\n   };\r\n   </script>\r\n\r\n   <style scoped>\r\n   /* Tailwind maneja los estilos */\r\n   </style>\r\n   ```"],"mappings":";;AAeG,SAASA,EAAC,QAAS,aAAa;AAChC,SAASC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,EAAEC,UAAS,QAAS,oBAAoB;AAElF,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACC,YAAY,CAAC,CAAC;IACzB;IACA,IAAI,CAACC,qBAAqB,CAAC,CAAC;EAC9B,CAAC;EACDC,OAAO,EAAE;IACP,MAAMF,YAAYA,CAAA,EAAG;MACnB,IAAI;QACFG,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;QACnC,MAAMC,CAAA,GAAIZ,KAAK,CAACD,UAAU,CAACD,EAAE,EAAE,UAAU,CAAC,CAAC;QAC3C,MAAMe,aAAY,GAAI,MAAMX,OAAO,CAACU,CAAC,CAAC;QACtC,IAAI,CAACP,QAAO,GAAIQ,aAAa,CAACC,IAAI,CAACC,GAAG,CAACC,GAAE,KAAM;UAC7CC,EAAE,EAAED,GAAG,CAACC,EAAE;UACV,GAAGD,GAAG,CAACZ,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;QACHM,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAACN,QAAQ,CAAC;MAClD,EAAE,OAAOa,KAAK,EAAE;QACdR,OAAO,CAACQ,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IACDV,qBAAqBA,CAAA,EAAG;MACtB,MAAMI,CAAA,GAAIZ,KAAK,CAACD,UAAU,CAACD,EAAE,EAAE,UAAU,CAAC,CAAC;MAC3CK,UAAU,CAACS,CAAC,EAAGO,QAAQ,IAAK;QAC1B,IAAI,CAACd,QAAO,GAAIc,QAAQ,CAACL,IAAI,CAACC,GAAG,CAACC,GAAE,KAAM;UACxCC,EAAE,EAAED,GAAG,CAACC,EAAE;UACV,GAAGD,GAAG,CAACZ,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;QACHM,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAE,IAAI,CAACN,QAAQ,CAAC;MACrE,CAAC,EAAGa,KAAK,IAAK;QACZR,OAAO,CAACQ,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C,CAAC,CAAC;IACJ;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}