{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"bg-white p-6 rounded-lg shadow-md\"\n};\nconst _hoisted_2 = {\n  class: \"space-y-4\"\n};\nconst _hoisted_3 = {\n  class: \"text-lg font-medium text-gray-700\"\n};\nconst _hoisted_4 = {\n  class: \"text-sm text-gray-500\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  key: 0,\n  class: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center\"\n};\nconst _hoisted_7 = {\n  class: \"bg-white p-6 rounded-lg shadow-lg max-w-md w-full\"\n};\nconst _hoisted_8 = {\n  class: \"text-xl font-semibold text-gray-800 mb-4\"\n};\nconst _hoisted_9 = {\n  class: \"space-y-2\"\n};\nconst _hoisted_10 = {\n  key: 0\n};\nconst _hoisted_11 = {\n  key: 1,\n  class: \"list-disc pl-5\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[5] || (_cache[5] = _createElementVNode(\"h2\", {\n    class: \"text-2xl font-semibold text-gray-800 mb-4\"\n  }, \"Lista de Vendedores\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.sellers, seller => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: seller.vendedorId,\n      class: \"border p-4 rounded-md flex justify-between items-center\"\n    }, [_createElementVNode(\"div\", null, [_createElementVNode(\"p\", _hoisted_3, _toDisplayString(seller.nombre || seller.vendedorId || 'Sin nombre'), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_4, \"Saldo Generado: $\" + _toDisplayString(seller.saldoGenerado || 0), 1 /* TEXT */)]), _createElementVNode(\"button\", {\n      onClick: $event => $options.showSellerDetails(seller),\n      class: \"bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition\"\n    }, \" Ver Detalles \", 8 /* PROPS */, _hoisted_5)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Modal para mostrar detalles del vendedor \"), $data.selectedSeller ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"h3\", _hoisted_8, _toDisplayString($data.selectedSeller.nombre || $data.selectedSeller.vendedorId || 'Sin nombre'), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"p\", null, [_cache[1] || (_cache[1] = _createElementVNode(\"strong\", null, \"Cartones Asignados:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.assignedCartons.length), 1 /* TEXT */)]), $data.assignedCartons.length === 0 ? (_openBlock(), _createElementBlock(\"p\", _hoisted_10, \"No hay cartones asignados.\")) : (_openBlock(), _createElementBlock(\"ul\", _hoisted_11, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.assignedCartons, carton => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: carton.id\n    }, _toDisplayString(carton.serial), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])), _createElementVNode(\"p\", null, [_cache[2] || (_cache[2] = _createElementVNode(\"strong\", null, \"Cartones Vendidos:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.soldCartons.length), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"strong\", null, \"Cartones Disponibles:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.availableCartons.length), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"strong\", null, \"Saldo Generado:\", -1 /* HOISTED */)), _createTextVNode(\" $\" + _toDisplayString($data.selectedSeller.saldoGenerado || 0), 1 /* TEXT */)])]), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => $data.selectedSeller = null),\n    class: \"bg-blue-600 text-white px-4 py-2 rounded-md mt-4 hover:bg-blue-700 transition\"\n  }, \" Cerrar \")])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","sellers","seller","vendedorId","_hoisted_3","_toDisplayString","nombre","_hoisted_4","saldoGenerado","onClick","$event","$options","showSellerDetails","_hoisted_5","_createCommentVNode","selectedSeller","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_createTextVNode","assignedCartons","length","_hoisted_10","_hoisted_11","carton","id","serial","soldCartons","availableCartons","_cache"],"sources":["D:\\Lotweb\\venta-cartones\\src\\components\\SellerList.vue"],"sourcesContent":["```vue\r\n   <template>\r\n     <div class=\"bg-white p-6 rounded-lg shadow-md\">\r\n       <h2 class=\"text-2xl font-semibold text-gray-800 mb-4\">Lista de Vendedores</h2>\r\n       <div class=\"space-y-4\">\r\n         <div v-for=\"seller in sellers\" :key=\"seller.vendedorId\" class=\"border p-4 rounded-md flex justify-between items-center\">\r\n           <div>\r\n             <p class=\"text-lg font-medium text-gray-700\">{{ seller.nombre || seller.vendedorId || 'Sin nombre' }}</p>\r\n             <p class=\"text-sm text-gray-500\">Saldo Generado: ${{ seller.saldoGenerado || 0 }}</p>\r\n           </div>\r\n           <button\r\n             @click=\"showSellerDetails(seller)\"\r\n             class=\"bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition\"\r\n           >\r\n             Ver Detalles\r\n           </button>\r\n         </div>\r\n       </div>\r\n\r\n       <!-- Modal para mostrar detalles del vendedor -->\r\n       <div v-if=\"selectedSeller\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center\">\r\n         <div class=\"bg-white p-6 rounded-lg shadow-lg max-w-md w-full\">\r\n           <h3 class=\"text-xl font-semibold text-gray-800 mb-4\">{{ selectedSeller.nombre || selectedSeller.vendedorId || 'Sin nombre' }}</h3>\r\n           <div class=\"space-y-2\">\r\n             <p><strong>Cartones Asignados:</strong> {{ assignedCartons.length }}</p>\r\n             <p v-if=\"assignedCartons.length === 0\">No hay cartones asignados.</p>\r\n             <ul v-else class=\"list-disc pl-5\">\r\n               <li v-for=\"carton in assignedCartons\" :key=\"carton.id\">{{ carton.serial }}</li>\r\n             </ul>\r\n             <p><strong>Cartones Vendidos:</strong> {{ soldCartons.length }}</p>\r\n             <p><strong>Cartones Disponibles:</strong> {{ availableCartons.length }}</p>\r\n             <p><strong>Saldo Generado:</strong> ${{ selectedSeller.saldoGenerado || 0 }}</p>\r\n           </div>\r\n           <button\r\n             @click=\"selectedSeller = null\"\r\n             class=\"bg-blue-600 text-white px-4 py-2 rounded-md mt-4 hover:bg-blue-700 transition\"\r\n           >\r\n             Cerrar\r\n           </button>\r\n         </div>\r\n       </div>\r\n     </div>\r\n   </template>\r\n\r\n   <script>\r\n   import { db } from '../firebase';\r\n   import { collection, query, where, getDocs } from 'firebase/firestore';\r\n\r\n   export default {\r\n     data() {\r\n       return {\r\n         sellers: [],\r\n         selectedSeller: null,\r\n         assignedCartons: [],\r\n         soldCartons: [],\r\n         availableCartons: []\r\n       };\r\n     },\r\n     async mounted() {\r\n       await this.loadSellers();\r\n     },\r\n     methods: {\r\n       async loadSellers() {\r\n         try {\r\n           console.log('Cargando vendedores...');\r\n           const querySnapshot = await getDocs(collection(db, 'vendedores'));\r\n           this.sellers = querySnapshot.docs.map(doc => {\r\n             const data = doc.data();\r\n             console.log('Vendedor cargado:', data); // Depuración: inspeccionar cada vendedor\r\n             return {\r\n               ...data,\r\n               vendedorId: data.vendedorId || doc.id // Asegurar que vendedorId esté definido\r\n             };\r\n           });\r\n           console.log('Vendedores cargados:', this.sellers);\r\n         } catch (error) {\r\n           console.error('Error al cargar los vendedores:', error);\r\n         }\r\n       },\r\n       async showSellerDetails(seller) {\r\n         console.log('Mostrando detalles del vendedor:', seller); // Depuración: inspeccionar el vendedor seleccionado\r\n         this.selectedSeller = seller;\r\n         if (!seller.vendedorId) {\r\n           console.error('Error: vendedorId no está definido para este vendedor:', seller);\r\n           this.assignedCartons = [];\r\n           this.soldCartons = [];\r\n           this.availableCartons = [];\r\n           return;\r\n         }\r\n         await this.loadSellerCartons(seller.vendedorId);\r\n       },\r\n       async loadSellerCartons(vendedorId) {\r\n         try {\r\n           console.log(`Cargando cartones para el vendedor ${vendedorId}...`);\r\n           // Cartones asignados (vendedorId coincide y estado no es \"vendido\")\r\n           const assignedQuery = query(\r\n             collection(db, 'cartones'),\r\n             where('vendedorId', '==', vendedorId),\r\n             where('estado', '!=', 'vendido')\r\n           );\r\n           const assignedSnapshot = await getDocs(assignedQuery);\r\n           this.assignedCartons = assignedSnapshot.docs.map(doc => ({\r\n             id: doc.id,\r\n             serial: doc.data().serial\r\n           }));\r\n           console.log('Cartones asignados:', this.assignedCartons);\r\n\r\n           // Cartones vendidos (vendedorId coincide y estado es \"vendido\")\r\n           const soldQuery = query(\r\n             collection(db, 'cartones'),\r\n             where('vendedorId', '==', vendedorId),\r\n             where('estado', '==', 'vendido')\r\n           );\r\n           const soldSnapshot = await getDocs(soldQuery);\r\n           this.soldCartons = soldSnapshot.docs.map(doc => ({\r\n             id: doc.id,\r\n             serial: doc.data().serial\r\n           }));\r\n           console.log('Cartones vendidos:', this.soldCartons);\r\n\r\n           // Cartones disponibles (vendedorId es null y estado es \"disponible\")\r\n           const availableQuery = query(\r\n             collection(db, 'cartones'),\r\n             where('vendedorId', '==', null),\r\n             where('estado', '==', 'disponible')\r\n           );\r\n           const availableSnapshot = await getDocs(availableQuery);\r\n           this.availableCartons = availableSnapshot.docs.map(doc => ({\r\n             id: doc.id,\r\n             serial: doc.data().serial\r\n           }));\r\n           console.log('Cartones disponibles:', this.availableCartons);\r\n         } catch (error) {\r\n           console.error('Error al cargar los cartones del vendedor:', error);\r\n           this.assignedCartons = [];\r\n           this.soldCartons = [];\r\n           this.availableCartons = [];\r\n         }\r\n       }\r\n     }\r\n   };\r\n   </script>\r\n\r\n   <style scoped>\r\n   /* Tailwind maneja los estilos */\r\n   </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}