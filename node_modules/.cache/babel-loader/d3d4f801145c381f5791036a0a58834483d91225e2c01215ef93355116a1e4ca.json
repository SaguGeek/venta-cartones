{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { db } from '../firebase';\nimport { collection, query, where, getDocs, doc, updateDoc } from 'firebase/firestore';\nexport default {\n  data() {\n    return {\n      sellers: [],\n      selectedSeller: null,\n      assignedCartons: [],\n      soldCartons: [],\n      availableCartons: []\n    };\n  },\n  async mounted() {\n    await this.loadSellers();\n  },\n  methods: {\n    async loadSellers() {\n      try {\n        console.log('Cargando vendedores...');\n        const querySnapshot = await getDocs(collection(db, 'vendedores'));\n        this.sellers = querySnapshot.docs.map(docSnapshot => {\n          const data = docSnapshot.data();\n          console.log('Vendedor cargado (ID: ', docSnapshot.id, '):', data);\n          return {\n            id: docSnapshot.id,\n            ...data,\n            vendedorId: data.vendedorId || docSnapshot.id\n          };\n        });\n        console.log('Vendedores cargados:', this.sellers);\n      } catch (error) {\n        console.error('Error al cargar los vendedores:', error);\n      }\n    },\n    async showSellerDetails(seller) {\n      console.log('Mostrando detalles del vendedor:', seller);\n      this.selectedSeller = seller;\n      if (!seller.vendedorId) {\n        console.error('Error: vendedorId no está definido para este vendedor:', seller);\n        this.assignedCartons = [];\n        this.soldCartons = [];\n        this.availableCartons = [];\n        return;\n      }\n      await this.loadSellerCartons(seller.vendedorId);\n    },\n    async loadSellerCartons(vendedorId) {\n      try {\n        console.log(`Cargando cartones para el vendedor ${vendedorId}...`);\n        // Cartones asignados\n        const assignedQuery = query(collection(db, 'cartones'), where('vendedorId', '==', vendedorId), where('estado', '==', 'asignado'));\n        const assignedSnapshot = await getDocs(assignedQuery);\n        this.assignedCartons = assignedSnapshot.docs.map(doc => {\n          const data = doc.data();\n          console.log(`Cartón asignado encontrado (ID: ${doc.id}):`, data);\n          return {\n            id: doc.id,\n            serial: data.serial\n          };\n        });\n        // Ordenar cartones asignados por serial\n        this.assignedCartons.sort((a, b) => {\n          const serialA = parseInt(a.serial.replace('LM', ''), 10);\n          const serialB = parseInt(b.serial.replace('LM', ''), 10);\n          return serialA - serialB;\n        });\n        console.log('Cartones asignados:', this.assignedCartons);\n\n        // Cartones vendidos\n        const soldQuery = query(collection(db, 'cartones'), where('vendedorId', '==', vendedorId), where('estado', '==', 'vendido'));\n        const soldSnapshot = await getDocs(soldQuery);\n        this.soldCartons = soldSnapshot.docs.map(doc => ({\n          id: doc.id,\n          serial: doc.data().serial\n        }));\n        // Ordenar cartones vendidos por serial\n        this.soldCartons.sort((a, b) => {\n          const serialA = parseInt(a.serial.replace('LM', ''), 10);\n          const serialB = parseInt(b.serial.replace('LM', ''), 10);\n          return serialA - serialB;\n        });\n        console.log('Cartones vendidos:', this.soldCartons);\n\n        // Cartones disponibles (global)\n        const availableQuery = query(collection(db, 'cartones'), where('vendedorId', '==', null), where('estado', '==', 'disponible'));\n        const availableSnapshot = await getDocs(availableQuery);\n        this.availableCartons = availableSnapshot.docs.map(doc => ({\n          id: doc.id,\n          serial: doc.data().serial\n        }));\n        // Ordenar cartones disponibles por serial\n        this.availableCartons.sort((a, b) => {\n          const serialA = parseInt(a.serial.replace('LM', ''), 10);\n          const serialB = parseInt(b.serial.replace('LM', ''), 10);\n          return serialA - serialB;\n        });\n        console.log('Cartones disponibles (global):', this.availableCartons);\n      } catch (error) {\n        console.error('Error al cargar los cartones del vendedor:', error);\n        this.assignedCartons = [];\n        this.soldCartons = [];\n        this.availableCartons = [];\n      }\n    },\n    async sellCarton(cartonId) {\n      try {\n        console.log(`Vendiendo cartón ${cartonId} para el vendedor ${this.selectedSeller.vendedorId}...`);\n        const cartonRef = doc(db, 'cartones', cartonId);\n        await updateDoc(cartonRef, {\n          estado: 'vendido'\n        });\n\n        // Actualizar el saldo del vendedor (por ejemplo, $5 por cartón vendido)\n        const sellerRef = doc(db, 'vendedores', this.selectedSeller.id);\n        const currentSaldo = this.selectedSeller.saldoGenerado || 0;\n        await updateDoc(sellerRef, {\n          saldoGenerado: currentSaldo + 5 // Incrementar el saldo (ajusta el valor según tu necesidad)\n        });\n        console.log(`Cartón ${cartonId} marcado como vendido`);\n        alert(`Cartón ${cartonId} vendido exitosamente`);\n\n        // Actualizar datos del vendedor y cartones\n        this.selectedSeller.saldoGenerado = currentSaldo + 5;\n        await this.loadSellerCartons(this.selectedSeller.vendedorId);\n      } catch (error) {\n        console.error('Error al vender el cartón:', error);\n        alert('Error al vender el cartón: ' + error.message);\n      }\n    }\n  }\n};","map":{"version":3,"names":["db","collection","query","where","getDocs","doc","updateDoc","data","sellers","selectedSeller","assignedCartons","soldCartons","availableCartons","mounted","loadSellers","methods","console","log","querySnapshot","docs","map","docSnapshot","id","vendedorId","error","showSellerDetails","seller","loadSellerCartons","assignedQuery","assignedSnapshot","serial","sort","a","b","serialA","parseInt","replace","serialB","soldQuery","soldSnapshot","availableQuery","availableSnapshot","sellCarton","cartonId","cartonRef","estado","sellerRef","currentSaldo","saldoGenerado","alert","message"],"sources":["D:\\Lotweb\\venta-cartones\\src\\components\\SellerList.vue"],"sourcesContent":["```vue\r\n<template>\r\n  <div class=\"bg-white p-6 rounded-lg shadow-md\">\r\n    <h2 class=\"text-xl font-semibold text-gray-800 mb-4\">Lista de Vendedores</h2>\r\n    <div class=\"space-y-4\">\r\n      <div v-for=\"seller in sellers\" :key=\"seller.id\" class=\"border p-4 rounded-md flex justify-between items-center\">\r\n        <div>\r\n          <p class=\"text-lg font-medium text-gray-700\">{{ seller.nombre || seller.id || 'Sin nombre' }}</p>\r\n          <p class=\"text-sm text-gray-500\">Saldo Generado: ${{ seller.saldoGenerado || 0 }}</p>\r\n        </div>\r\n        <button\r\n          @click=\"showSellerDetails(seller)\"\r\n          class=\"bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition\"\r\n        >\r\n          Ver Detalles\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Modal para mostrar detalles del vendedor -->\r\n    <div v-if=\"selectedSeller\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center\">\r\n      <div class=\"bg-white p-6 rounded-lg shadow-lg max-w-md w-full\">\r\n        <h3 class=\"text-xl font-semibold text-gray-800 mb-4\">{{ selectedSeller.nombre || selectedSeller.id || 'Sin nombre' }}</h3>\r\n        <div class=\"space-y-2\">\r\n          <p><strong>Cartones Asignados:</strong> {{ assignedCartons.length }}</p>\r\n          <p v-if=\"assignedCartons.length === 0\">No hay cartones asignados.</p>\r\n          <div v-else>\r\n            <ul class=\"list-disc pl-5\">\r\n              <li v-for=\"carton in assignedCartons\" :key=\"carton.id\">\r\n                {{ carton.serial }}\r\n                <button\r\n                  @click=\"sellCarton(carton.id)\"\r\n                  class=\"ml-2 bg-green-500 text-white px-2 py-1 rounded-md hover:bg-green-600 transition\"\r\n                >\r\n                  Vender\r\n                </button>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <p><strong>Cartones Vendidos:</strong> {{ soldCartons.length }}</p>\r\n          <p><strong>Cartones Disponibles (Global):</strong> {{ availableCartons.length }}</p>\r\n          <p><strong>Saldo Generado:</strong> ${{ selectedSeller.saldoGenerado || 0 }}</p>\r\n        </div>\r\n        <button\r\n          @click=\"selectedSeller = null\"\r\n          class=\"bg-indigo-600 text-white px-4 py-2 rounded-md mt-4 hover:bg-indigo-700 transition\"\r\n        >\r\n          Cerrar\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { db } from '../firebase';\r\nimport { collection, query, where, getDocs, doc, updateDoc } from 'firebase/firestore';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      sellers: [],\r\n      selectedSeller: null,\r\n      assignedCartons: [],\r\n      soldCartons: [],\r\n      availableCartons: []\r\n    };\r\n  },\r\n  async mounted() {\r\n    await this.loadSellers();\r\n  },\r\n  methods: {\r\n    async loadSellers() {\r\n      try {\r\n        console.log('Cargando vendedores...');\r\n        const querySnapshot = await getDocs(collection(db, 'vendedores'));\r\n        this.sellers = querySnapshot.docs.map(docSnapshot => {\r\n          const data = docSnapshot.data();\r\n          console.log('Vendedor cargado (ID: ', docSnapshot.id, '):', data);\r\n          return {\r\n            id: docSnapshot.id,\r\n            ...data,\r\n            vendedorId: data.vendedorId || docSnapshot.id\r\n          };\r\n        });\r\n        console.log('Vendedores cargados:', this.sellers);\r\n      } catch (error) {\r\n        console.error('Error al cargar los vendedores:', error);\r\n      }\r\n    },\r\n    async showSellerDetails(seller) {\r\n      console.log('Mostrando detalles del vendedor:', seller);\r\n      this.selectedSeller = seller;\r\n      if (!seller.vendedorId) {\r\n        console.error('Error: vendedorId no está definido para este vendedor:', seller);\r\n        this.assignedCartons = [];\r\n        this.soldCartons = [];\r\n        this.availableCartons = [];\r\n        return;\r\n      }\r\n      await this.loadSellerCartons(seller.vendedorId);\r\n    },\r\n    async loadSellerCartons(vendedorId) {\r\n      try {\r\n        console.log(`Cargando cartones para el vendedor ${vendedorId}...`);\r\n        // Cartones asignados\r\n        const assignedQuery = query(\r\n          collection(db, 'cartones'),\r\n          where('vendedorId', '==', vendedorId),\r\n          where('estado', '==', 'asignado')\r\n        );\r\n        const assignedSnapshot = await getDocs(assignedQuery);\r\n        this.assignedCartons = assignedSnapshot.docs.map(doc => {\r\n          const data = doc.data();\r\n          console.log(`Cartón asignado encontrado (ID: ${doc.id}):`, data);\r\n          return {\r\n            id: doc.id,\r\n            serial: data.serial\r\n          };\r\n        });\r\n        // Ordenar cartones asignados por serial\r\n        this.assignedCartons.sort((a, b) => {\r\n          const serialA = parseInt(a.serial.replace('LM', ''), 10);\r\n          const serialB = parseInt(b.serial.replace('LM', ''), 10);\r\n          return serialA - serialB;\r\n        });\r\n        console.log('Cartones asignados:', this.assignedCartons);\r\n\r\n        // Cartones vendidos\r\n        const soldQuery = query(\r\n          collection(db, 'cartones'),\r\n          where('vendedorId', '==', vendedorId),\r\n          where('estado', '==', 'vendido')\r\n        );\r\n        const soldSnapshot = await getDocs(soldQuery);\r\n        this.soldCartons = soldSnapshot.docs.map(doc => ({\r\n          id: doc.id,\r\n          serial: doc.data().serial\r\n        }));\r\n        // Ordenar cartones vendidos por serial\r\n        this.soldCartons.sort((a, b) => {\r\n          const serialA = parseInt(a.serial.replace('LM', ''), 10);\r\n          const serialB = parseInt(b.serial.replace('LM', ''), 10);\r\n          return serialA - serialB;\r\n        });\r\n        console.log('Cartones vendidos:', this.soldCartons);\r\n\r\n        // Cartones disponibles (global)\r\n        const availableQuery = query(\r\n          collection(db, 'cartones'),\r\n          where('vendedorId', '==', null),\r\n          where('estado', '==', 'disponible')\r\n        );\r\n        const availableSnapshot = await getDocs(availableQuery);\r\n        this.availableCartons = availableSnapshot.docs.map(doc => ({\r\n          id: doc.id,\r\n          serial: doc.data().serial\r\n        }));\r\n        // Ordenar cartones disponibles por serial\r\n        this.availableCartons.sort((a, b) => {\r\n          const serialA = parseInt(a.serial.replace('LM', ''), 10);\r\n          const serialB = parseInt(b.serial.replace('LM', ''), 10);\r\n          return serialA - serialB;\r\n        });\r\n        console.log('Cartones disponibles (global):', this.availableCartons);\r\n      } catch (error) {\r\n        console.error('Error al cargar los cartones del vendedor:', error);\r\n        this.assignedCartons = [];\r\n        this.soldCartons = [];\r\n        this.availableCartons = [];\r\n      }\r\n    },\r\n    async sellCarton(cartonId) {\r\n      try {\r\n        console.log(`Vendiendo cartón ${cartonId} para el vendedor ${this.selectedSeller.vendedorId}...`);\r\n        const cartonRef = doc(db, 'cartones', cartonId);\r\n        await updateDoc(cartonRef, {\r\n          estado: 'vendido'\r\n        });\r\n\r\n        // Actualizar el saldo del vendedor (por ejemplo, $5 por cartón vendido)\r\n        const sellerRef = doc(db, 'vendedores', this.selectedSeller.id);\r\n        const currentSaldo = this.selectedSeller.saldoGenerado || 0;\r\n        await updateDoc(sellerRef, {\r\n          saldoGenerado: currentSaldo + 5 // Incrementar el saldo (ajusta el valor según tu necesidad)\r\n        });\r\n\r\n        console.log(`Cartón ${cartonId} marcado como vendido`);\r\n        alert(`Cartón ${cartonId} vendido exitosamente`);\r\n\r\n        // Actualizar datos del vendedor y cartones\r\n        this.selectedSeller.saldoGenerado = currentSaldo + 5;\r\n        await this.loadSellerCartons(this.selectedSeller.vendedorId);\r\n      } catch (error) {\r\n        console.error('Error al vender el cartón:', error);\r\n        alert('Error al vender el cartón: ' + error.message);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Tailwind maneja los estilos */\r\n</style>\r\n```"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}