{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport UploadCarton from './components/UploadCarton.vue';\nimport CartonList from './components/CartonList.vue';\nimport { db } from './firebase';\nimport { collection, query, where, getDocs, addDoc } from 'firebase/firestore';\nexport default {\n  components: {\n    UploadCarton,\n    CartonList\n  },\n  methods: {\n    async checkDuplicates({\n      serials,\n      files\n    }, callback) {\n      try {\n        const cartonesRef = collection(db, 'cartones');\n        const q = query(cartonesRef, where('serial', 'in', serials));\n        const querySnapshot = await getDocs(q);\n        const existingSerials = querySnapshot.docs.map(doc => doc.data().serial);\n        const nonDuplicates = files.filter(file => !existingSerials.includes(file.name.split('.')[0]));\n        callback(nonDuplicates);\n      } catch (error) {\n        console.error('Error al verificar duplicados:', error);\n        alert('Error al verificar duplicados: ' + error.message);\n        callback([]);\n      }\n    },\n    async handleImagesUploaded(images) {\n      try {\n        for (const image of images) {\n          const docRef = await addDoc(collection(db, 'cartones'), {\n            serial: image.serial,\n            imageUrl: image.imageUrl,\n            estado: 'disponible',\n            createdAt: new Date(),\n            vendedorId: null\n          });\n          console.log(`Cartón ${image.serial} guardado con ID:`, docRef.id);\n        }\n        alert('Todos los cartones se guardaron exitosamente en Firestore');\n      } catch (error) {\n        console.error('Error al guardar los cartones:', error);\n        alert('Error al guardar en Firestore: ' + error.message);\n      }\n    }\n  }\n};","map":{"version":3,"names":["UploadCarton","CartonList","db","collection","query","where","getDocs","addDoc","components","methods","checkDuplicates","serials","files","callback","cartonesRef","q","querySnapshot","existingSerials","docs","map","doc","data","serial","nonDuplicates","filter","file","includes","name","split","error","console","alert","message","handleImagesUploaded","images","image","docRef","imageUrl","estado","createdAt","Date","vendedorId","log","id"],"sources":["D:\\Lotweb\\venta-cartones\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <h1>Venta de Cartones</h1>\n    <UploadCarton @check-duplicates=\"checkDuplicates\" @images-uploaded=\"handleImagesUploaded\" />\n    <CartonList />\n  </div>\n</template>\n\n<script>\nimport UploadCarton from './components/UploadCarton.vue';\nimport CartonList from './components/CartonList.vue';\nimport { db } from './firebase';\nimport { collection, query, where, getDocs, addDoc } from 'firebase/firestore';\n\nexport default {\n  components: {\n    UploadCarton,\n    CartonList\n  },\n  methods: {\n    async checkDuplicates({ serials, files }, callback) {\n      try {\n        const cartonesRef = collection(db, 'cartones');\n        const q = query(cartonesRef, where('serial', 'in', serials));\n        const querySnapshot = await getDocs(q);\n        const existingSerials = querySnapshot.docs.map(doc => doc.data().serial);\n        const nonDuplicates = files.filter(file => !existingSerials.includes(file.name.split('.')[0]));\n        callback(nonDuplicates);\n      } catch (error) {\n        console.error('Error al verificar duplicados:', error);\n        alert('Error al verificar duplicados: ' + error.message);\n        callback([]);\n      }\n    },\n    async handleImagesUploaded(images) {\n      try {\n        for (const image of images) {\n          const docRef = await addDoc(collection(db, 'cartones'), {\n            serial: image.serial,\n            imageUrl: image.imageUrl,\n            estado: 'disponible',\n            createdAt: new Date(),\n            vendedorId: null\n          });\n          console.log(`Cartón ${image.serial} guardado con ID:`, docRef.id);\n        }\n        alert('Todos los cartones se guardaron exitosamente en Firestore');\n      } catch (error) {\n        console.error('Error al guardar los cartones:', error);\n        alert('Error al guardar en Firestore: ' + error.message);\n      }\n    }\n  }\n};\n</script>\n\n<style>\n#app {\n  text-align: center;\n  margin: 20px;\n}\n</style>"],"mappings":";;;AASA,OAAOA,YAAW,MAAO,+BAA+B;AACxD,OAAOC,UAAS,MAAO,6BAA6B;AACpD,SAASC,EAAC,QAAS,YAAY;AAC/B,SAASC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAK,QAAS,oBAAoB;AAE9E,eAAe;EACbC,UAAU,EAAE;IACVR,YAAY;IACZC;EACF,CAAC;EACDQ,OAAO,EAAE;IACP,MAAMC,eAAeA,CAAC;MAAEC,OAAO;MAAEC;IAAM,CAAC,EAAEC,QAAQ,EAAE;MAClD,IAAI;QACF,MAAMC,WAAU,GAAIX,UAAU,CAACD,EAAE,EAAE,UAAU,CAAC;QAC9C,MAAMa,CAAA,GAAIX,KAAK,CAACU,WAAW,EAAET,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAEM,OAAO,CAAC,CAAC;QAC5D,MAAMK,aAAY,GAAI,MAAMV,OAAO,CAACS,CAAC,CAAC;QACtC,MAAME,eAAc,GAAID,aAAa,CAACE,IAAI,CAACC,GAAG,CAACC,GAAE,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAACC,MAAM,CAAC;QACxE,MAAMC,aAAY,GAAIX,KAAK,CAACY,MAAM,CAACC,IAAG,IAAK,CAACR,eAAe,CAACS,QAAQ,CAACD,IAAI,CAACE,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9Ff,QAAQ,CAACU,aAAa,CAAC;MACzB,EAAE,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACtDE,KAAK,CAAC,iCAAgC,GAAIF,KAAK,CAACG,OAAO,CAAC;QACxDnB,QAAQ,CAAC,EAAE,CAAC;MACd;IACF,CAAC;IACD,MAAMoB,oBAAoBA,CAACC,MAAM,EAAE;MACjC,IAAI;QACF,KAAK,MAAMC,KAAI,IAAKD,MAAM,EAAE;UAC1B,MAAME,MAAK,GAAI,MAAM7B,MAAM,CAACJ,UAAU,CAACD,EAAE,EAAE,UAAU,CAAC,EAAE;YACtDoB,MAAM,EAAEa,KAAK,CAACb,MAAM;YACpBe,QAAQ,EAAEF,KAAK,CAACE,QAAQ;YACxBC,MAAM,EAAE,YAAY;YACpBC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;YACrBC,UAAU,EAAE;UACd,CAAC,CAAC;UACFX,OAAO,CAACY,GAAG,CAAC,UAAUP,KAAK,CAACb,MAAM,mBAAmB,EAAEc,MAAM,CAACO,EAAE,CAAC;QACnE;QACAZ,KAAK,CAAC,2DAA2D,CAAC;MACpE,EAAE,OAAOF,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACtDE,KAAK,CAAC,iCAAgC,GAAIF,KAAK,CAACG,OAAO,CAAC;MAC1D;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}