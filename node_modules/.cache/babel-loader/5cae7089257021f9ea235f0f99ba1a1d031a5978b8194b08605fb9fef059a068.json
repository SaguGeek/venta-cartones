{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { db } from '../firebase';\nimport { collection, getDocs, query, where, updateDoc, doc } from 'firebase/firestore';\nexport default {\n  data() {\n    return {\n      sellers: [],\n      selectedVendedorId: '',\n      startSerial: '',\n      endSerial: '',\n      errorMessage: '',\n      successMessage: ''\n    };\n  },\n  async mounted() {\n    await this.loadSellers();\n  },\n  methods: {\n    async loadSellers() {\n      try {\n        const querySnapshot = await getDocs(collection(db, 'vendedores'));\n        this.sellers = querySnapshot.docs.map(doc => doc.data());\n      } catch (error) {\n        console.error('Error al cargar los vendedores:', error);\n        this.errorMessage = 'Error al cargar los vendedores: ' + error.message;\n      }\n    },\n    async assignCartons() {\n      this.errorMessage = '';\n      this.successMessage = '';\n      if (!this.selectedVendedorId || !this.startSerial || !this.endSerial) {\n        this.errorMessage = 'Por favor, completa todos los campos.';\n        return;\n      }\n\n      // Validar formato de seriales (LM seguido de números)\n      const serialRegex = /^LM\\d+$/;\n      if (!serialRegex.test(this.startSerial) || !serialRegex.test(this.endSerial)) {\n        this.errorMessage = 'Los seriales deben comenzar con \"LM\" seguido de números (ej. LM0001).';\n        return;\n      }\n\n      // Extraer números de los seriales\n      const startNum = parseInt(this.startSerial.replace('LM', ''), 10);\n      const endNum = parseInt(this.endSerial.replace('LM', ''), 10);\n      if (isNaN(startNum) || isNaN(endNum) || startNum > endNum) {\n        this.errorMessage = 'El serial inicial debe ser menor o igual al serial final.';\n        return;\n      }\n      try {\n        const cartonesRef = collection(db, 'cartones');\n        const serials = [];\n        for (let i = startNum; i <= endNum; i++) {\n          const serial = `LM${i.toString().padStart(4, '0')}`;\n          serials.push(serial);\n        }\n\n        // Consultar cartones en el rango\n        const q = query(cartonesRef, where('serial', 'in', serials));\n        const querySnapshot = await getDocs(q);\n        const cartones = querySnapshot.docs;\n        if (cartones.length === 0) {\n          this.errorMessage = 'No se encontraron cartones en el rango especificado.';\n          return;\n        }\n\n        // Actualizar vendedorId para cada cartón\n        const updates = cartones.map(async cartonDoc => {\n          await updateDoc(doc(db, 'cartones', cartonDoc.id), {\n            vendedorId: this.selectedVendedorId\n          });\n        });\n        await Promise.all(updates);\n        this.successMessage = `Se asignaron ${cartones.length} cartones al vendedor.`;\n        this.startSerial = '';\n        this.endSerial = '';\n        this.selectedVendedorId = '';\n      } catch (error) {\n        console.error('Error al asignar cartones:', error);\n        this.errorMessage = 'Error al asignar cartones: ' + error.message;\n      }\n    }\n  }\n};","map":{"version":3,"names":["db","collection","getDocs","query","where","updateDoc","doc","data","sellers","selectedVendedorId","startSerial","endSerial","errorMessage","successMessage","mounted","loadSellers","methods","querySnapshot","docs","map","error","console","message","assignCartons","serialRegex","test","startNum","parseInt","replace","endNum","isNaN","cartonesRef","serials","i","serial","toString","padStart","push","q","cartones","length","updates","cartonDoc","id","vendedorId","Promise","all"],"sources":["D:\\Lotweb\\venta-cartones\\src\\components\\AssignCartons.vue"],"sourcesContent":["```vue\r\n   <template>\r\n     <div class=\"bg-white p-6 rounded-lg shadow-md mb-6\">\r\n       <h2 class=\"text-2xl font-semibold text-gray-800 mb-4\">Asignar Cartones por Lote</h2>\r\n       <div class=\"space-y-4\">\r\n         <div>\r\n           <label class=\"block text-gray-600 mb-1\">Seleccionar Vendedor</label>\r\n           <select\r\n             v-model=\"selectedVendedorId\"\r\n             class=\"w-full p-2 border rounded-md\"\r\n           >\r\n             <option value=\"\" disabled>Selecciona un vendedor</option>\r\n             <option v-for=\"seller in sellers\" :key=\"seller.vendedorId\" :value=\"seller.vendedorId\">\r\n               {{ seller.nombre }}\r\n             </option>\r\n           </select>\r\n         </div>\r\n         <div>\r\n           <label class=\"block text-gray-600 mb-1\">Serial Inicial (ej. LM0001)</label>\r\n           <input\r\n             v-model=\"startSerial\"\r\n             type=\"text\"\r\n             placeholder=\"LM0001\"\r\n             class=\"w-full p-2 border rounded-md\"\r\n           />\r\n         </div>\r\n         <div>\r\n           <label class=\"block text-gray-600 mb-1\">Serial Final (ej. LM0100)</label>\r\n           <input\r\n             v-model=\"endSerial\"\r\n             type=\"text\"\r\n             placeholder=\"LM0100\"\r\n             class=\"w-full p-2 border rounded-md\"\r\n           />\r\n         </div>\r\n         <button\r\n           @click=\"assignCartons\"\r\n           class=\"bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 transition\"\r\n           :disabled=\"!selectedVendedorId || !startSerial || !endSerial\"\r\n         >\r\n           Asignar Lote\r\n         </button>\r\n       </div>\r\n       <p v-if=\"errorMessage\" class=\"text-red-600 mt-2\">{{ errorMessage }}</p>\r\n       <p v-if=\"successMessage\" class=\"text-green-600 mt-2\">{{ successMessage }}</p>\r\n     </div>\r\n   </template>\r\n\r\n   <script>\r\n   import { db } from '../firebase';\r\n   import { collection, getDocs, query, where, updateDoc, doc } from 'firebase/firestore';\r\n\r\n   export default {\r\n     data() {\r\n       return {\r\n         sellers: [],\r\n         selectedVendedorId: '',\r\n         startSerial: '',\r\n         endSerial: '',\r\n         errorMessage: '',\r\n         successMessage: ''\r\n       };\r\n     },\r\n     async mounted() {\r\n       await this.loadSellers();\r\n     },\r\n     methods: {\r\n       async loadSellers() {\r\n         try {\r\n           const querySnapshot = await getDocs(collection(db, 'vendedores'));\r\n           this.sellers = querySnapshot.docs.map(doc => doc.data());\r\n         } catch (error) {\r\n           console.error('Error al cargar los vendedores:', error);\r\n           this.errorMessage = 'Error al cargar los vendedores: ' + error.message;\r\n         }\r\n       },\r\n       async assignCartons() {\r\n         this.errorMessage = '';\r\n         this.successMessage = '';\r\n\r\n         if (!this.selectedVendedorId || !this.startSerial || !this.endSerial) {\r\n           this.errorMessage = 'Por favor, completa todos los campos.';\r\n           return;\r\n         }\r\n\r\n         // Validar formato de seriales (LM seguido de números)\r\n         const serialRegex = /^LM\\d+$/;\r\n         if (!serialRegex.test(this.startSerial) || !serialRegex.test(this.endSerial)) {\r\n           this.errorMessage = 'Los seriales deben comenzar con \"LM\" seguido de números (ej. LM0001).';\r\n           return;\r\n         }\r\n\r\n         // Extraer números de los seriales\r\n         const startNum = parseInt(this.startSerial.replace('LM', ''), 10);\r\n         const endNum = parseInt(this.endSerial.replace('LM', ''), 10);\r\n\r\n         if (isNaN(startNum) || isNaN(endNum) || startNum > endNum) {\r\n           this.errorMessage = 'El serial inicial debe ser menor o igual al serial final.';\r\n           return;\r\n         }\r\n\r\n         try {\r\n           const cartonesRef = collection(db, 'cartones');\r\n           const serials = [];\r\n           for (let i = startNum; i <= endNum; i++) {\r\n             const serial = `LM${i.toString().padStart(4, '0')}`;\r\n             serials.push(serial);\r\n           }\r\n\r\n           // Consultar cartones en el rango\r\n           const q = query(cartonesRef, where('serial', 'in', serials));\r\n           const querySnapshot = await getDocs(q);\r\n           const cartones = querySnapshot.docs;\r\n\r\n           if (cartones.length === 0) {\r\n             this.errorMessage = 'No se encontraron cartones en el rango especificado.';\r\n             return;\r\n           }\r\n\r\n           // Actualizar vendedorId para cada cartón\r\n           const updates = cartones.map(async (cartonDoc) => {\r\n             await updateDoc(doc(db, 'cartones', cartonDoc.id), {\r\n               vendedorId: this.selectedVendedorId\r\n             });\r\n           });\r\n\r\n           await Promise.all(updates);\r\n           this.successMessage = `Se asignaron ${cartones.length} cartones al vendedor.`;\r\n           this.startSerial = '';\r\n           this.endSerial = '';\r\n           this.selectedVendedorId = '';\r\n         } catch (error) {\r\n           console.error('Error al asignar cartones:', error);\r\n           this.errorMessage = 'Error al asignar cartones: ' + error.message;\r\n         }\r\n       }\r\n     }\r\n   };\r\n   </script>\r\n\r\n   <style scoped>\r\n   /* Tailwind maneja los estilos */\r\n   </style>\r\n   ```"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}