{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nexport default {\n  data() {\n    return {\n      selectedFiles: [],\n      uploadedUrls: [],\n      duplicates: [],\n      // Almacena los nombres de archivos duplicados\n      cloudinaryUrl: 'https://api.cloudinary.com/v1_1/dardyvsja/image/upload',\n      uploadPreset: 'cartones_upload'\n    };\n  },\n  methods: {\n    onFileChange(event) {\n      this.selectedFiles = Array.from(event.target.files);\n      this.uploadedUrls = [];\n      this.duplicates = [];\n    },\n    async checkAndUploadImages() {\n      if (this.selectedFiles.length === 0) {\n        alert('Por favor, selecciona al menos una imagen.');\n        return;\n      }\n\n      // Extraer seriales de los archivos\n      const serials = this.selectedFiles.map(file => file.name.split('.')[0]);\n\n      // Emitir seriales para verificar duplicados\n      this.$emit('check-duplicates', {\n        serials,\n        files: this.selectedFiles\n      }, async nonDuplicates => {\n        if (nonDuplicates.length === 0) {\n          alert('Todos los archivos seleccionados ya existen.');\n          return;\n        }\n        this.uploadedUrls = [];\n        this.duplicates = this.selectedFiles.filter(file => !nonDuplicates.some(nd => nd.name === file.name)).map(file => file.name);\n        const uploadPromises = nonDuplicates.map(async file => {\n          const serial = file.name.split('.')[0];\n          const formData = new FormData();\n          formData.append('file', file);\n          formData.append('upload_preset', this.uploadPreset);\n          try {\n            const response = await fetch(this.cloudinaryUrl, {\n              method: 'POST',\n              body: formData\n            });\n            const data = await response.json();\n            if (data.secure_url) {\n              this.uploadedUrls.push(data.secure_url);\n              return {\n                serial,\n                imageUrl: data.secure_url\n              };\n            } else {\n              throw new Error(`Error al subir ${file.name}: ${JSON.stringify(data)}`);\n            }\n          } catch (error) {\n            console.error(`Error al subir ${file.name}:`, error);\n            return null;\n          }\n        });\n        try {\n          const results = await Promise.all(uploadPromises);\n          const validResults = results.filter(result => result !== null);\n          if (validResults.length > 0) {\n            this.$emit('images-uploaded', validResults);\n            alert(`${validResults.length} de ${nonDuplicates.length} imágenes subidas correctamente.`);\n          } else {\n            alert('No se subieron imágenes correctamente.');\n          }\n        } catch (error) {\n          console.error('Error en el proceso de subida:', error);\n          alert('Error en el proceso de subida: ' + error.message);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","selectedFiles","uploadedUrls","duplicates","cloudinaryUrl","uploadPreset","methods","onFileChange","event","Array","from","target","files","checkAndUploadImages","length","alert","serials","map","file","name","split","$emit","nonDuplicates","filter","some","nd","uploadPromises","serial","formData","FormData","append","response","fetch","method","body","json","secure_url","push","imageUrl","Error","JSON","stringify","error","console","results","Promise","all","validResults","result","message"],"sources":["D:\\Lotweb\\venta-cartones\\src\\components\\UploadCarton.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>Subir Cartones</h2>\r\n    <input type=\"file\" @change=\"onFileChange\" accept=\"image/*\" multiple />\r\n    <button @click=\"checkAndUploadImages\">Subir Imágenes</button>\r\n    <p v-if=\"uploadedUrls.length > 0\">\r\n      Imágenes subidas:\r\n      <ul>\r\n        <li v-for=\"(url, index) in uploadedUrls\" :key=\"index\">\r\n          <a :href=\"url\" target=\"_blank\">{{ url }}</a>\r\n        </li>\r\n      </ul>\r\n    </p>\r\n    <p v-if=\"duplicates.length > 0\">\r\n      Archivos ya existentes:\r\n      <ul>\r\n        <li v-for=\"duplicate in duplicates\" :key=\"duplicate\">{{ duplicate }}</li>\r\n      </ul>\r\n    </p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      selectedFiles: [],\r\n      uploadedUrls: [],\r\n      duplicates: [], // Almacena los nombres de archivos duplicados\r\n      cloudinaryUrl: 'https://api.cloudinary.com/v1_1/dardyvsja/image/upload',\r\n      uploadPreset: 'cartones_upload'\r\n    };\r\n  },\r\n  methods: {\r\n    onFileChange(event) {\r\n      this.selectedFiles = Array.from(event.target.files);\r\n      this.uploadedUrls = [];\r\n      this.duplicates = [];\r\n    },\r\n    async checkAndUploadImages() {\r\n      if (this.selectedFiles.length === 0) {\r\n        alert('Por favor, selecciona al menos una imagen.');\r\n        return;\r\n      }\r\n\r\n      // Extraer seriales de los archivos\r\n      const serials = this.selectedFiles.map(file => file.name.split('.')[0]);\r\n\r\n      // Emitir seriales para verificar duplicados\r\n      this.$emit('check-duplicates', { serials, files: this.selectedFiles }, async (nonDuplicates) => {\r\n        if (nonDuplicates.length === 0) {\r\n          alert('Todos los archivos seleccionados ya existen.');\r\n          return;\r\n        }\r\n\r\n        this.uploadedUrls = [];\r\n        this.duplicates = this.selectedFiles\r\n          .filter(file => !nonDuplicates.some(nd => nd.name === file.name))\r\n          .map(file => file.name);\r\n\r\n        const uploadPromises = nonDuplicates.map(async (file) => {\r\n          const serial = file.name.split('.')[0];\r\n          const formData = new FormData();\r\n          formData.append('file', file);\r\n          formData.append('upload_preset', this.uploadPreset);\r\n\r\n          try {\r\n            const response = await fetch(this.cloudinaryUrl, {\r\n              method: 'POST',\r\n              body: formData\r\n            });\r\n            const data = await response.json();\r\n            if (data.secure_url) {\r\n              this.uploadedUrls.push(data.secure_url);\r\n              return { serial, imageUrl: data.secure_url };\r\n            } else {\r\n              throw new Error(`Error al subir ${file.name}: ${JSON.stringify(data)}`);\r\n            }\r\n          } catch (error) {\r\n            console.error(`Error al subir ${file.name}:`, error);\r\n            return null;\r\n          }\r\n        });\r\n\r\n        try {\r\n          const results = await Promise.all(uploadPromises);\r\n          const validResults = results.filter(result => result !== null);\r\n          if (validResults.length > 0) {\r\n            this.$emit('images-uploaded', validResults);\r\n            alert(`${validResults.length} de ${nonDuplicates.length} imágenes subidas correctamente.`);\r\n          } else {\r\n            alert('No se subieron imágenes correctamente.');\r\n          }\r\n        } catch (error) {\r\n          console.error('Error en el proceso de subida:', error);\r\n          alert('Error en el proceso de subida: ' + error.message);\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\ndiv {\r\n  margin: 20px;\r\n}\r\ninput, button {\r\n  margin: 10px 0;\r\n}\r\nul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\nli {\r\n  margin: 5px 0;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}