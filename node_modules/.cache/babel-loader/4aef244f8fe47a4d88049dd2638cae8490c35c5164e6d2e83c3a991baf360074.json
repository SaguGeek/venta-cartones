{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { db } from '../firebase';\nimport { collection, addDoc } from 'firebase/firestore';\nimport UploadCarton from '../components/UploadCarton.vue';\nimport AssignCartons from '../components/AssignCartons.vue';\nimport CartonList from '../components/CartonList.vue';\nexport default {\n  components: {\n    UploadCarton,\n    AssignCartons,\n    CartonList\n  },\n  data() {\n    return {\n      cartones: []\n    };\n  },\n  methods: {\n    async handleImagesUploaded(images) {\n      try {\n        const batch = [];\n        for (const {\n          serial,\n          imageUrl\n        } of images) {\n          batch.push(addDoc(collection(db, 'cartones'), {\n            serial,\n            imageUrl,\n            estado: 'disponible',\n            vendedorId: null,\n            createdAt: new Date()\n          }));\n        }\n        await Promise.all(batch);\n        console.log('Cartones guardados en Firestore:', images);\n        this.refreshCartones();\n      } catch (error) {\n        console.error('Error al guardar cartones:', error);\n        alert('Error al guardar cartones: ' + error.message);\n      }\n    },\n    checkDuplicates({\n      serials,\n      files\n    }, callback) {\n      // Simulación de verificación de duplicados (debería consultar Firestore)\n      this.$nextTick(() => {\n        const existingSerials = this.cartones.map(c => c.serial); // Simulación\n        const nonDuplicates = files.filter(file => !existingSerials.includes(file.name.split('.')[0]));\n        callback(nonDuplicates);\n      });\n    },\n    async refreshCartones() {\n      this.$refs.cartonList.loadData(); // Suponiendo que CartonList tiene un ref\n    }\n  },\n  async mounted() {\n    // Listener en tiempo real para refrescar CartonList\n    const unsubscribe = db.collection('cartones').onSnapshot(snapshot => {\n      this.cartones = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      this.$refs.cartonList.loadData(); // Refresca la lista en tiempo real\n    }, error => {\n      console.error('Error en listener de cartones:', error);\n    });\n    // Limpieza del listener al desmontar\n    this.$once('hook:beforeDestroy', unsubscribe);\n  }\n};","map":{"version":3,"names":["db","collection","addDoc","UploadCarton","AssignCartons","CartonList","components","data","cartones","methods","handleImagesUploaded","images","batch","serial","imageUrl","push","estado","vendedorId","createdAt","Date","Promise","all","console","log","refreshCartones","error","alert","message","checkDuplicates","serials","files","callback","$nextTick","existingSerials","map","c","nonDuplicates","filter","file","includes","name","split","$refs","cartonList","loadData","mounted","unsubscribe","onSnapshot","snapshot","docs","doc","id","$once"],"sources":["D:\\Lotweb\\venta-cartones\\src\\views\\HomePage.vue"],"sourcesContent":["```vue\r\n<template>\r\n  <div class=\"p-6\">\r\n    <h1 class=\"text-3xl font-bold text-gray-800 mb-6\">Dashboard</h1>\r\n    <upload-carton @images-uploaded=\"handleImagesUploaded\" @check-duplicates=\"checkDuplicates\" />\r\n    <assign-cartons @cartones-asignados=\"refreshCartones\" />\r\n    <carton-list />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { db } from '../firebase';\r\nimport { collection, addDoc } from 'firebase/firestore';\r\nimport UploadCarton from '../components/UploadCarton.vue';\r\nimport AssignCartons from '../components/AssignCartons.vue';\r\nimport CartonList from '../components/CartonList.vue';\r\n\r\nexport default {\r\n  components: {\r\n    UploadCarton,\r\n    AssignCartons,\r\n    CartonList\r\n  },\r\n  data() {\r\n    return {\r\n      cartones: []\r\n    };\r\n  },\r\n  methods: {\r\n    async handleImagesUploaded(images) {\r\n      try {\r\n        const batch = [];\r\n        for (const { serial, imageUrl } of images) {\r\n          batch.push(addDoc(collection(db, 'cartones'), {\r\n            serial,\r\n            imageUrl,\r\n            estado: 'disponible',\r\n            vendedorId: null,\r\n            createdAt: new Date()\r\n          }));\r\n        }\r\n        await Promise.all(batch);\r\n        console.log('Cartones guardados en Firestore:', images);\r\n        this.refreshCartones();\r\n      } catch (error) {\r\n        console.error('Error al guardar cartones:', error);\r\n        alert('Error al guardar cartones: ' + error.message);\r\n      }\r\n    },\r\n    checkDuplicates({ serials, files }, callback) {\r\n      // Simulación de verificación de duplicados (debería consultar Firestore)\r\n      this.$nextTick(() => {\r\n        const existingSerials = this.cartones.map(c => c.serial); // Simulación\r\n        const nonDuplicates = files.filter(file => !existingSerials.includes(file.name.split('.')[0]));\r\n        callback(nonDuplicates);\r\n      });\r\n    },\r\n    async refreshCartones() {\r\n      this.$refs.cartonList.loadData(); // Suponiendo que CartonList tiene un ref\r\n    }\r\n  },\r\n  async mounted() {\r\n    // Listener en tiempo real para refrescar CartonList\r\n    const unsubscribe = db.collection('cartones').onSnapshot(snapshot => {\r\n      this.cartones = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n      this.$refs.cartonList.loadData(); // Refresca la lista en tiempo real\r\n    }, error => {\r\n      console.error('Error en listener de cartones:', error);\r\n    });\r\n    // Limpieza del listener al desmontar\r\n    this.$once('hook:beforeDestroy', unsubscribe);\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Tailwind maneja los estilos */\r\n</style>\r\n```"],"mappings":";;;;AAWA,SAASA,EAAC,QAAS,aAAa;AAChC,SAASC,UAAU,EAAEC,MAAK,QAAS,oBAAoB;AACvD,OAAOC,YAAW,MAAO,gCAAgC;AACzD,OAAOC,aAAY,MAAO,iCAAiC;AAC3D,OAAOC,UAAS,MAAO,8BAA8B;AAErD,eAAe;EACbC,UAAU,EAAE;IACVH,YAAY;IACZC,aAAa;IACbC;EACF,CAAC;EACDE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,oBAAoBA,CAACC,MAAM,EAAE;MACjC,IAAI;QACF,MAAMC,KAAI,GAAI,EAAE;QAChB,KAAK,MAAM;UAAEC,MAAM;UAAEC;QAAS,KAAKH,MAAM,EAAE;UACzCC,KAAK,CAACG,IAAI,CAACb,MAAM,CAACD,UAAU,CAACD,EAAE,EAAE,UAAU,CAAC,EAAE;YAC5Ca,MAAM;YACNC,QAAQ;YACRE,MAAM,EAAE,YAAY;YACpBC,UAAU,EAAE,IAAI;YAChBC,SAAS,EAAE,IAAIC,IAAI,CAAC;UACtB,CAAC,CAAC,CAAC;QACL;QACA,MAAMC,OAAO,CAACC,GAAG,CAACT,KAAK,CAAC;QACxBU,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEZ,MAAM,CAAC;QACvD,IAAI,CAACa,eAAe,CAAC,CAAC;MACxB,EAAE,OAAOC,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDC,KAAK,CAAC,6BAA4B,GAAID,KAAK,CAACE,OAAO,CAAC;MACtD;IACF,CAAC;IACDC,eAAeA,CAAC;MAAEC,OAAO;MAAEC;IAAM,CAAC,EAAEC,QAAQ,EAAE;MAC5C;MACA,IAAI,CAACC,SAAS,CAAC,MAAM;QACnB,MAAMC,eAAc,GAAI,IAAI,CAACzB,QAAQ,CAAC0B,GAAG,CAACC,CAAA,IAAKA,CAAC,CAACtB,MAAM,CAAC,EAAE;QAC1D,MAAMuB,aAAY,GAAIN,KAAK,CAACO,MAAM,CAACC,IAAG,IAAK,CAACL,eAAe,CAACM,QAAQ,CAACD,IAAI,CAACE,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9FV,QAAQ,CAACK,aAAa,CAAC;MACzB,CAAC,CAAC;IACJ,CAAC;IACD,MAAMZ,eAAeA,CAAA,EAAG;MACtB,IAAI,CAACkB,KAAK,CAACC,UAAU,CAACC,QAAQ,CAAC,CAAC,EAAE;IACpC;EACF,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd;IACA,MAAMC,WAAU,GAAI9C,EAAE,CAACC,UAAU,CAAC,UAAU,CAAC,CAAC8C,UAAU,CAACC,QAAO,IAAK;MACnE,IAAI,CAACxC,QAAO,GAAIwC,QAAQ,CAACC,IAAI,CAACf,GAAG,CAACgB,GAAE,KAAM;QAAEC,EAAE,EAAED,GAAG,CAACC,EAAE;QAAE,GAAGD,GAAG,CAAC3C,IAAI,CAAC;MAAE,CAAC,CAAC,CAAC;MACzE,IAAI,CAACmC,KAAK,CAACC,UAAU,CAACC,QAAQ,CAAC,CAAC,EAAE;IACpC,CAAC,EAAEnB,KAAI,IAAK;MACVH,OAAO,CAACG,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD,CAAC,CAAC;IACF;IACA,IAAI,CAAC2B,KAAK,CAAC,oBAAoB,EAAEN,WAAW,CAAC;EAC/C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}