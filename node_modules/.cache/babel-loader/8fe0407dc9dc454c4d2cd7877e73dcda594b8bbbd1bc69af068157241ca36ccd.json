{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_UploadCarton = _resolveComponent(\"UploadCarton\");\n  const _component_CartonList = _resolveComponent(\"CartonList\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"h1\", null, \"Venta de Cartones\", -1 /* HOISTED */)), _createVNode(_component_UploadCarton, {\n    onCheckDuplicates: $options.checkDuplicates,\n    onImagesUploaded: $options.handleImagesUploaded\n  }, null, 8 /* PROPS */, [\"onCheckDuplicates\", \"onImagesUploaded\"]), _createVNode(_component_CartonList)]);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1","_createElementVNode","_createVNode","_component_UploadCarton","onCheckDuplicates","$options","checkDuplicates","onImagesUploaded","handleImagesUploaded","_component_CartonList"],"sources":["D:\\Lotweb\\venta-cartones\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <h1>Venta de Cartones</h1>\n    <UploadCarton @check-duplicates=\"checkDuplicates\" @images-uploaded=\"handleImagesUploaded\" />\n    <CartonList />\n  </div>\n</template>\n\n<script>\nimport UploadCarton from './components/UploadCarton.vue';\nimport CartonList from './components/CartonList.vue';\nimport { db } from './firebase';\nimport { collection, query, where, getDocs, addDoc } from 'firebase/firestore';\n\nexport default {\n  components: {\n    UploadCarton,\n    CartonList\n  },\n  methods: {\n    async checkDuplicates({ serials, files }, callback) {\n      try {\n        const cartonesRef = collection(db, 'cartones');\n        const q = query(cartonesRef, where('serial', 'in', serials));\n        const querySnapshot = await getDocs(q);\n        const existingSerials = querySnapshot.docs.map(doc => doc.data().serial);\n        const nonDuplicates = files.filter(file => !existingSerials.includes(file.name.split('.')[0]));\n        callback(nonDuplicates);\n      } catch (error) {\n        console.error('Error al verificar duplicados:', error);\n        alert('Error al verificar duplicados: ' + error.message);\n        callback([]);\n      }\n    },\n    async handleImagesUploaded(images) {\n      try {\n        for (const image of images) {\n          const docRef = await addDoc(collection(db, 'cartones'), {\n            serial: image.serial,\n            imageUrl: image.imageUrl,\n            estado: 'disponible',\n            createdAt: new Date(),\n            vendedorId: null\n          });\n          console.log(`Cart√≥n ${image.serial} guardado con ID:`, docRef.id);\n        }\n        alert('Todos los cartones se guardaron exitosamente en Firestore');\n      } catch (error) {\n        console.error('Error al guardar los cartones:', error);\n        alert('Error al guardar en Firestore: ' + error.message);\n      }\n    }\n  }\n};\n</script>\n\n<style>\n#app {\n  text-align: center;\n  margin: 20px;\n}\n</style>"],"mappings":";;EACOA,EAAE,EAAC;AAAK;;;;uBAAbC,mBAAA,CAIM,OAJNC,UAIM,G,0BAHJC,mBAAA,CAA0B,YAAtB,mBAAiB,sBACrBC,YAAA,CAA4FC,uBAAA;IAA7EC,iBAAgB,EAAEC,QAAA,CAAAC,eAAe;IAAGC,gBAAe,EAAEF,QAAA,CAAAG;sEACpEN,YAAA,CAAcO,qBAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}