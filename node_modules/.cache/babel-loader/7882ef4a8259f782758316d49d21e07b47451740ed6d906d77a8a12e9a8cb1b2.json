{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { db } from '../firebase';\nimport { collection, query, getDocs } from 'firebase/firestore';\nexport default {\n  name: 'CartonList',\n  data() {\n    return {\n      cartones: [],\n      sellers: []\n    };\n  },\n  async created() {\n    await this.loadSellers();\n    await this.loadCartones();\n  },\n  methods: {\n    async loadSellers() {\n      try {\n        const querySnapshot = await getDocs(collection(db, 'vendedores'));\n        this.sellers = querySnapshot.docs.map(docSnapshot => ({\n          id: docSnapshot.id,\n          name: docSnapshot.data().name || docSnapshot.id\n        }));\n      } catch (error) {\n        console.error('Error al cargar vendedores:', error);\n      }\n    },\n    async loadCartones() {\n      try {\n        const querySnapshot = await getDocs(collection(db, 'cartones'));\n        this.cartones = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n      } catch (error) {\n        console.error('Error al cargar cartones:', error);\n      }\n    },\n    getSellerName(vendedorId) {\n      const seller = this.sellers.find(s => s.id === vendedorId);\n      return seller ? seller.name : 'Desconocido';\n    }\n  }\n};","map":{"version":3,"names":["db","collection","query","getDocs","name","data","cartones","sellers","created","loadSellers","loadCartones","methods","querySnapshot","docs","map","docSnapshot","id","error","console","doc","getSellerName","vendedorId","seller","find","s"],"sources":["D:\\Lotweb\\venta-cartones\\src\\components\\CartonList.vue"],"sourcesContent":["```vue\r\n<template>\r\n  <div>\r\n    <!-- Lista de Cartones como Miniaturas -->\r\n    <div class=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n      <div\r\n        v-for=\"carton in cartones\"\r\n        :key=\"carton.id\"\r\n        class=\"bg-white p-4 rounded-lg shadow-md hover:shadow-lg transition duration-300\"\r\n      >\r\n        <!-- Miniatura -->\r\n        <div class=\"w-full flex justify-center\">\r\n          <div class=\"w-32 h-32 sm:w-16 sm:h-16 lg:w-32 lg:h-32 bg-gray-200 rounded flex items-center justify-center text-gray-500\">\r\n            <img v-if=\"carton.imageUrl\" :src=\"carton.imageUrl\" alt=\"Cartón\" class=\"w-full h-full object-cover rounded\" />\r\n            <span v-else>Cartón {{ carton.serial }}</span>\r\n          </div>\r\n        </div>\r\n        <!-- Información del Cartón -->\r\n        <div class=\"mt-2 text-center\">\r\n          <p class=\"text-gray-800 font-medium\">Cartón {{ carton.serial }}</p>\r\n          <p class=\"text-gray-600 text-sm\">{{ carton.estado }}</p>\r\n          <p v-if=\"carton.vendedorId\" class=\"text-gray-600 text-sm\">Vendedor: {{ getSellerName(carton.vendedorId) }}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { db } from '../firebase';\r\nimport { collection, query, getDocs } from 'firebase/firestore';\r\n\r\nexport default {\r\n  name: 'CartonList',\r\n  data() {\r\n    return {\r\n      cartones: [],\r\n      sellers: []\r\n    };\r\n  },\r\n  async created() {\r\n    await this.loadSellers();\r\n    await this.loadCartones();\r\n  },\r\n  methods: {\r\n    async loadSellers() {\r\n      try {\r\n        const querySnapshot = await getDocs(collection(db, 'vendedores'));\r\n        this.sellers = querySnapshot.docs.map(docSnapshot => ({\r\n          id: docSnapshot.id,\r\n          name: docSnapshot.data().name || docSnapshot.id\r\n        }));\r\n      } catch (error) {\r\n        console.error('Error al cargar vendedores:', error);\r\n      }\r\n    },\r\n    async loadCartones() {\r\n      try {\r\n        const querySnapshot = await getDocs(collection(db, 'cartones'));\r\n        this.cartones = querySnapshot.docs.map(doc => ({\r\n          id: doc.id,\r\n          ...doc.data()\r\n        }));\r\n      } catch (error) {\r\n        console.error('Error al cargar cartones:', error);\r\n      }\r\n    },\r\n    getSellerName(vendedorId) {\r\n      const seller = this.sellers.find(s => s.id === vendedorId);\r\n      return seller ? seller.name : 'Desconocido';\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Tailwind maneja los estilos */\r\n</style>\r\n```"],"mappings":";;;AA6BA,SAASA,EAAC,QAAS,aAAa;AAChC,SAASC,UAAU,EAAEC,KAAK,EAAEC,OAAM,QAAS,oBAAoB;AAE/D,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,OAAO,EAAE;IACX,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACC,WAAW,CAAC,CAAC;IACxB,MAAM,IAAI,CAACC,YAAY,CAAC,CAAC;EAC3B,CAAC;EACDC,OAAO,EAAE;IACP,MAAMF,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAMG,aAAY,GAAI,MAAMT,OAAO,CAACF,UAAU,CAACD,EAAE,EAAE,YAAY,CAAC,CAAC;QACjE,IAAI,CAACO,OAAM,GAAIK,aAAa,CAACC,IAAI,CAACC,GAAG,CAACC,WAAU,KAAM;UACpDC,EAAE,EAAED,WAAW,CAACC,EAAE;UAClBZ,IAAI,EAAEW,WAAW,CAACV,IAAI,CAAC,CAAC,CAACD,IAAG,IAAKW,WAAW,CAACC;QAC/C,CAAC,CAAC,CAAC;MACL,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;IACD,MAAMP,YAAYA,CAAA,EAAG;MACnB,IAAI;QACF,MAAME,aAAY,GAAI,MAAMT,OAAO,CAACF,UAAU,CAACD,EAAE,EAAE,UAAU,CAAC,CAAC;QAC/D,IAAI,CAACM,QAAO,GAAIM,aAAa,CAACC,IAAI,CAACC,GAAG,CAACK,GAAE,KAAM;UAC7CH,EAAE,EAAEG,GAAG,CAACH,EAAE;UACV,GAAGG,GAAG,CAACd,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;MACL,EAAE,OAAOY,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IACDG,aAAaA,CAACC,UAAU,EAAE;MACxB,MAAMC,MAAK,GAAI,IAAI,CAACf,OAAO,CAACgB,IAAI,CAACC,CAAA,IAAKA,CAAC,CAACR,EAAC,KAAMK,UAAU,CAAC;MAC1D,OAAOC,MAAK,GAAIA,MAAM,CAAClB,IAAG,GAAI,aAAa;IAC7C;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}