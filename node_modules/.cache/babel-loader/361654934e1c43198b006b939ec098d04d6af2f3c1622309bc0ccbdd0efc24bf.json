{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { db } from '../firebase';\nimport { collection, query, where, getDocs, doc, updateDoc } from 'firebase/firestore';\nexport default {\n  data() {\n    return {\n      sellers: [],\n      availableCartons: [],\n      selectedSeller: '',\n      fromCarton: '',\n      toCarton: ''\n    };\n  },\n  async mounted() {\n    await this.loadSellers();\n    await this.loadAvailableCartons();\n  },\n  methods: {\n    async loadSellers() {\n      try {\n        console.log('Cargando vendedores...');\n        const querySnapshot = await getDocs(collection(db, 'vendedores'));\n        this.sellers = querySnapshot.docs.map(docSnapshot => {\n          const data = docSnapshot.data();\n          return {\n            id: docSnapshot.id,\n            ...data,\n            vendedorId: data.vendedorId || docSnapshot.id\n          };\n        });\n        console.log('Vendedores cargados:', this.sellers);\n      } catch (error) {\n        console.error('Error al cargar los vendedores:', error);\n        alert('Error al cargar los vendedores: ' + error.message);\n      }\n    },\n    async loadAvailableCartons() {\n      try {\n        console.log('Cargando cartones disponibles...');\n        const q = query(collection(db, 'cartones'), where('vendedorId', '==', null), where('estado', '==', 'disponible'));\n        const querySnapshot = await getDocs(q);\n        this.availableCartons = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          serial: doc.data().serial\n        }));\n        // Ordenar los cartones por serial para facilitar la selección de rangos\n        this.availableCartons.sort((a, b) => a.serial.localeCompare(b.serial));\n        console.log('Cartones disponibles:', this.availableCartons);\n      } catch (error) {\n        console.error('Error al cargar cartones disponibles:', error);\n        alert('Error al cargar cartones disponibles: ' + error.message);\n      }\n    },\n    async assignCartons() {\n      if (!this.selectedSeller || !this.fromCarton || !this.toCarton) return;\n      try {\n        console.log('Asignando cartones a vendedor:', this.selectedSeller, 'Desde:', this.fromCarton, 'Hasta:', this.toCarton);\n        const fromIndex = this.availableCartons.findIndex(carton => carton.id === this.fromCarton);\n        const toIndex = this.availableCartons.findIndex(carton => carton.id === this.toCarton);\n        if (fromIndex === -1 || toIndex === -1) {\n          throw new Error('Cartón inicial o final no encontrado');\n        }\n        const startIndex = Math.min(fromIndex, toIndex);\n        const endIndex = Math.max(fromIndex, toIndex);\n        const selectedCartons = this.availableCartons.slice(startIndex, endIndex + 1).map(carton => carton.id);\n        console.log('Cartones seleccionados en el rango:', selectedCartons);\n        const batch = [];\n        for (const cartonId of selectedCartons) {\n          const cartonRef = doc(db, 'cartones', cartonId);\n          batch.push(updateDoc(cartonRef, {\n            vendedorId: this.selectedSeller,\n            estado: 'asignado'\n          }));\n        }\n        await Promise.all(batch);\n        console.log('Cartones asignados exitosamente');\n        alert('Cartones asignados exitosamente');\n        this.fromCarton = '';\n        this.toCarton = '';\n        await this.loadAvailableCartons();\n        this.$emit('cartons-asignados'); // Emitir evento para actualizar en tiempo real\n      } catch (error) {\n        console.error('Error al asignar cartones:', error);\n        alert('Error al asignar cartones: ' + error.message);\n      }\n    }\n  }\n};","map":{"version":3,"names":["db","collection","query","where","getDocs","doc","updateDoc","data","sellers","availableCartons","selectedSeller","fromCarton","toCarton","mounted","loadSellers","loadAvailableCartons","methods","console","log","querySnapshot","docs","map","docSnapshot","id","vendedorId","error","alert","message","q","serial","sort","a","b","localeCompare","assignCartons","fromIndex","findIndex","carton","toIndex","Error","startIndex","Math","min","endIndex","max","selectedCartons","slice","batch","cartonId","cartonRef","push","estado","Promise","all","$emit"],"sources":["D:\\Lotweb\\venta-cartones\\src\\components\\AssignCartons.vue"],"sourcesContent":["```vue\r\n<template>\r\n  <div class=\"space-y-4\">\r\n    <h2 class=\"text-xl font-semibold text-gray-800 mb-4\">Asignar Cartones por Lote</h2>\r\n    <form @submit.prevent=\"assignCartons\" class=\"space-y-4\">\r\n      <!-- Selección de Vendedor -->\r\n      <div>\r\n        <label for=\"seller\" class=\"block text-sm font-medium text-gray-700\">Seleccionar Vendedor</label>\r\n        <select\r\n          v-model=\"selectedSeller\"\r\n          id=\"seller\"\r\n          class=\"mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-300\"\r\n        >\r\n          <option value=\"\" disabled>Selecciona un vendedor</option>\r\n          <option v-for=\"seller in sellers\" :key=\"seller.id\" :value=\"seller.id\">{{ seller.nombre || seller.id }}</option>\r\n        </select>\r\n      </div>\r\n\r\n      <!-- Rango de Cartones Disponibles -->\r\n      <div class=\"flex flex-col sm:flex-row sm:space-x-4 space-y-4 sm:space-y-0\">\r\n        <div class=\"w-full sm:w-1/2\">\r\n          <label for=\"fromCarton\" class=\"block text-sm font-medium text-gray-700\">Desde</label>\r\n          <select\r\n            v-model=\"fromCarton\"\r\n            id=\"fromCarton\"\r\n            class=\"mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-300\"\r\n          >\r\n            <option value=\"\" disabled>Selecciona un cartón</option>\r\n            <option v-for=\"carton in availableCartons\" :key=\"carton.id\" :value=\"carton.id\">{{ carton.serial }}</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"w-full sm:w-1/2\">\r\n          <label for=\"toCarton\" class=\"block text-sm font-medium text-gray-700\">Hasta</label>\r\n          <select\r\n            v-model=\"toCarton\"\r\n            id=\"toCarton\"\r\n            class=\"mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-300\"\r\n          >\r\n            <option value=\"\" disabled>Selecciona un cartón</option>\r\n            <option v-for=\"carton in availableCartons\" :key=\"carton.id\" :value=\"carton.id\">{{ carton.serial }}</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Botón de Asignar -->\r\n      <button\r\n        type=\"submit\"\r\n        class=\"w-full bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50 transition duration-300\"\r\n        :disabled=\"!selectedSeller || !fromCarton || !toCarton\"\r\n      >\r\n        Asignar Seleccionados\r\n      </button>\r\n\r\n      <!-- Mensaje de Advertencia -->\r\n      <p v-if=\"!selectedSeller || !fromCarton || !toCarton\" class=\"text-yellow-600 text-sm text-center\">\r\n        Por favor, selecciona un vendedor y un rango de cartones.\r\n      </p>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { db } from '../firebase';\r\nimport { collection, query, where, getDocs, doc, updateDoc } from 'firebase/firestore';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      sellers: [],\r\n      availableCartons: [],\r\n      selectedSeller: '',\r\n      fromCarton: '',\r\n      toCarton: ''\r\n    };\r\n  },\r\n  async mounted() {\r\n    await this.loadSellers();\r\n    await this.loadAvailableCartons();\r\n  },\r\n  methods: {\r\n    async loadSellers() {\r\n      try {\r\n        console.log('Cargando vendedores...');\r\n        const querySnapshot = await getDocs(collection(db, 'vendedores'));\r\n        this.sellers = querySnapshot.docs.map(docSnapshot => {\r\n          const data = docSnapshot.data();\r\n          return {\r\n            id: docSnapshot.id,\r\n            ...data,\r\n            vendedorId: data.vendedorId || docSnapshot.id\r\n          };\r\n        });\r\n        console.log('Vendedores cargados:', this.sellers);\r\n      } catch (error) {\r\n        console.error('Error al cargar los vendedores:', error);\r\n        alert('Error al cargar los vendedores: ' + error.message);\r\n      }\r\n    },\r\n    async loadAvailableCartons() {\r\n      try {\r\n        console.log('Cargando cartones disponibles...');\r\n        const q = query(\r\n          collection(db, 'cartones'),\r\n          where('vendedorId', '==', null),\r\n          where('estado', '==', 'disponible')\r\n        );\r\n        const querySnapshot = await getDocs(q);\r\n        this.availableCartons = querySnapshot.docs.map(doc => ({\r\n          id: doc.id,\r\n          serial: doc.data().serial\r\n        }));\r\n        // Ordenar los cartones por serial para facilitar la selección de rangos\r\n        this.availableCartons.sort((a, b) => a.serial.localeCompare(b.serial));\r\n        console.log('Cartones disponibles:', this.availableCartons);\r\n      } catch (error) {\r\n        console.error('Error al cargar cartones disponibles:', error);\r\n        alert('Error al cargar cartones disponibles: ' + error.message);\r\n      }\r\n    },\r\n    async assignCartons() {\r\n      if (!this.selectedSeller || !this.fromCarton || !this.toCarton) return;\r\n\r\n      try {\r\n        console.log('Asignando cartones a vendedor:', this.selectedSeller, 'Desde:', this.fromCarton, 'Hasta:', this.toCarton);\r\n        const fromIndex = this.availableCartons.findIndex(carton => carton.id === this.fromCarton);\r\n        const toIndex = this.availableCartons.findIndex(carton => carton.id === this.toCarton);\r\n\r\n        if (fromIndex === -1 || toIndex === -1) {\r\n          throw new Error('Cartón inicial o final no encontrado');\r\n        }\r\n\r\n        const startIndex = Math.min(fromIndex, toIndex);\r\n        const endIndex = Math.max(fromIndex, toIndex);\r\n\r\n        const selectedCartons = this.availableCartons.slice(startIndex, endIndex + 1).map(carton => carton.id);\r\n        console.log('Cartones seleccionados en el rango:', selectedCartons);\r\n\r\n        const batch = [];\r\n        for (const cartonId of selectedCartons) {\r\n          const cartonRef = doc(db, 'cartones', cartonId);\r\n          batch.push(updateDoc(cartonRef, {\r\n            vendedorId: this.selectedSeller,\r\n            estado: 'asignado'\r\n          }));\r\n        }\r\n        await Promise.all(batch);\r\n        console.log('Cartones asignados exitosamente');\r\n        alert('Cartones asignados exitosamente');\r\n\r\n        this.fromCarton = '';\r\n        this.toCarton = '';\r\n        await this.loadAvailableCartons();\r\n        this.$emit('cartons-asignados'); // Emitir evento para actualizar en tiempo real\r\n      } catch (error) {\r\n        console.error('Error al asignar cartones:', error);\r\n        alert('Error al asignar cartones: ' + error.message);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Tailwind maneja los estilos */\r\n</style>\r\n```"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}