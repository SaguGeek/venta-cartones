{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelCheckbox as _vModelCheckbox, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"bg-white p-6 rounded-lg shadow-md mb-6\"\n};\nconst _hoisted_2 = {\n  class: \"space-y-4\"\n};\nconst _hoisted_3 = [\"value\"];\nconst _hoisted_4 = {\n  key: 0,\n  class: \"space-y-2 max-h-60 overflow-y-auto border rounded-md p-2\"\n};\nconst _hoisted_5 = [\"value\"];\nconst _hoisted_6 = {\n  key: 1,\n  class: \"text-gray-500\"\n};\nconst _hoisted_7 = [\"disabled\"];\nconst _hoisted_8 = {\n  key: 0,\n  class: \"text-yellow-600 mt-2\"\n};\nconst _hoisted_9 = {\n  key: 0,\n  class: \"text-red-600 mt-2\"\n};\nconst _hoisted_10 = {\n  key: 1,\n  class: \"text-green-600 mt-2\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[7] || (_cache[7] = _createElementVNode(\"h2\", {\n    class: \"text-2xl font-semibold text-gray-800 mb-4\"\n  }, \"Asignar Cartones por Lote\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", null, [_cache[5] || (_cache[5] = _createElementVNode(\"label\", {\n    class: \"block text-gray-600 mb-1\"\n  }, \"Seleccionar Vendedor\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedVendedorId = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $options.logSelection && $options.logSelection(...args)),\n    class: \"w-full p-2 border rounded-md\"\n  }, [_cache[4] || (_cache[4] = _createElementVNode(\"option\", {\n    value: \"\",\n    disabled: \"\"\n  }, \"Selecciona un vendedor\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.sellers, seller => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: seller.vendedorId,\n      value: seller.vendedorId\n    }, _toDisplayString(seller.nombre || seller.vendedorId), 9 /* TEXT, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $data.selectedVendedorId]])]), _createElementVNode(\"div\", null, [_cache[6] || (_cache[6] = _createElementVNode(\"label\", {\n    class: \"block text-gray-600 mb-1\"\n  }, \"Seleccionar Cartones\", -1 /* HOISTED */)), $data.availableCartons.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.availableCartons, carton => {\n    return _openBlock(), _createElementBlock(\"label\", {\n      key: carton.id,\n      class: \"flex items-center space-x-2\"\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.selectedCartons = $event),\n      value: carton.id\n    }, null, 8 /* PROPS */, _hoisted_5), [[_vModelCheckbox, $data.selectedCartons]]), _createElementVNode(\"span\", null, _toDisplayString(carton.serial), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_6, \"No hay cartones disponibles.\"))]), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.assignSelectedCartons && $options.assignSelectedCartons(...args)),\n    class: \"bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 transition\",\n    disabled: !$data.selectedVendedorId || $data.selectedCartons.length === 0\n  }, \" Asignar Seleccionados \", 8 /* PROPS */, _hoisted_7), !$data.selectedVendedorId || $data.selectedCartons.length === 0 ? (_openBlock(), _createElementBlock(\"p\", _hoisted_8, \"Por favor, selecciona un vendedor y al menos un cart贸n.\")) : _createCommentVNode(\"v-if\", true)]), $data.errorMessage ? (_openBlock(), _createElementBlock(\"p\", _hoisted_9, _toDisplayString($data.errorMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), $data.successMessage ? (_openBlock(), _createElementBlock(\"p\", _hoisted_10, _toDisplayString($data.successMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_cache","$event","$data","selectedVendedorId","onChange","args","$options","logSelection","value","disabled","_Fragment","_renderList","sellers","seller","vendedorId","nombre","_hoisted_3","availableCartons","length","_hoisted_4","carton","id","type","selectedCartons","_hoisted_5","_toDisplayString","serial","_hoisted_6","onClick","assignSelectedCartons","_hoisted_7","_hoisted_8","_createCommentVNode","errorMessage","_hoisted_9","successMessage","_hoisted_10"],"sources":["D:\\Lotweb\\venta-cartones\\src\\components\\AssignCartons.vue"],"sourcesContent":["```vue\r\n   <template>\r\n     <div class=\"bg-white p-6 rounded-lg shadow-md mb-6\">\r\n       <h2 class=\"text-2xl font-semibold text-gray-800 mb-4\">Asignar Cartones por Lote</h2>\r\n       <div class=\"space-y-4\">\r\n         <div>\r\n           <label class=\"block text-gray-600 mb-1\">Seleccionar Vendedor</label>\r\n           <select\r\n             v-model=\"selectedVendedorId\"\r\n             @change=\"logSelection\"\r\n             class=\"w-full p-2 border rounded-md\"\r\n           >\r\n             <option value=\"\" disabled>Selecciona un vendedor</option>\r\n             <option v-for=\"seller in sellers\" :key=\"seller.vendedorId\" :value=\"seller.vendedorId\">\r\n               {{ seller.nombre || seller.vendedorId }}\r\n             </option>\r\n           </select>\r\n         </div>\r\n         <div>\r\n           <label class=\"block text-gray-600 mb-1\">Seleccionar Cartones</label>\r\n           <div v-if=\"availableCartons.length > 0\" class=\"space-y-2 max-h-60 overflow-y-auto border rounded-md p-2\">\r\n             <label v-for=\"carton in availableCartons\" :key=\"carton.id\" class=\"flex items-center space-x-2\">\r\n               <input type=\"checkbox\" v-model=\"selectedCartons\" :value=\"carton.id\">\r\n               <span>{{ carton.serial }}</span>\r\n             </label>\r\n           </div>\r\n           <p v-else class=\"text-gray-500\">No hay cartones disponibles.</p>\r\n         </div>\r\n         <button\r\n           @click=\"assignSelectedCartons\"\r\n           class=\"bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 transition\"\r\n           :disabled=\"!selectedVendedorId || selectedCartons.length === 0\"\r\n         >\r\n           Asignar Seleccionados\r\n         </button>\r\n         <p v-if=\"!selectedVendedorId || selectedCartons.length === 0\" class=\"text-yellow-600 mt-2\">Por favor, selecciona un vendedor y al menos un cart贸n.</p>\r\n       </div>\r\n       <p v-if=\"errorMessage\" class=\"text-red-600 mt-2\">{{ errorMessage }}</p>\r\n       <p v-if=\"successMessage\" class=\"text-green-600 mt-2\">{{ successMessage }}</p>\r\n     </div>\r\n   </template>\r\n\r\n   <script>\r\n   import { db } from '../firebase';\r\n   import { collection, query, where, getDocs, doc, getDoc, updateDoc } from 'firebase/firestore';\r\n\r\n   export default {\r\n     data() {\r\n       return {\r\n         sellers: [],\r\n         availableCartons: [],\r\n         selectedVendedorId: '',\r\n         selectedCartons: [],\r\n         errorMessage: '',\r\n         successMessage: ''\r\n       };\r\n     },\r\n     async mounted() {\r\n       console.log('Componente AssignCartons montado');\r\n       await this.loadSellers();\r\n       await this.loadAvailableCartons();\r\n     },\r\n     methods: {\r\n       logSelection() {\r\n         console.log('Selecci贸n actualizada:', {\r\n           selectedVendedorId: this.selectedVendedorId,\r\n           selectedCartons: this.selectedCartons\r\n         });\r\n       },\r\n       async loadSellers() {\r\n         try {\r\n           console.log('Iniciando carga de vendedores...');\r\n           const querySnapshot = await getDocs(collection(db, 'vendedores'));\r\n           this.sellers = querySnapshot.docs.map(doc => doc.data());\r\n           console.log('Vendedores cargados:', this.sellers);\r\n         } catch (error) {\r\n           console.error('Error al cargar los vendedores:', error);\r\n           this.errorMessage = 'Error al cargar los vendedores: ' + error.message;\r\n         }\r\n       },\r\n       async loadAvailableCartons() {\r\n         try {\r\n           console.log('Cargando cartones disponibles...');\r\n           const q = query(\r\n             collection(db, 'cartones'),\r\n             where('estado', '==', 'disponible'),\r\n             where('vendedorId', '==', null)\r\n           );\r\n           const querySnapshot = await getDocs(q);\r\n           this.availableCartons = querySnapshot.docs.map(doc => ({\r\n             id: doc.id,\r\n             serial: doc.data().serial\r\n           })).sort((a, b) => a.serial.localeCompare(b.serial));\r\n           console.log('Cartones disponibles cargados (ordenados):', this.availableCartons);\r\n         } catch (error) {\r\n           console.error('Error al cargar los cartones disponibles:', error);\r\n           this.errorMessage = 'Error al cargar los cartones disponibles: ' + error.message;\r\n         }\r\n       },\r\n       async assignSelectedCartons() {\r\n         console.log('Bot贸n \"Asignar Seleccionados\" clicado');\r\n         console.log('Valores seleccionados:', {\r\n           selectedVendedorId: this.selectedVendedorId,\r\n           selectedCartons: this.selectedCartons\r\n         });\r\n\r\n         this.errorMessage = '';\r\n         this.successMessage = '';\r\n\r\n         if (!this.selectedVendedorId || this.selectedCartons.length === 0) {\r\n           console.log('Campos incompletos o sin cartones seleccionados');\r\n           this.errorMessage = 'Por favor, selecciona un vendedor y al menos un cart贸n.';\r\n           return;\r\n         }\r\n\r\n         try {\r\n           console.log('Iniciando proceso de asignaci贸n...');\r\n           const cartonesToAssign = this.availableCartons.filter(carton => this.selectedCartons.includes(carton.id));\r\n           console.log('Cartones a asignar:', cartonesToAssign);\r\n\r\n           if (cartonesToAssign.length === 0) {\r\n             console.log('No hay cartones seleccionados para asignar');\r\n             this.errorMessage = 'No hay cartones seleccionados para asignar.';\r\n             return;\r\n           }\r\n\r\n           // Verificar si alg煤n cart贸n ya est谩 asignado\r\n           let alreadyAssignedSerials = [];\r\n           for (const carton of cartonesToAssign) {\r\n             console.log(`Verificando cart贸n ${carton.serial}...`);\r\n             const cartonRef = doc(db, 'cartones', carton.id);\r\n             const cartonDoc = await getDoc(cartonRef);\r\n             if (cartonDoc.exists() && cartonDoc.data().vendedorId && cartonDoc.data().vendedorId !== this.selectedVendedorId) {\r\n               alreadyAssignedSerials.push(carton.serial);\r\n             }\r\n           }\r\n\r\n           if (alreadyAssignedSerials.length > 0) {\r\n             console.log('Cartones ya asignados detectados:', alreadyAssignedSerials);\r\n             this.errorMessage = `Los siguientes cartones ya est谩n asignados a otro vendedor: ${alreadyAssignedSerials.join(', ')}`;\r\n             return;\r\n           }\r\n\r\n           // Asignar los cartones\r\n           console.log('Procediendo a asignar cartones...');\r\n           for (const carton of cartonesToAssign) {\r\n             console.log(`Asignando cart贸n ${carton.serial} a ${this.selectedVendedorId}`);\r\n             await updateDoc(doc(db, 'cartones', carton.id), {\r\n               vendedorId: this.selectedVendedorId\r\n             });\r\n             console.log(`Cart贸n ${carton.serial} asignado exitosamente`);\r\n           }\r\n\r\n           console.log('Asignaci贸n completada para', cartonesToAssign.length, 'cartones');\r\n           this.successMessage = 'Cartones asignados';\r\n           this.selectedCartons = [];\r\n           this.selectedVendedorId = '';\r\n           // Recargar los cartones disponibles\r\n           await this.loadAvailableCartons();\r\n         } catch (error) {\r\n           console.error('Error al asignar cartones:', error);\r\n           this.errorMessage = 'Error al asignar cartones: ' + error.message;\r\n         }\r\n       }\r\n     }\r\n   };\r\n   </script>\r\n\r\n   <style scoped>\r\n   /* Tailwind maneja los estilos */\r\n   </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}