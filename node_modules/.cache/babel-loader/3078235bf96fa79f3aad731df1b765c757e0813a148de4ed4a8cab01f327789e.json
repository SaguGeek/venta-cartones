{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nexport default {\n  data() {\n    return {\n      selectedFiles: [],\n      uploadedUrls: [],\n      duplicates: [],\n      uploadErrors: [],\n      uploading: false,\n      uploadedCount: 0,\n      totalFiles: 0,\n      cloudinaryUrl: 'https://api.cloudinary.com/v1_1/dardyvsja/image/upload',\n      uploadPreset: 'cartones_upload'\n    };\n  },\n  methods: {\n    onFileChange(event) {\n      this.selectedFiles = Array.from(event.target.files);\n      this.uploadedUrls = [];\n      this.duplicates = [];\n      this.uploadErrors = [];\n    },\n    async checkAndUploadImages() {\n      if (this.selectedFiles.length === 0) {\n        alert('Por favor, selecciona al menos una imagen.');\n        return;\n      }\n      this.uploading = true;\n      this.totalFiles = this.selectedFiles.length;\n      this.uploadedCount = 0;\n      this.uploadErrors = [];\n      const serials = this.selectedFiles.map(file => file.name.split('.')[0]);\n      this.$emit('check-duplicates', {\n        serials,\n        files: this.selectedFiles\n      }, async nonDuplicates => {\n        if (nonDuplicates.length === 0) {\n          alert('Todos los archivos seleccionados ya existen.');\n          this.uploading = false;\n          return;\n        }\n        this.duplicates = this.selectedFiles.filter(file => !nonDuplicates.some(nd => nd.name === file.name)).map(file => file.name);\n\n        // Procesar en lotes de 5\n        const batchSize = 5;\n        for (let i = 0; i < nonDuplicates.length; i += batchSize) {\n          const batch = nonDuplicates.slice(i, i + batchSize);\n          await this.processBatch(batch);\n        }\n        if (this.uploadedUrls.length > 0) {\n          this.$emit('images-uploaded', this.uploadedUrls.map(url => {\n            const serial = this.selectedFiles.find(file => file.name.includes(url.split('/').pop().split('.')[0]))?.name.split('.')[0];\n            return {\n              serial,\n              imageUrl: url\n            };\n          }));\n          alert(`${this.uploadedUrls.length} de ${nonDuplicates.length} imágenes subidas correctamente.`);\n        } else {\n          alert('No se subieron imágenes correctamente.');\n        }\n        this.uploading = false;\n      });\n    },\n    async processBatch(batch) {\n      const uploadPromises = batch.map(async file => {\n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('upload_preset', this.uploadPreset);\n        try {\n          const response = await fetch(this.cloudinaryUrl, {\n            method: 'POST',\n            body: formData\n          });\n          const data = await response.json();\n          if (data.secure_url) {\n            this.uploadedUrls.push(data.secure_url);\n            this.uploadedCount++;\n          } else {\n            throw new Error(`Error al subir ${file.name}: ${JSON.stringify(data)}`);\n          }\n        } catch (error) {\n          console.error(`Error al subir ${file.name}:`, error);\n          this.uploadErrors.push(`Error con ${file.name}: ${error.message}`);\n        }\n      });\n      await Promise.all(uploadPromises);\n    }\n  }\n};","map":{"version":3,"names":["data","selectedFiles","uploadedUrls","duplicates","uploadErrors","uploading","uploadedCount","totalFiles","cloudinaryUrl","uploadPreset","methods","onFileChange","event","Array","from","target","files","checkAndUploadImages","length","alert","serials","map","file","name","split","$emit","nonDuplicates","filter","some","nd","batchSize","i","batch","slice","processBatch","url","serial","find","includes","pop","imageUrl","uploadPromises","formData","FormData","append","response","fetch","method","body","json","secure_url","push","Error","JSON","stringify","error","console","message","Promise","all"],"sources":["D:\\Lotweb\\venta-cartones\\src\\components\\UploadCarton.vue"],"sourcesContent":["```vue\r\n<template>\r\n  <div class=\"bg-white p-6 rounded-lg shadow-md mb-6\">\r\n    <h2 class=\"text-xl font-semibold text-gray-800 mb-4\">Subir Cartones</h2>\r\n    <div class=\"flex flex-col items-center\">\r\n      <input\r\n        type=\"file\"\r\n        @change=\"onFileChange\"\r\n        accept=\"image/*\"\r\n        multiple\r\n        class=\"mb-4 p-2 border rounded-md w-full max-w-md\"\r\n      />\r\n      <button\r\n        @click=\"checkAndUploadImages\"\r\n        class=\"bg-indigo-600 text-white px-6 py-2 rounded-md hover:bg-indigo-700 transition flex items-center justify-center\"\r\n        :disabled=\"uploading || !selectedFiles.length\"\r\n      >\r\n        <span v-if=\"uploading\" class=\"flex items-center\">\r\n          <svg class=\"animate-spin h-5 w-5 mr-2 text-white\" viewBox=\"0 0 24 24\">\r\n            <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\r\n            <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n          </svg>\r\n          Subiendo... ({{ uploadedCount }}/{{ totalFiles }})\r\n        </span>\r\n        <span v-else>Subir Imágenes</span>\r\n      </button>\r\n    </div>\r\n    <div v-if=\"uploadedUrls.length > 0\" class=\"mt-4\">\r\n      <h3 class=\"text-lg font-medium text-gray-700\">Imágenes subidas:</h3>\r\n      <ul class=\"mt-2\">\r\n        <li v-for=\"(url, index) in uploadedUrls\" :key=\"index\" class=\"text-blue-600\">\r\n          <a :href=\"url\" target=\"_blank\" class=\"hover:underline\">{{ url }}</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <div v-if=\"duplicates.length > 0\" class=\"mt-4\">\r\n      <h3 class=\"text-lg font-medium text-red-600\">Archivos ya existentes:</h3>\r\n      <ul class=\"mt-2\">\r\n        <li v-for=\"duplicate in duplicates\" :key=\"duplicate\" class=\"text-red-600\">{{ duplicate }}</li>\r\n      </ul>\r\n    </div>\r\n    <div v-if=\"uploadErrors.length > 0\" class=\"mt-4\">\r\n      <h3 class=\"text-lg font-medium text-red-600\">Errores durante la subida:</h3>\r\n      <ul class=\"mt-2\">\r\n        <li v-for=\"error in uploadErrors\" :key=\"error\" class=\"text-red-600\">{{ error }}</li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      selectedFiles: [],\r\n      uploadedUrls: [],\r\n      duplicates: [],\r\n      uploadErrors: [],\r\n      uploading: false,\r\n      uploadedCount: 0,\r\n      totalFiles: 0,\r\n      cloudinaryUrl: 'https://api.cloudinary.com/v1_1/dardyvsja/image/upload',\r\n      uploadPreset: 'cartones_upload'\r\n    };\r\n  },\r\n  methods: {\r\n    onFileChange(event) {\r\n      this.selectedFiles = Array.from(event.target.files);\r\n      this.uploadedUrls = [];\r\n      this.duplicates = [];\r\n      this.uploadErrors = [];\r\n    },\r\n    async checkAndUploadImages() {\r\n      if (this.selectedFiles.length === 0) {\r\n        alert('Por favor, selecciona al menos una imagen.');\r\n        return;\r\n      }\r\n\r\n      this.uploading = true;\r\n      this.totalFiles = this.selectedFiles.length;\r\n      this.uploadedCount = 0;\r\n      this.uploadErrors = [];\r\n\r\n      const serials = this.selectedFiles.map(file => file.name.split('.')[0]);\r\n      this.$emit('check-duplicates', { serials, files: this.selectedFiles }, async (nonDuplicates) => {\r\n        if (nonDuplicates.length === 0) {\r\n          alert('Todos los archivos seleccionados ya existen.');\r\n          this.uploading = false;\r\n          return;\r\n        }\r\n\r\n        this.duplicates = this.selectedFiles\r\n          .filter(file => !nonDuplicates.some(nd => nd.name === file.name))\r\n          .map(file => file.name);\r\n\r\n        // Procesar en lotes de 5\r\n        const batchSize = 5;\r\n        for (let i = 0; i < nonDuplicates.length; i += batchSize) {\r\n          const batch = nonDuplicates.slice(i, i + batchSize);\r\n          await this.processBatch(batch);\r\n        }\r\n\r\n        if (this.uploadedUrls.length > 0) {\r\n          this.$emit('images-uploaded', this.uploadedUrls.map(url => {\r\n            const serial = this.selectedFiles.find(file => file.name.includes(url.split('/').pop().split('.')[0]))?.name.split('.')[0];\r\n            return { serial, imageUrl: url };\r\n          }));\r\n          alert(`${this.uploadedUrls.length} de ${nonDuplicates.length} imágenes subidas correctamente.`);\r\n        } else {\r\n          alert('No se subieron imágenes correctamente.');\r\n        }\r\n\r\n        this.uploading = false;\r\n      });\r\n    },\r\n    async processBatch(batch) {\r\n      const uploadPromises = batch.map(async (file) => {\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        formData.append('upload_preset', this.uploadPreset);\r\n\r\n        try {\r\n          const response = await fetch(this.cloudinaryUrl, {\r\n            method: 'POST',\r\n            body: formData\r\n          });\r\n          const data = await response.json();\r\n          if (data.secure_url) {\r\n            this.uploadedUrls.push(data.secure_url);\r\n            this.uploadedCount++;\r\n          } else {\r\n            throw new Error(`Error al subir ${file.name}: ${JSON.stringify(data)}`);\r\n          }\r\n        } catch (error) {\r\n          console.error(`Error al subir ${file.name}:`, error);\r\n          this.uploadErrors.push(`Error con ${file.name}: ${error.message}`);\r\n        }\r\n      });\r\n\r\n      await Promise.all(uploadPromises);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Tailwind maneja los estilos */\r\n</style>\r\n```"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}