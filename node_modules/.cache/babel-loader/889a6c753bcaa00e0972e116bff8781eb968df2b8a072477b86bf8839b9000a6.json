{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nexport default {\n  data() {\n    return {\n      selectedFiles: [],\n      uploadedUrls: [],\n      duplicates: [],\n      uploadErrors: [],\n      uploading: false,\n      uploadedCount: 0,\n      totalFiles: 0,\n      progress: 0,\n      showProgressModal: false,\n      cloudinaryUrl: 'https://api.cloudinary.com/v1_1/dardyvsja/image/upload',\n      uploadPreset: 'cartones_upload'\n    };\n  },\n  methods: {\n    onFileChange(event) {\n      this.selectedFiles = Array.from(event.target.files);\n      this.uploadedUrls = [];\n      this.duplicates = [];\n      this.uploadErrors = [];\n      this.showProgressModal = false;\n    },\n    async checkAndUploadImages() {\n      if (this.selectedFiles.length === 0) {\n        alert('Por favor, selecciona al menos una imagen.');\n        return;\n      }\n      this.uploading = true;\n      this.totalFiles = this.selectedFiles.length;\n      this.uploadedCount = 0;\n      this.progress = 0;\n      this.showProgressModal = true;\n      const serials = this.selectedFiles.map(file => file.name.split('.')[0]);\n      const self = this; // Guardamos el contexto de 'this'\n\n      this.$emit('check-duplicates', {\n        serials,\n        files: this.selectedFiles\n      }, async nonDuplicates => {\n        try {\n          if (!Array.isArray(nonDuplicates)) {\n            throw new Error('La respuesta de duplicados no es válida.');\n          }\n          if (nonDuplicates.length === 0) {\n            alert('Todos los archivos seleccionados ya existen.');\n            self.uploading = false;\n            self.showProgressModal = false;\n            return;\n          }\n          self.duplicates = self.selectedFiles.filter(file => !nonDuplicates.some(nd => nd.name === file.name)).map(file => file.name);\n          const uploadPromises = nonDuplicates.map(async file => {\n            const serial = file.name.split('.')[0];\n            const formData = new FormData();\n            formData.append('file', file);\n            formData.append('upload_preset', self.uploadPreset);\n            try {\n              const response = await fetch(self.cloudinaryUrl, {\n                method: 'POST',\n                body: formData\n              });\n              const data = await response.json();\n              if (data.secure_url) {\n                self.uploadedUrls.push(data.secure_url);\n                self.uploadedCount++;\n                self.progress = Math.round(self.uploadedCount / self.totalFiles * 100);\n                return {\n                  serial,\n                  imageUrl: data.secure_url\n                };\n              } else {\n                throw new Error(`Error al subir ${file.name}: ${JSON.stringify(data)}`);\n              }\n            } catch (error) {\n              console.error(`Error al subir ${file.name}:`, error);\n              return null;\n            }\n          });\n          const results = await Promise.all(uploadPromises);\n          const validResults = results.filter(result => result !== null);\n          if (validResults.length > 0) {\n            self.$emit('images-uploaded', validResults);\n            alert(`${validResults.length} de ${nonDuplicates.length} imágenes subidas correctamente.`);\n          } else {\n            alert('No se subieron imágenes correctamente.');\n          }\n        } catch (error) {\n          console.error('Error en el proceso de subida:', error);\n          alert('Error en el proceso de subida: ' + error.message);\n        } finally {\n          self.uploading = false;\n          self.progress = 100;\n          setTimeout(() => {\n            self.showProgressModal = false;\n          }, 1000); // Mantener el modal visible por 1 segundo al terminar\n        }\n      });\n    },\n    closeProgressModal() {\n      if (!this.uploading) {\n        this.showProgressModal = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","selectedFiles","uploadedUrls","duplicates","uploadErrors","uploading","uploadedCount","totalFiles","progress","showProgressModal","cloudinaryUrl","uploadPreset","methods","onFileChange","event","Array","from","target","files","checkAndUploadImages","length","alert","serials","map","file","name","split","self","$emit","nonDuplicates","isArray","Error","filter","some","nd","uploadPromises","serial","formData","FormData","append","response","fetch","method","body","json","secure_url","push","Math","round","imageUrl","JSON","stringify","error","console","results","Promise","all","validResults","result","message","setTimeout","closeProgressModal"],"sources":["D:\\Lotweb\\venta-cartones\\src\\components\\UploadCarton.vue"],"sourcesContent":["<template>\r\n  <div class=\"bg-white p-6 rounded-lg shadow-md mb-6\">\r\n    <h2 class=\"text-2xl font-semibold text-gray-800 mb-4\">Subir Cartones</h2>\r\n    <div class=\"flex flex-col items-center\">\r\n      <input\r\n        type=\"file\"\r\n        @change=\"onFileChange\"\r\n        accept=\"image/*\"\r\n        multiple\r\n        class=\"mb-4 p-2 border rounded-md w-full max-w-md\"\r\n      />\r\n      <button\r\n        @click=\"checkAndUploadImages\"\r\n        class=\"bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 transition flex items-center justify-center\"\r\n        :disabled=\"uploading || !selectedFiles.length\"\r\n      >\r\n        <span v-if=\"uploading\" class=\"flex items-center\">\r\n          <svg class=\"animate-spin h-5 w-5 mr-2 text-white\" viewBox=\"0 0 24 24\">\r\n            <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\r\n            <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n          </svg>\r\n          Subiendo...\r\n        </span>\r\n        <span v-else>Subir Imágenes</span>\r\n      </button>\r\n    </div>\r\n    <div v-if=\"duplicates.length > 0\" class=\"mt-4\">\r\n      <h3 class=\"text-lg font-medium text-red-600\">Archivos ya existentes:</h3>\r\n      <ul class=\"mt-2\">\r\n        <li v-for=\"duplicate in duplicates\" :key=\"duplicate\" class=\"text-red-600\">{{ duplicate }}</li>\r\n      </ul>\r\n    </div>\r\n    <!-- Modal de Progreso -->\r\n    <div v-if=\"showProgressModal\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n      <div class=\"bg-white p-6 rounded-lg shadow-lg max-w-md w-full\">\r\n        <h3 class=\"text-xl font-semibold text-gray-800 mb-4\">Subiendo Imágenes</h3>\r\n        <div class=\"w-full bg-gray-200 rounded-full h-4 mb-2\">\r\n          <div\r\n            class=\"bg-blue-600 h-4 rounded-full transition-all duration-300\"\r\n            :style=\"{ width: progress + '%' }\"\r\n          ></div>\r\n        </div>\r\n        <p class=\"text-center text-gray-700\">{{ uploadedCount }} de {{ totalFiles }} subidas</p>\r\n        <button\r\n          @click=\"closeProgressModal\"\r\n          class=\"mt-4 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition\"\r\n          :disabled=\"uploading\"\r\n        >\r\n          Cerrar\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      selectedFiles: [],\r\n      uploadedUrls: [],\r\n      duplicates: [],\r\n      uploadErrors: [],\r\n      uploading: false,\r\n      uploadedCount: 0,\r\n      totalFiles: 0,\r\n      progress: 0,\r\n      showProgressModal: false,\r\n      cloudinaryUrl: 'https://api.cloudinary.com/v1_1/dardyvsja/image/upload',\r\n      uploadPreset: 'cartones_upload'\r\n    };\r\n  },\r\n  methods: {\r\n    onFileChange(event) {\r\n      this.selectedFiles = Array.from(event.target.files);\r\n      this.uploadedUrls = [];\r\n      this.duplicates = [];\r\n      this.uploadErrors = [];\r\n      this.showProgressModal = false;\r\n    },\r\n    async checkAndUploadImages() {\r\n      if (this.selectedFiles.length === 0) {\r\n        alert('Por favor, selecciona al menos una imagen.');\r\n        return;\r\n      }\r\n\r\n      this.uploading = true;\r\n      this.totalFiles = this.selectedFiles.length;\r\n      this.uploadedCount = 0;\r\n      this.progress = 0;\r\n      this.showProgressModal = true;\r\n\r\n      const serials = this.selectedFiles.map(file => file.name.split('.')[0]);\r\n      const self = this; // Guardamos el contexto de 'this'\r\n\r\n      this.$emit('check-duplicates', { serials, files: this.selectedFiles }, async (nonDuplicates) => {\r\n        try {\r\n          if (!Array.isArray(nonDuplicates)) {\r\n            throw new Error('La respuesta de duplicados no es válida.');\r\n          }\r\n\r\n          if (nonDuplicates.length === 0) {\r\n            alert('Todos los archivos seleccionados ya existen.');\r\n            self.uploading = false;\r\n            self.showProgressModal = false;\r\n            return;\r\n          }\r\n\r\n          self.duplicates = self.selectedFiles\r\n            .filter(file => !nonDuplicates.some(nd => nd.name === file.name))\r\n            .map(file => file.name);\r\n\r\n          const uploadPromises = nonDuplicates.map(async (file) => {\r\n            const serial = file.name.split('.')[0];\r\n            const formData = new FormData();\r\n            formData.append('file', file);\r\n            formData.append('upload_preset', self.uploadPreset);\r\n\r\n            try {\r\n              const response = await fetch(self.cloudinaryUrl, {\r\n                method: 'POST',\r\n                body: formData\r\n              });\r\n              const data = await response.json();\r\n              if (data.secure_url) {\r\n                self.uploadedUrls.push(data.secure_url);\r\n                self.uploadedCount++;\r\n                self.progress = Math.round((self.uploadedCount / self.totalFiles) * 100);\r\n                return { serial, imageUrl: data.secure_url };\r\n              } else {\r\n                throw new Error(`Error al subir ${file.name}: ${JSON.stringify(data)}`);\r\n              }\r\n            } catch (error) {\r\n              console.error(`Error al subir ${file.name}:`, error);\r\n              return null;\r\n            }\r\n          });\r\n\r\n          const results = await Promise.all(uploadPromises);\r\n          const validResults = results.filter(result => result !== null);\r\n          if (validResults.length > 0) {\r\n            self.$emit('images-uploaded', validResults);\r\n            alert(`${validResults.length} de ${nonDuplicates.length} imágenes subidas correctamente.`);\r\n          } else {\r\n            alert('No se subieron imágenes correctamente.');\r\n          }\r\n        } catch (error) {\r\n          console.error('Error en el proceso de subida:', error);\r\n          alert('Error en el proceso de subida: ' + error.message);\r\n        } finally {\r\n          self.uploading = false;\r\n          self.progress = 100;\r\n          setTimeout(() => {\r\n            self.showProgressModal = false;\r\n          }, 1000); // Mantener el modal visible por 1 segundo al terminar\r\n        }\r\n      });\r\n    },\r\n    closeProgressModal() {\r\n      if (!this.uploading) {\r\n        this.showProgressModal = false;\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Tailwind maneja los estilos */\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}