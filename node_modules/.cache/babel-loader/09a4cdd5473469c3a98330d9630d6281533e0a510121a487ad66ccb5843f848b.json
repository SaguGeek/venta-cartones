{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { db } from '../firebase';\nimport { collection, query, where, getDocs } from 'firebase/firestore';\nexport default {\n  data() {\n    return {\n      sellers: [],\n      selectedSeller: null,\n      assignedCartons: [],\n      soldCartons: [],\n      availableCartons: []\n    };\n  },\n  async mounted() {\n    await this.loadSellers();\n  },\n  methods: {\n    async loadSellers() {\n      try {\n        console.log('Cargando vendedores...');\n        const querySnapshot = await getDocs(collection(db, 'vendedores'));\n        this.sellers = querySnapshot.docs.map(doc => doc.data());\n        console.log('Vendedores cargados:', this.sellers);\n      } catch (error) {\n        console.error('Error al cargar los vendedores:', error);\n      }\n    },\n    async showSellerDetails(seller) {\n      this.selectedSeller = seller;\n      await this.loadSellerCartons(seller.vendedorId);\n    },\n    async loadSellerCartons(vendedorId) {\n      try {\n        console.log(`Cargando cartones para el vendedor ${vendedorId}...`);\n        // Cartones asignados (vendedorId coincide y estado no es \"vendido\")\n        const assignedQuery = query(collection(db, 'cartones'), where('vendedorId', '==', vendedorId), where('estado', '!=', 'vendido'));\n        const assignedSnapshot = await getDocs(assignedQuery);\n        this.assignedCartons = assignedSnapshot.docs.map(doc => ({\n          id: doc.id,\n          serial: doc.data().serial\n        }));\n        console.log('Cartones asignados:', this.assignedCartons);\n\n        // Cartones vendidos (vendedorId coincide y estado es \"vendido\")\n        const soldQuery = query(collection(db, 'cartones'), where('vendedorId', '==', vendedorId), where('estado', '==', 'vendido'));\n        const soldSnapshot = await getDocs(soldQuery);\n        this.soldCartons = soldSnapshot.docs.map(doc => ({\n          id: doc.id,\n          serial: doc.data().serial\n        }));\n        console.log('Cartones vendidos:', this.soldCartons);\n\n        // Cartones disponibles (vendedorId es null y estado es \"disponible\")\n        const availableQuery = query(collection(db, 'cartones'), where('vendedorId', '==', null), where('estado', '==', 'disponible'));\n        const availableSnapshot = await getDocs(availableQuery);\n        this.availableCartons = availableSnapshot.docs.map(doc => ({\n          id: doc.id,\n          serial: doc.data().serial\n        }));\n        console.log('Cartones disponibles:', this.availableCartons);\n      } catch (error) {\n        console.error('Error al cargar los cartones del vendedor:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["db","collection","query","where","getDocs","data","sellers","selectedSeller","assignedCartons","soldCartons","availableCartons","mounted","loadSellers","methods","console","log","querySnapshot","docs","map","doc","error","showSellerDetails","seller","loadSellerCartons","vendedorId","assignedQuery","assignedSnapshot","id","serial","soldQuery","soldSnapshot","availableQuery","availableSnapshot"],"sources":["D:\\Lotweb\\venta-cartones\\src\\components\\SellerList.vue"],"sourcesContent":["```vue\r\n   <template>\r\n     <div class=\"bg-white p-6 rounded-lg shadow-md\">\r\n       <h2 class=\"text-2xl font-semibold text-gray-800 mb-4\">Lista de Vendedores</h2>\r\n       <div class=\"space-y-4\">\r\n         <div v-for=\"seller in sellers\" :key=\"seller.vendedorId\" class=\"border p-4 rounded-md flex justify-between items-center\">\r\n           <div>\r\n             <p class=\"text-lg font-medium text-gray-700\">{{ seller.nombre || seller.vendedorId }}</p>\r\n             <p class=\"text-sm text-gray-500\">Saldo Generado: ${{ seller.saldoGenerado || 0 }}</p>\r\n           </div>\r\n           <button\r\n             @click=\"showSellerDetails(seller)\"\r\n             class=\"bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition\"\r\n           >\r\n             Ver Detalles\r\n           </button>\r\n         </div>\r\n       </div>\r\n\r\n       <!-- Modal para mostrar detalles del vendedor -->\r\n       <div v-if=\"selectedSeller\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center\">\r\n         <div class=\"bg-white p-6 rounded-lg shadow-lg max-w-md w-full\">\r\n           <h3 class=\"text-xl font-semibold text-gray-800 mb-4\">{{ selectedSeller.nombre || selectedSeller.vendedorId }}</h3>\r\n           <div class=\"space-y-2\">\r\n             <p><strong>Cartones Asignados:</strong> {{ assignedCartons.length }}</p>\r\n             <p v-if=\"assignedCartons.length === 0\">No hay cartones asignados.</p>\r\n             <ul v-else class=\"list-disc pl-5\">\r\n               <li v-for=\"carton in assignedCartons\" :key=\"carton.id\">{{ carton.serial }}</li>\r\n             </ul>\r\n             <p><strong>Cartones Vendidos:</strong> {{ soldCartons.length }}</p>\r\n             <p><strong>Cartones Disponibles:</strong> {{ availableCartons.length }}</p>\r\n             <p><strong>Saldo Generado:</strong> ${{ selectedSeller.saldoGenerado || 0 }}</p>\r\n           </div>\r\n           <button\r\n             @click=\"selectedSeller = null\"\r\n             class=\"bg-blue-600 text-white px-4 py-2 rounded-md mt-4 hover:bg-blue-700 transition\"\r\n           >\r\n             Cerrar\r\n           </button>\r\n         </div>\r\n       </div>\r\n     </div>\r\n   </template>\r\n\r\n   <script>\r\n   import { db } from '../firebase';\r\n   import { collection, query, where, getDocs } from 'firebase/firestore';\r\n\r\n   export default {\r\n     data() {\r\n       return {\r\n         sellers: [],\r\n         selectedSeller: null,\r\n         assignedCartons: [],\r\n         soldCartons: [],\r\n         availableCartons: []\r\n       };\r\n     },\r\n     async mounted() {\r\n       await this.loadSellers();\r\n     },\r\n     methods: {\r\n       async loadSellers() {\r\n         try {\r\n           console.log('Cargando vendedores...');\r\n           const querySnapshot = await getDocs(collection(db, 'vendedores'));\r\n           this.sellers = querySnapshot.docs.map(doc => doc.data());\r\n           console.log('Vendedores cargados:', this.sellers);\r\n         } catch (error) {\r\n           console.error('Error al cargar los vendedores:', error);\r\n         }\r\n       },\r\n       async showSellerDetails(seller) {\r\n         this.selectedSeller = seller;\r\n         await this.loadSellerCartons(seller.vendedorId);\r\n       },\r\n       async loadSellerCartons(vendedorId) {\r\n         try {\r\n           console.log(`Cargando cartones para el vendedor ${vendedorId}...`);\r\n           // Cartones asignados (vendedorId coincide y estado no es \"vendido\")\r\n           const assignedQuery = query(\r\n             collection(db, 'cartones'),\r\n             where('vendedorId', '==', vendedorId),\r\n             where('estado', '!=', 'vendido')\r\n           );\r\n           const assignedSnapshot = await getDocs(assignedQuery);\r\n           this.assignedCartons = assignedSnapshot.docs.map(doc => ({\r\n             id: doc.id,\r\n             serial: doc.data().serial\r\n           }));\r\n           console.log('Cartones asignados:', this.assignedCartons);\r\n\r\n           // Cartones vendidos (vendedorId coincide y estado es \"vendido\")\r\n           const soldQuery = query(\r\n             collection(db, 'cartones'),\r\n             where('vendedorId', '==', vendedorId),\r\n             where('estado', '==', 'vendido')\r\n           );\r\n           const soldSnapshot = await getDocs(soldQuery);\r\n           this.soldCartons = soldSnapshot.docs.map(doc => ({\r\n             id: doc.id,\r\n             serial: doc.data().serial\r\n           }));\r\n           console.log('Cartones vendidos:', this.soldCartons);\r\n\r\n           // Cartones disponibles (vendedorId es null y estado es \"disponible\")\r\n           const availableQuery = query(\r\n             collection(db, 'cartones'),\r\n             where('vendedorId', '==', null),\r\n             where('estado', '==', 'disponible')\r\n           );\r\n           const availableSnapshot = await getDocs(availableQuery);\r\n           this.availableCartons = availableSnapshot.docs.map(doc => ({\r\n             id: doc.id,\r\n             serial: doc.data().serial\r\n           }));\r\n           console.log('Cartones disponibles:', this.availableCartons);\r\n         } catch (error) {\r\n           console.error('Error al cargar los cartones del vendedor:', error);\r\n         }\r\n       }\r\n     }\r\n   };\r\n   </script>\r\n\r\n   <style scoped>\r\n   /* Tailwind maneja los estilos */\r\n   </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}