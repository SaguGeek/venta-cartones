{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"bg-white p-6 rounded-lg shadow-md\"\n};\nconst _hoisted_2 = {\n  class: \"space-y-4\"\n};\nconst _hoisted_3 = {\n  class: \"text-lg font-medium text-gray-700\"\n};\nconst _hoisted_4 = {\n  class: \"text-sm text-gray-500\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  key: 0,\n  class: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center\"\n};\nconst _hoisted_7 = {\n  class: \"bg-white p-6 rounded-lg shadow-lg max-w-md w-full\"\n};\nconst _hoisted_8 = {\n  class: \"text-xl font-semibold text-gray-800 mb-4\"\n};\nconst _hoisted_9 = {\n  class: \"space-y-2\"\n};\nconst _hoisted_10 = {\n  key: 0\n};\nconst _hoisted_11 = {\n  key: 1\n};\nconst _hoisted_12 = {\n  class: \"list-disc pl-5\"\n};\nconst _hoisted_13 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[5] || (_cache[5] = _createElementVNode(\"h2\", {\n    class: \"text-xl font-semibold text-gray-800 mb-4\"\n  }, \"Lista de Vendedores\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.sellers, seller => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: seller.id,\n      class: \"border p-4 rounded-md flex justify-between items-center\"\n    }, [_createElementVNode(\"div\", null, [_createElementVNode(\"p\", _hoisted_3, _toDisplayString(seller.nombre || seller.id || 'Sin nombre'), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_4, \"Saldo Generado: $\" + _toDisplayString(seller.saldoGenerado || 0), 1 /* TEXT */)]), _createElementVNode(\"button\", {\n      onClick: $event => $options.showSellerDetails(seller),\n      class: \"bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition\"\n    }, \" Ver Detalles \", 8 /* PROPS */, _hoisted_5)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Modal para mostrar detalles del vendedor \"), $data.selectedSeller ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"h3\", _hoisted_8, _toDisplayString($data.selectedSeller.nombre || $data.selectedSeller.id || 'Sin nombre'), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"p\", null, [_cache[1] || (_cache[1] = _createElementVNode(\"strong\", null, \"Cartones Asignados:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.assignedCartons.length), 1 /* TEXT */)]), $data.assignedCartons.length === 0 ? (_openBlock(), _createElementBlock(\"p\", _hoisted_10, \"No hay cartones asignados.\")) : (_openBlock(), _createElementBlock(\"div\", _hoisted_11, [_createElementVNode(\"ul\", _hoisted_12, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.assignedCartons, carton => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: carton.id\n    }, [_createTextVNode(_toDisplayString(carton.serial) + \" \", 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $options.sellCarton(carton.id),\n      class: \"ml-2 bg-green-500 text-white px-2 py-1 rounded-md hover:bg-green-600 transition\"\n    }, \" Vender \", 8 /* PROPS */, _hoisted_13)]);\n  }), 128 /* KEYED_FRAGMENT */))])])), _createElementVNode(\"p\", null, [_cache[2] || (_cache[2] = _createElementVNode(\"strong\", null, \"Cartones Vendidos:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.soldCartons.length), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"strong\", null, \"Cartones Disponibles (Global):\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.availableCartons.length), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"strong\", null, \"Saldo Generado:\", -1 /* HOISTED */)), _createTextVNode(\" $\" + _toDisplayString($data.selectedSeller.saldoGenerado || 0), 1 /* TEXT */)])]), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => $data.selectedSeller = null),\n    class: \"bg-indigo-600 text-white px-4 py-2 rounded-md mt-4 hover:bg-indigo-700 transition\"\n  }, \" Cerrar \")])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","sellers","seller","id","_hoisted_3","_toDisplayString","nombre","_hoisted_4","saldoGenerado","onClick","$event","$options","showSellerDetails","_hoisted_5","_createCommentVNode","selectedSeller","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_createTextVNode","assignedCartons","length","_hoisted_10","_hoisted_11","_hoisted_12","carton","serial","sellCarton","_hoisted_13","soldCartons","availableCartons","_cache"],"sources":["D:\\Lotweb\\venta-cartones\\src\\components\\SellerList.vue"],"sourcesContent":["```vue\r\n<template>\r\n  <div class=\"bg-white p-6 rounded-lg shadow-md\">\r\n    <h2 class=\"text-xl font-semibold text-gray-800 mb-4\">Lista de Vendedores</h2>\r\n    <div class=\"space-y-4\">\r\n      <div v-for=\"seller in sellers\" :key=\"seller.id\" class=\"border p-4 rounded-md flex justify-between items-center\">\r\n        <div>\r\n          <p class=\"text-lg font-medium text-gray-700\">{{ seller.nombre || seller.id || 'Sin nombre' }}</p>\r\n          <p class=\"text-sm text-gray-500\">Saldo Generado: ${{ seller.saldoGenerado || 0 }}</p>\r\n        </div>\r\n        <button\r\n          @click=\"showSellerDetails(seller)\"\r\n          class=\"bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition\"\r\n        >\r\n          Ver Detalles\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Modal para mostrar detalles del vendedor -->\r\n    <div v-if=\"selectedSeller\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center\">\r\n      <div class=\"bg-white p-6 rounded-lg shadow-lg max-w-md w-full\">\r\n        <h3 class=\"text-xl font-semibold text-gray-800 mb-4\">{{ selectedSeller.nombre || selectedSeller.id || 'Sin nombre' }}</h3>\r\n        <div class=\"space-y-2\">\r\n          <p><strong>Cartones Asignados:</strong> {{ assignedCartons.length }}</p>\r\n          <p v-if=\"assignedCartons.length === 0\">No hay cartones asignados.</p>\r\n          <div v-else>\r\n            <ul class=\"list-disc pl-5\">\r\n              <li v-for=\"carton in assignedCartons\" :key=\"carton.id\">\r\n                {{ carton.serial }}\r\n                <button\r\n                  @click=\"sellCarton(carton.id)\"\r\n                  class=\"ml-2 bg-green-500 text-white px-2 py-1 rounded-md hover:bg-green-600 transition\"\r\n                >\r\n                  Vender\r\n                </button>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <p><strong>Cartones Vendidos:</strong> {{ soldCartons.length }}</p>\r\n          <p><strong>Cartones Disponibles (Global):</strong> {{ availableCartons.length }}</p>\r\n          <p><strong>Saldo Generado:</strong> ${{ selectedSeller.saldoGenerado || 0 }}</p>\r\n        </div>\r\n        <button\r\n          @click=\"selectedSeller = null\"\r\n          class=\"bg-indigo-600 text-white px-4 py-2 rounded-md mt-4 hover:bg-indigo-700 transition\"\r\n        >\r\n          Cerrar\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { db } from '../firebase';\r\nimport { collection, query, where, getDocs, doc, updateDoc } from 'firebase/firestore';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      sellers: [],\r\n      selectedSeller: null,\r\n      assignedCartons: [],\r\n      soldCartons: [],\r\n      availableCartons: []\r\n    };\r\n  },\r\n  async mounted() {\r\n    await this.loadSellers();\r\n  },\r\n  methods: {\r\n    async loadSellers() {\r\n      try {\r\n        console.log('Cargando vendedores...');\r\n        const querySnapshot = await getDocs(collection(db, 'vendedores'));\r\n        this.sellers = querySnapshot.docs.map(docSnapshot => {\r\n          const data = docSnapshot.data();\r\n          console.log('Vendedor cargado (ID: ', docSnapshot.id, '):', data);\r\n          return {\r\n            id: docSnapshot.id,\r\n            ...data,\r\n            vendedorId: data.vendedorId || docSnapshot.id\r\n          };\r\n        });\r\n        console.log('Vendedores cargados:', this.sellers);\r\n      } catch (error) {\r\n        console.error('Error al cargar los vendedores:', error);\r\n      }\r\n    },\r\n    async showSellerDetails(seller) {\r\n      console.log('Mostrando detalles del vendedor:', seller);\r\n      this.selectedSeller = seller;\r\n      if (!seller.vendedorId) {\r\n        console.error('Error: vendedorId no estÃ¡ definido para este vendedor:', seller);\r\n        this.assignedCartons = [];\r\n        this.soldCartons = [];\r\n        this.availableCartons = [];\r\n        return;\r\n      }\r\n      await this.loadSellerCartons(seller.vendedorId);\r\n    },\r\n    async loadSellerCartons(vendedorId) {\r\n      try {\r\n        console.log(`Cargando cartones para el vendedor ${vendedorId}...`);\r\n        // Cartones asignados\r\n        const assignedQuery = query(\r\n          collection(db, 'cartones'),\r\n          where('vendedorId', '==', vendedorId),\r\n          where('estado', '==', 'asignado')\r\n        );\r\n        const assignedSnapshot = await getDocs(assignedQuery);\r\n        this.assignedCartons = assignedSnapshot.docs.map(doc => {\r\n          const data = doc.data();\r\n          console.log(`CartÃ³n asignado encontrado (ID: ${doc.id}):`, data);\r\n          return {\r\n            id: doc.id,\r\n            serial: data.serial\r\n          };\r\n        });\r\n        // Ordenar cartones asignados por serial\r\n        this.assignedCartons.sort((a, b) => {\r\n          const serialA = parseInt(a.serial.replace('LM', ''), 10);\r\n          const serialB = parseInt(b.serial.replace('LM', ''), 10);\r\n          return serialA - serialB;\r\n        });\r\n        console.log('Cartones asignados:', this.assignedCartons);\r\n\r\n        // Cartones vendidos\r\n        const soldQuery = query(\r\n          collection(db, 'cartones'),\r\n          where('vendedorId', '==', vendedorId),\r\n          where('estado', '==', 'vendido')\r\n        );\r\n        const soldSnapshot = await getDocs(soldQuery);\r\n        this.soldCartons = soldSnapshot.docs.map(doc => ({\r\n          id: doc.id,\r\n          serial: doc.data().serial\r\n        }));\r\n        // Ordenar cartones vendidos por serial\r\n        this.soldCartons.sort((a, b) => {\r\n          const serialA = parseInt(a.serial.replace('LM', ''), 10);\r\n          const serialB = parseInt(b.serial.replace('LM', ''), 10);\r\n          return serialA - serialB;\r\n        });\r\n        console.log('Cartones vendidos:', this.soldCartons);\r\n\r\n        // Cartones disponibles (global)\r\n        const availableQuery = query(\r\n          collection(db, 'cartones'),\r\n          where('vendedorId', '==', null),\r\n          where('estado', '==', 'disponible')\r\n        );\r\n        const availableSnapshot = await getDocs(availableQuery);\r\n        this.availableCartons = availableSnapshot.docs.map(doc => ({\r\n          id: doc.id,\r\n          serial: doc.data().serial\r\n        }));\r\n        // Ordenar cartones disponibles por serial\r\n        this.availableCartons.sort((a, b) => {\r\n          const serialA = parseInt(a.serial.replace('LM', ''), 10);\r\n          const serialB = parseInt(b.serial.replace('LM', ''), 10);\r\n          return serialA - serialB;\r\n        });\r\n        console.log('Cartones disponibles (global):', this.availableCartons);\r\n      } catch (error) {\r\n        console.error('Error al cargar los cartones del vendedor:', error);\r\n        this.assignedCartons = [];\r\n        this.soldCartons = [];\r\n        this.availableCartons = [];\r\n      }\r\n    },\r\n    async sellCarton(cartonId) {\r\n      try {\r\n        console.log(`Vendiendo cartÃ³n ${cartonId} para el vendedor ${this.selectedSeller.vendedorId}...`);\r\n        const cartonRef = doc(db, 'cartones', cartonId);\r\n        await updateDoc(cartonRef, {\r\n          estado: 'vendido'\r\n        });\r\n\r\n        // Actualizar el saldo del vendedor (por ejemplo, $5 por cartÃ³n vendido)\r\n        const sellerRef = doc(db, 'vendedores', this.selectedSeller.id);\r\n        const currentSaldo = this.selectedSeller.saldoGenerado || 0;\r\n        await updateDoc(sellerRef, {\r\n          saldoGenerado: currentSaldo + 5 // Incrementar el saldo (ajusta el valor segÃºn tu necesidad)\r\n        });\r\n\r\n        console.log(`CartÃ³n ${cartonId} marcado como vendido`);\r\n        alert(`CartÃ³n ${cartonId} vendido exitosamente`);\r\n\r\n        // Actualizar datos del vendedor y cartones\r\n        this.selectedSeller.saldoGenerado = currentSaldo + 5;\r\n        await this.loadSellerCartons(this.selectedSeller.vendedorId);\r\n      } catch (error) {\r\n        console.error('Error al vender el cartÃ³n:', error);\r\n        alert('Error al vender el cartÃ³n: ' + error.message);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Tailwind maneja los estilos */\r\n</style>\r\n```"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}