{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { db } from './firebase';\nimport { collection, query, where, getDocs, addDoc } from 'firebase/firestore';\nexport default {\n  methods: {\n    async checkDuplicates({\n      serials,\n      files\n    }, callback) {\n      try {\n        console.log('Verificando duplicados para seriales:', serials);\n        const cartonesRef = collection(db, 'cartones');\n        const q = query(cartonesRef, where('serial', 'in', serials));\n        const querySnapshot = await getDocs(q);\n        const existingSerials = querySnapshot.docs.map(doc => doc.data().serial);\n        console.log('Seriales existentes en Firestore:', existingSerials);\n        const nonDuplicates = files.filter(file => !existingSerials.includes(file.name.split('.')[0]));\n        console.log('Archivos no duplicados:', nonDuplicates);\n        callback(nonDuplicates);\n      } catch (error) {\n        console.error('Error al verificar duplicados:', error);\n        alert('Error al verificar duplicados: ' + error.message);\n        callback([]);\n      }\n    },\n    async handleImagesUploaded(images) {\n      try {\n        console.log('Guardando imágenes en Firestore:', images);\n        for (const image of images) {\n          const docRef = await addDoc(collection(db, 'cartones'), {\n            serial: image.serial,\n            imageUrl: image.imageUrl,\n            estado: 'disponible',\n            createdAt: new Date(),\n            vendedorId: null\n          });\n          console.log(`Cartón ${image.serial} guardado con ID:`, docRef.id);\n        }\n        alert('Todos los cartones se guardaron exitosamente en Firestore');\n      } catch (error) {\n        console.error('Error al guardar los cartones:', error);\n        alert('Error al guardar en Firestore: ' + error.message);\n      }\n    }\n  }\n};","map":{"version":3,"names":["db","collection","query","where","getDocs","addDoc","methods","checkDuplicates","serials","files","callback","console","log","cartonesRef","q","querySnapshot","existingSerials","docs","map","doc","data","serial","nonDuplicates","filter","file","includes","name","split","error","alert","message","handleImagesUploaded","images","image","docRef","imageUrl","estado","createdAt","Date","vendedorId","id"],"sources":["D:\\Lotweb\\venta-cartones\\src\\App.vue"],"sourcesContent":["```vue\n   <template>\n     <div id=\"app\" class=\"min-h-screen bg-gray-100\">\n       <!-- Navegación -->\n       <nav class=\"bg-blue-600 text-white p-4 shadow-md\">\n         <div class=\"container mx-auto flex justify-between items-center\">\n           <h1 class=\"text-3xl font-bold\">Venta de Cartones</h1>\n           <div class=\"space-x-4\">\n             <router-link to=\"/subir-cartones\" class=\"hover:text-blue-200\">Subir Cartones</router-link>\n             <router-link to=\"/asignar-cartones\" class=\"hover:text-blue-200\">Asignar Cartones</router-link>\n             <router-link to=\"/lista-cartones\" class=\"hover:text-blue-200\">Lista de Cartones</router-link>\n             <router-link to=\"/vendedores\" class=\"hover:text-blue-200\">Vendedores</router-link>\n           </div>\n         </div>\n       </nav>\n\n       <!-- Contenido principal -->\n       <main class=\"container mx-auto p-4\">\n         <router-view @check-duplicates=\"checkDuplicates\" @images-uploaded=\"handleImagesUploaded\"></router-view>\n       </main>\n     </div>\n   </template>\n\n   <script>\n   import { db } from './firebase';\n   import { collection, query, where, getDocs, addDoc } from 'firebase/firestore';\n\n   export default {\n     methods: {\n       async checkDuplicates({ serials, files }, callback) {\n         try {\n           console.log('Verificando duplicados para seriales:', serials);\n           const cartonesRef = collection(db, 'cartones');\n           const q = query(cartonesRef, where('serial', 'in', serials));\n           const querySnapshot = await getDocs(q);\n           const existingSerials = querySnapshot.docs.map(doc => doc.data().serial);\n           console.log('Seriales existentes en Firestore:', existingSerials);\n           const nonDuplicates = files.filter(file => !existingSerials.includes(file.name.split('.')[0]));\n           console.log('Archivos no duplicados:', nonDuplicates);\n           callback(nonDuplicates);\n         } catch (error) {\n           console.error('Error al verificar duplicados:', error);\n           alert('Error al verificar duplicados: ' + error.message);\n           callback([]);\n         }\n       },\n       async handleImagesUploaded(images) {\n         try {\n           console.log('Guardando imágenes en Firestore:', images);\n           for (const image of images) {\n             const docRef = await addDoc(collection(db, 'cartones'), {\n               serial: image.serial,\n               imageUrl: image.imageUrl,\n               estado: 'disponible',\n               createdAt: new Date(),\n               vendedorId: null\n             });\n             console.log(`Cartón ${image.serial} guardado con ID:`, docRef.id);\n           }\n           alert('Todos los cartones se guardaron exitosamente en Firestore');\n         } catch (error) {\n           console.error('Error al guardar los cartones:', error);\n           alert('Error al guardar en Firestore: ' + error.message);\n         }\n       }\n     }\n   };\n   </script>\n\n   <style scoped>\n   /* Tailwind maneja los estilos */\n   </style>\n   ```"],"mappings":";;;AAwBG,SAASA,EAAC,QAAS,YAAY;AAC/B,SAASC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAK,QAAS,oBAAoB;AAE9E,eAAe;EACbC,OAAO,EAAE;IACP,MAAMC,eAAeA,CAAC;MAAEC,OAAO;MAAEC;IAAM,CAAC,EAAEC,QAAQ,EAAE;MAClD,IAAI;QACFC,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEJ,OAAO,CAAC;QAC7D,MAAMK,WAAU,GAAIZ,UAAU,CAACD,EAAE,EAAE,UAAU,CAAC;QAC9C,MAAMc,CAAA,GAAIZ,KAAK,CAACW,WAAW,EAAEV,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAEK,OAAO,CAAC,CAAC;QAC5D,MAAMO,aAAY,GAAI,MAAMX,OAAO,CAACU,CAAC,CAAC;QACtC,MAAME,eAAc,GAAID,aAAa,CAACE,IAAI,CAACC,GAAG,CAACC,GAAE,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAACC,MAAM,CAAC;QACxEV,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEI,eAAe,CAAC;QACjE,MAAMM,aAAY,GAAIb,KAAK,CAACc,MAAM,CAACC,IAAG,IAAK,CAACR,eAAe,CAACS,QAAQ,CAACD,IAAI,CAACE,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9FhB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEU,aAAa,CAAC;QACrDZ,QAAQ,CAACY,aAAa,CAAC;MACzB,EAAE,OAAOM,KAAK,EAAE;QACdjB,OAAO,CAACiB,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACtDC,KAAK,CAAC,iCAAgC,GAAID,KAAK,CAACE,OAAO,CAAC;QACxDpB,QAAQ,CAAC,EAAE,CAAC;MACd;IACF,CAAC;IACD,MAAMqB,oBAAoBA,CAACC,MAAM,EAAE;MACjC,IAAI;QACFrB,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEoB,MAAM,CAAC;QACvD,KAAK,MAAMC,KAAI,IAAKD,MAAM,EAAE;UAC1B,MAAME,MAAK,GAAI,MAAM7B,MAAM,CAACJ,UAAU,CAACD,EAAE,EAAE,UAAU,CAAC,EAAE;YACtDqB,MAAM,EAAEY,KAAK,CAACZ,MAAM;YACpBc,QAAQ,EAAEF,KAAK,CAACE,QAAQ;YACxBC,MAAM,EAAE,YAAY;YACpBC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;YACrBC,UAAU,EAAE;UACd,CAAC,CAAC;UACF5B,OAAO,CAACC,GAAG,CAAC,UAAUqB,KAAK,CAACZ,MAAM,mBAAmB,EAAEa,MAAM,CAACM,EAAE,CAAC;QACnE;QACAX,KAAK,CAAC,2DAA2D,CAAC;MACpE,EAAE,OAAOD,KAAK,EAAE;QACdjB,OAAO,CAACiB,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACtDC,KAAK,CAAC,iCAAgC,GAAID,KAAK,CAACE,OAAO,CAAC;MAC1D;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}