{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { db } from '../firebase';\nimport { collection, getDocs, doc, updateDoc } from 'firebase/firestore';\nexport default {\n  data() {\n    return {\n      cartones: [],\n      selectedCarton: null,\n      availableCartons: 0,\n      soldCartons: 0,\n      sellerCount: 0,\n      loading: false,\n      showConfirm: false\n    };\n  },\n  async mounted() {\n    await this.loadData();\n  },\n  methods: {\n    async loadData() {\n      this.loading = true;\n      try {\n        await this.loadCartones();\n        await this.loadSellers();\n      } catch (error) {\n        console.error('Error al cargar datos:', error);\n        alert('Error al cargar datos: ' + error.message);\n      } finally {\n        this.loading = false;\n      }\n    },\n    async loadCartones() {\n      try {\n        const querySnapshot = await getDocs(collection(db, 'cartones'));\n        this.cartones = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n        // Ordenar los cartones por serial (LM seguido de números)\n        this.cartones.sort((a, b) => {\n          const serialA = parseInt(a.serial.replace('LM', ''), 10);\n          const serialB = parseInt(b.serial.replace('LM', ''), 10);\n          return serialA - serialB;\n        });\n        this.availableCartons = this.cartones.filter(c => c.estado === 'disponible').length;\n        this.soldCartons = this.cartones.filter(c => c.estado === 'vendido').length;\n        console.log('Cartones cargados:', this.cartones);\n      } catch (error) {\n        console.error('Error al cargar los cartones:', error);\n        throw error;\n      }\n    },\n    async loadSellers() {\n      try {\n        const querySnapshot = await getDocs(collection(db, 'vendedores'));\n        this.sellerCount = querySnapshot.docs.length;\n      } catch (error) {\n        console.error('Error al cargar los vendedores:', error);\n        throw error;\n      }\n    },\n    openModal(carton) {\n      this.selectedCarton = carton;\n    },\n    closeModal() {\n      this.selectedCarton = null;\n      this.showConfirm = false;\n    },\n    handleImageError(carton) {\n      console.error(`Error al cargar la imagen del cartón ${carton.serial}:`, carton.imageUrl);\n      carton.imageUrl = null; // Evita intentar cargar la imagen nuevamente\n    },\n    confirmMakeAvailable() {\n      this.showConfirm = true;\n    },\n    cancelMakeAvailable() {\n      this.showConfirm = false;\n    },\n    async makeAvailable() {\n      if (!this.selectedCarton) return;\n      try {\n        console.log('Devolviendo cartón a disponible:', this.selectedCarton.id);\n        const cartonRef = doc(db, 'cartones', this.selectedCarton.id);\n        await updateDoc(cartonRef, {\n          vendedorId: null,\n          estado: 'disponible'\n        });\n        console.log('Cartón devuelto a disponible exitosamente');\n        alert('Cartón devuelto a disponible exitosamente');\n        this.showConfirm = false;\n        this.selectedCarton = null;\n        await this.loadData(); // Recargar datos para actualizar estadísticas y lista\n      } catch (error) {\n        console.error('Error al devolver cartón a disponible:', error);\n        alert('Error al devolver cartón a disponible: ' + error.message);\n      }\n    }\n  }\n};","map":{"version":3,"names":["db","collection","getDocs","doc","updateDoc","data","cartones","selectedCarton","availableCartons","soldCartons","sellerCount","loading","showConfirm","mounted","loadData","methods","loadCartones","loadSellers","error","console","alert","message","querySnapshot","docs","map","id","sort","a","b","serialA","parseInt","serial","replace","serialB","filter","c","estado","length","log","openModal","carton","closeModal","handleImageError","imageUrl","confirmMakeAvailable","cancelMakeAvailable","makeAvailable","cartonRef","vendedorId"],"sources":["D:\\Lotweb\\venta-cartones\\src\\components\\CartonList.vue"],"sourcesContent":["```vue\r\n<template>\r\n  <div>\r\n    <div class=\"flex justify-between items-center mb-4\">\r\n      <h2 class=\"text-xl font-semibold text-gray-800\">Lista de Cartones</h2>\r\n      <button\r\n        @click=\"loadCartones\"\r\n        class=\"bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition flex items-center\"\r\n        :disabled=\"loading\"\r\n      >\r\n        <span v-if=\"loading\" class=\"flex items-center\">\r\n          <svg class=\"animate-spin h-5 w-5 mr-2 text-white\" viewBox=\"0 0 24 24\">\r\n            <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\r\n            <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n          </svg>\r\n          Cargando...\r\n        </span>\r\n        <span v-else>Refrescar</span>\r\n      </button>\r\n    </div>\r\n    <!-- Estadísticas -->\r\n    <div v-if=\"!loading\" class=\"bg-white p-4 rounded-lg shadow-md mb-6\">\r\n      <h3 class=\"text-xl font-medium text-gray-700 mb-2\">Estadísticas</h3>\r\n      <div class=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\r\n        <div class=\"text-center\">\r\n          <p class=\"text-gray-600\">Cartones Disponibles</p>\r\n          <p class=\"text-2xl font-bold text-blue-600\">{{ availableCartons }}</p>\r\n        </div>\r\n        <div class=\"text-center\">\r\n          <p class=\"text-gray-600\">Cartones Vendidos</p>\r\n          <p class=\"text-2xl font-bold text-green-600\">{{ soldCartons }}</p>\r\n        </div>\r\n        <div class=\"text-center\">\r\n          <p class=\"text-gray-600\">Vendedores</p>\r\n          <p class=\"text-2xl font-bold text-purple-600\">{{ sellerCount }}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- Lista de Cartones -->\r\n    <div v-if=\"loading\" class=\"text-center text-gray-600\">Cargando cartones...</div>\r\n    <div v-else>\r\n      <p v-if=\"cartones.length === 0\" class=\"text-gray-600\">No hay cartones disponibles.</p>\r\n      <div class=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n        <div\r\n          v-for=\"carton in cartones\"\r\n          :key=\"carton.id\"\r\n          class=\"carton-item bg-white p-4 rounded-lg shadow-md hover:shadow-lg transition cursor-pointer\"\r\n          @click=\"openModal(carton)\"\r\n        >\r\n          <img\r\n            :src=\"carton.imageUrl\"\r\n            :alt=\"'Cartón ' + carton.serial\"\r\n            class=\"carton-image w-full h-48 object-cover rounded-md mb-2\"\r\n            @error=\"handleImageError(carton)\"\r\n          />\r\n          <p class=\"text-gray-800 font-medium\"><strong>Serial:</strong> {{ carton.serial }}</p>\r\n          <p class=\"text-gray-600\"><strong>Estado:</strong> {{ carton.estado }}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- Modal de Detalles -->\r\n    <div v-if=\"selectedCarton\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n      <div class=\"bg-white p-6 rounded-lg shadow-lg max-w-lg w-full\">\r\n        <h3 class=\"text-xl font-semibold text-gray-800 mb-4\">Detalles del Cartón</h3>\r\n        <img\r\n          :src=\"selectedCarton.imageUrl\"\r\n          :alt=\"'Cartón ' + selectedCarton.serial\"\r\n          class=\"w-full h-auto rounded-md mb-4\"\r\n          @error=\"handleImageError(selectedCarton)\"\r\n        />\r\n        <p class=\"text-gray-800 font-medium\"><strong>Serial:</strong> {{ selectedCarton.serial }}</p>\r\n        <p class=\"text-gray-600\"><strong>Estado:</strong> {{ selectedCarton.estado }}</p>\r\n        <div class=\"mt-4 flex justify-end space-x-4\">\r\n          <button\r\n            v-if=\"selectedCarton.estado === 'asignado'\"\r\n            @click=\"confirmMakeAvailable\"\r\n            class=\"bg-yellow-600 text-white px-4 py-2 rounded-md hover:bg-yellow-700 transition\"\r\n          >\r\n            Devolver a Disponible\r\n          </button>\r\n          <button\r\n            @click=\"closeModal\"\r\n            class=\"bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition\"\r\n          >\r\n            Cerrar\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- Modal de Confirmación -->\r\n    <div v-if=\"showConfirm\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n      <div class=\"bg-white p-6 rounded-lg shadow-lg max-w-lg w-full\">\r\n        <h3 class=\"text-xl font-semibold text-gray-800 mb-4\">Confirmar Acción</h3>\r\n        <p class=\"text-gray-600\">¿Estás seguro de que deseas devolver el cartón con serial {{ selectedCarton.serial }} a disponible? Esto permitirá asignarlo a otro vendedor.</p>\r\n        <div class=\"mt-4 flex justify-end space-x-4\">\r\n          <button\r\n            @click=\"cancelMakeAvailable\"\r\n            class=\"bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600 transition\"\r\n          >\r\n            Cancelar\r\n          </button>\r\n          <button\r\n            @click=\"makeAvailable\"\r\n            class=\"bg-yellow-600 text-white px-4 py-2 rounded-md hover:bg-yellow-700 transition\"\r\n          >\r\n            Confirmar\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { db } from '../firebase';\r\nimport { collection, getDocs, doc, updateDoc } from 'firebase/firestore';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      cartones: [],\r\n      selectedCarton: null,\r\n      availableCartons: 0,\r\n      soldCartons: 0,\r\n      sellerCount: 0,\r\n      loading: false,\r\n      showConfirm: false\r\n    };\r\n  },\r\n  async mounted() {\r\n    await this.loadData();\r\n  },\r\n  methods: {\r\n    async loadData() {\r\n      this.loading = true;\r\n      try {\r\n        await this.loadCartones();\r\n        await this.loadSellers();\r\n      } catch (error) {\r\n        console.error('Error al cargar datos:', error);\r\n        alert('Error al cargar datos: ' + error.message);\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n    async loadCartones() {\r\n      try {\r\n        const querySnapshot = await getDocs(collection(db, 'cartones'));\r\n        this.cartones = querySnapshot.docs.map(doc => ({\r\n          id: doc.id,\r\n          ...doc.data()\r\n        }));\r\n        // Ordenar los cartones por serial (LM seguido de números)\r\n        this.cartones.sort((a, b) => {\r\n          const serialA = parseInt(a.serial.replace('LM', ''), 10);\r\n          const serialB = parseInt(b.serial.replace('LM', ''), 10);\r\n          return serialA - serialB;\r\n        });\r\n        this.availableCartons = this.cartones.filter(c => c.estado === 'disponible').length;\r\n        this.soldCartons = this.cartones.filter(c => c.estado === 'vendido').length;\r\n        console.log('Cartones cargados:', this.cartones);\r\n      } catch (error) {\r\n        console.error('Error al cargar los cartones:', error);\r\n        throw error;\r\n      }\r\n    },\r\n    async loadSellers() {\r\n      try {\r\n        const querySnapshot = await getDocs(collection(db, 'vendedores'));\r\n        this.sellerCount = querySnapshot.docs.length;\r\n      } catch (error) {\r\n        console.error('Error al cargar los vendedores:', error);\r\n        throw error;\r\n      }\r\n    },\r\n    openModal(carton) {\r\n      this.selectedCarton = carton;\r\n    },\r\n    closeModal() {\r\n      this.selectedCarton = null;\r\n      this.showConfirm = false;\r\n    },\r\n    handleImageError(carton) {\r\n      console.error(`Error al cargar la imagen del cartón ${carton.serial}:`, carton.imageUrl);\r\n      carton.imageUrl = null; // Evita intentar cargar la imagen nuevamente\r\n    },\r\n    confirmMakeAvailable() {\r\n      this.showConfirm = true;\r\n    },\r\n    cancelMakeAvailable() {\r\n      this.showConfirm = false;\r\n    },\r\n    async makeAvailable() {\r\n      if (!this.selectedCarton) return;\r\n\r\n      try {\r\n        console.log('Devolviendo cartón a disponible:', this.selectedCarton.id);\r\n        const cartonRef = doc(db, 'cartones', this.selectedCarton.id);\r\n        await updateDoc(cartonRef, {\r\n          vendedorId: null,\r\n          estado: 'disponible'\r\n        });\r\n        console.log('Cartón devuelto a disponible exitosamente');\r\n        alert('Cartón devuelto a disponible exitosamente');\r\n        this.showConfirm = false;\r\n        this.selectedCarton = null;\r\n        await this.loadData(); // Recargar datos para actualizar estadísticas y lista\r\n      } catch (error) {\r\n        console.error('Error al devolver cartón a disponible:', error);\r\n        alert('Error al devolver cartón a disponible: ' + error.message);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Tailwind maneja los estilos */\r\n</style>\r\n```"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}