{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_UploadCarton = _resolveComponent(\"UploadCarton\");\n  const _component_AssignCartons = _resolveComponent(\"AssignCartons\");\n  const _component_CartonList = _resolveComponent(\"CartonList\");\n  const _component_SellerList = _resolveComponent(\"SellerList\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_UploadCarton, {\n    onCheckDuplicates: $options.checkDuplicates,\n    onImagesUploaded: $options.handleImagesUploaded\n  }, null, 8 /* PROPS */, [\"onCheckDuplicates\", \"onImagesUploaded\"]), _createVNode(_component_AssignCartons, {\n    onCartonesAsignados: $options.refreshCartones\n  }, null, 8 /* PROPS */, [\"onCartonesAsignados\"]), _createVNode(_component_CartonList, {\n    ref: \"cartonList\"\n  }, null, 512 /* NEED_PATCH */), _createVNode(_component_SellerList)]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_UploadCarton","onCheckDuplicates","$options","checkDuplicates","onImagesUploaded","handleImagesUploaded","_component_AssignCartons","onCartonesAsignados","refreshCartones","_component_CartonList","ref","_component_SellerList"],"sources":["D:\\Lotweb\\venta-cartones\\src\\views\\Home.vue"],"sourcesContent":["```vue\r\n<template>\r\n  <div>\r\n    <UploadCarton @check-duplicates=\"checkDuplicates\" @images-uploaded=\"handleImagesUploaded\" />\r\n    <AssignCartons @cartones-asignados=\"refreshCartones\" />\r\n    <CartonList ref=\"cartonList\" />\r\n    <SellerList />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport UploadCarton from '../components/UploadCarton.vue';\r\nimport AssignCartons from '../components/AssignCartons.vue';\r\nimport CartonList from '../components/CartonList.vue';\r\nimport SellerList from '../components/SellerList.vue';\r\nimport { db } from '../firebase';\r\nimport { collection, query, where, getDocs, addDoc } from 'firebase/firestore';\r\n\r\nexport default {\r\n  components: {\r\n    UploadCarton,\r\n    AssignCartons,\r\n    CartonList,\r\n    SellerList\r\n  },\r\n  methods: {\r\n    async checkDuplicates({ serials, files }, callback) {\r\n      try {\r\n        const cartonesRef = collection(db, 'cartones');\r\n        const q = query(cartonesRef, where('serial', 'in', serials));\r\n        const querySnapshot = await getDocs(q);\r\n        const existingSerials = querySnapshot.docs.map(doc => doc.data().serial);\r\n        const nonDuplicates = files.filter(file => !existingSerials.includes(file.name.split('.')[0]));\r\n        callback(nonDuplicates);\r\n      } catch (error) {\r\n        console.error('Error al verificar duplicados:', error);\r\n        alert('Error al verificar duplicados: ' + error.message);\r\n        callback([]);\r\n      }\r\n    },\r\n    async handleImagesUploaded(images) {\r\n      try {\r\n        for (const image of images) {\r\n          const docRef = await addDoc(collection(db, 'cartones'), {\r\n            serial: image.serial,\r\n            imageUrl: image.imageUrl,\r\n            estado: 'disponible',\r\n            createdAt: new Date(),\r\n            vendedorId: null\r\n          });\r\n          console.log(`Cart√≥n ${image.serial} guardado con ID:`, docRef.id);\r\n        }\r\n        alert('Todos los cartones se guardaron exitosamente en Firestore');\r\n      } catch (error) {\r\n        console.error('Error al guardar los cartones:', error);\r\n        alert('Error al guardar en Firestore: ' + error.message);\r\n      }\r\n    },\r\n    async refreshCartones() {\r\n      this.$refs.cartonList.loadCartones();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Tailwind maneja los estilos */\r\n</style>"],"mappings":";;;;;;uBAEEA,mBAAA,CAKM,cAJJC,YAAA,CAA4FC,uBAAA;IAA7EC,iBAAgB,EAAEC,QAAA,CAAAC,eAAe;IAAGC,gBAAe,EAAEF,QAAA,CAAAG;sEACpEN,YAAA,CAAuDO,wBAAA;IAAvCC,mBAAkB,EAAEL,QAAA,CAAAM;EAAe,kDACnDT,YAAA,CAA+BU,qBAAA;IAAnBC,GAAG,EAAC;EAAY,gCAC5BX,YAAA,CAAcY,qBAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}