{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { db } from '../firebase';\nimport { collection, query, where, getDocs, doc, getDoc, updateDoc } from 'firebase/firestore';\nexport default {\n  data() {\n    return {\n      sellers: [],\n      availableCartons: [],\n      selectedVendedorId: '',\n      startSerial: '',\n      endSerial: '',\n      errorMessage: '',\n      successMessage: ''\n    };\n  },\n  async mounted() {\n    console.log('Componente AssignCartons montado');\n    await this.loadSellers();\n    await this.loadAvailableCartons();\n  },\n  methods: {\n    async loadSellers() {\n      try {\n        console.log('Iniciando carga de vendedores...');\n        const querySnapshot = await getDocs(collection(db, 'vendedores'));\n        this.sellers = querySnapshot.docs.map(doc => doc.data());\n        console.log('Vendedores cargados:', this.sellers);\n      } catch (error) {\n        console.error('Error al cargar los vendedores:', error);\n        this.errorMessage = 'Error al cargar los vendedores: ' + error.message;\n      }\n    },\n    async loadAvailableCartons() {\n      try {\n        console.log('Cargando cartones disponibles...');\n        const q = query(collection(db, 'cartones'), where('estado', '==', 'disponible'), where('vendedorId', '==', null));\n        const querySnapshot = await getDocs(q);\n        this.availableCartons = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          serial: doc.data().serial\n        }));\n        console.log('Cartones disponibles cargados:', this.availableCartons);\n      } catch (error) {\n        console.error('Error al cargar los cartones disponibles:', error);\n        this.errorMessage = 'Error al cargar los cartones disponibles: ' + error.message;\n      }\n    },\n    async assignCartons() {\n      console.log('Función assignCartons ejecutada');\n      console.log('Valores seleccionados:', {\n        selectedVendedorId: this.selectedVendedorId,\n        startSerial: this.startSerial,\n        endSerial: this.endSerial\n      });\n      this.errorMessage = '';\n      this.successMessage = '';\n      if (!this.selectedVendedorId || !this.startSerial || !this.endSerial) {\n        console.log('Campos incompletos, mostrando mensaje de error');\n        this.errorMessage = 'Por favor, completa todos los campos.';\n        return;\n      }\n      try {\n        // Determinar el rango de seriales seleccionados\n        const startIndex = this.availableCartons.findIndex(carton => carton.serial === this.startSerial);\n        const endIndex = this.availableCartons.findIndex(carton => carton.serial === this.endSerial);\n        if (startIndex === -1 || endIndex === -1) {\n          console.log('Seriales no encontrados en la lista de cartones disponibles');\n          this.errorMessage = 'Los seriales seleccionados no están disponibles.';\n          return;\n        }\n        if (startIndex > endIndex) {\n          console.log('Rango inválido: el serial inicial debe ser menor o igual al serial final');\n          this.errorMessage = 'El serial inicial debe ser menor o igual al serial final.';\n          return;\n        }\n        const cartonesToAssign = this.availableCartons.slice(startIndex, endIndex + 1);\n        console.log('Cartones a asignar:', cartonesToAssign);\n        if (cartonesToAssign.length === 0) {\n          console.log('No hay cartones para asignar en el rango seleccionado');\n          this.errorMessage = 'No hay cartones para asignar en el rango seleccionado.';\n          return;\n        }\n\n        // Verificar si algún cartón ya está asignado (por si cambió mientras se cargaba la página)\n        let alreadyAssignedSerials = [];\n        for (const carton of cartonesToAssign) {\n          const cartonRef = doc(db, 'cartones', carton.id);\n          const cartonDoc = await getDoc(cartonRef);\n          if (cartonDoc.exists() && cartonDoc.data().vendedorId && cartonDoc.data().vendedorId !== this.selectedVendedorId) {\n            alreadyAssignedSerials.push(carton.serial);\n          }\n        }\n        if (alreadyAssignedSerials.length > 0) {\n          console.log('Cartones ya asignados detectados:', alreadyAssignedSerials);\n          this.errorMessage = `Los siguientes cartones ya están asignados a otro vendedor: ${alreadyAssignedSerials.join(', ')}`;\n          return;\n        }\n\n        // Asignar los cartones\n        console.log('Procediendo a asignar cartones...');\n        for (const carton of cartonesToAssign) {\n          console.log(`Asignando cartón ${carton.serial} a ${this.selectedVendedorId}`);\n          await updateDoc(doc(db, 'cartones', carton.id), {\n            vendedorId: this.selectedVendedorId\n          });\n          console.log(`Cartón ${carton.serial} asignado exitosamente`);\n        }\n        console.log('Asignación completada para', cartonesToAssign.length, 'cartones');\n        this.successMessage = 'Cartones asignados';\n        this.startSerial = '';\n        this.endSerial = '';\n        this.selectedVendedorId = '';\n        // Recargar los cartones disponibles después de asignar\n        await this.loadAvailableCartons();\n      } catch (error) {\n        console.error('Error al asignar cartones:', error);\n        this.errorMessage = 'Error al asignar cartones: ' + error.message;\n      }\n    }\n  }\n};","map":{"version":3,"names":["db","collection","query","where","getDocs","doc","getDoc","updateDoc","data","sellers","availableCartons","selectedVendedorId","startSerial","endSerial","errorMessage","successMessage","mounted","console","log","loadSellers","loadAvailableCartons","methods","querySnapshot","docs","map","error","message","q","id","serial","assignCartons","startIndex","findIndex","carton","endIndex","cartonesToAssign","slice","length","alreadyAssignedSerials","cartonRef","cartonDoc","exists","vendedorId","push","join"],"sources":["D:\\Lotweb\\venta-cartones\\src\\components\\AssignCartons.vue"],"sourcesContent":["```vue\r\n   <template>\r\n     <div class=\"bg-white p-6 rounded-lg shadow-md mb-6\">\r\n       <h2 class=\"text-2xl font-semibold text-gray-800 mb-4\">Asignar Cartones por Lote</h2>\r\n       <div class=\"space-y-4\">\r\n         <div>\r\n           <label class=\"block text-gray-600 mb-1\">Seleccionar Vendedor</label>\r\n           <select\r\n             v-model=\"selectedVendedorId\"\r\n             class=\"w-full p-2 border rounded-md\"\r\n           >\r\n             <option value=\"\" disabled>Selecciona un vendedor</option>\r\n             <option v-for=\"seller in sellers\" :key=\"seller.vendedorId\" :value=\"seller.vendedorId\">\r\n               {{ seller.nombre || seller.vendedorId }}\r\n             </option>\r\n           </select>\r\n         </div>\r\n         <div>\r\n           <label class=\"block text-gray-600 mb-1\">Desde</label>\r\n           <select\r\n             v-model=\"startSerial\"\r\n             class=\"w-full p-2 border rounded-md\"\r\n           >\r\n             <option value=\"\" disabled>Selecciona un serial inicial</option>\r\n             <option v-for=\"carton in availableCartons\" :key=\"carton.serial\" :value=\"carton.serial\">\r\n               {{ carton.serial }}\r\n             </option>\r\n           </select>\r\n         </div>\r\n         <div>\r\n           <label class=\"block text-gray-600 mb-1\">Hasta</label>\r\n           <select\r\n             v-model=\"endSerial\"\r\n             class=\"w-full p-2 border rounded-md\"\r\n           >\r\n             <option value=\"\" disabled>Selecciona un serial final</option>\r\n             <option v-for=\"carton in availableCartons\" :key=\"carton.serial\" :value=\"carton.serial\">\r\n               {{ carton.serial }}\r\n             </option>\r\n           </select>\r\n         </div>\r\n         <button\r\n           @click=\"assignCartons\"\r\n           class=\"bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 transition\"\r\n           :disabled=\"!selectedVendedorId || !startSerial || !endSerial\"\r\n         >\r\n           Asignar Cartones\r\n         </button>\r\n       </div>\r\n       <p v-if=\"errorMessage\" class=\"text-red-600 mt-2\">{{ errorMessage }}</p>\r\n       <p v-if=\"successMessage\" class=\"text-green-600 mt-2\">{{ successMessage }}</p>\r\n     </div>\r\n   </template>\r\n\r\n   <script>\r\n   import { db } from '../firebase';\r\n   import { collection, query, where, getDocs, doc, getDoc, updateDoc } from 'firebase/firestore';\r\n\r\n   export default {\r\n     data() {\r\n       return {\r\n         sellers: [],\r\n         availableCartons: [],\r\n         selectedVendedorId: '',\r\n         startSerial: '',\r\n         endSerial: '',\r\n         errorMessage: '',\r\n         successMessage: ''\r\n       };\r\n     },\r\n     async mounted() {\r\n       console.log('Componente AssignCartons montado');\r\n       await this.loadSellers();\r\n       await this.loadAvailableCartons();\r\n     },\r\n     methods: {\r\n       async loadSellers() {\r\n         try {\r\n           console.log('Iniciando carga de vendedores...');\r\n           const querySnapshot = await getDocs(collection(db, 'vendedores'));\r\n           this.sellers = querySnapshot.docs.map(doc => doc.data());\r\n           console.log('Vendedores cargados:', this.sellers);\r\n         } catch (error) {\r\n           console.error('Error al cargar los vendedores:', error);\r\n           this.errorMessage = 'Error al cargar los vendedores: ' + error.message;\r\n         }\r\n       },\r\n       async loadAvailableCartons() {\r\n         try {\r\n           console.log('Cargando cartones disponibles...');\r\n           const q = query(\r\n             collection(db, 'cartones'),\r\n             where('estado', '==', 'disponible'),\r\n             where('vendedorId', '==', null)\r\n           );\r\n           const querySnapshot = await getDocs(q);\r\n           this.availableCartons = querySnapshot.docs.map(doc => ({\r\n             id: doc.id,\r\n             serial: doc.data().serial\r\n           }));\r\n           console.log('Cartones disponibles cargados:', this.availableCartons);\r\n         } catch (error) {\r\n           console.error('Error al cargar los cartones disponibles:', error);\r\n           this.errorMessage = 'Error al cargar los cartones disponibles: ' + error.message;\r\n         }\r\n       },\r\n       async assignCartons() {\r\n         console.log('Función assignCartons ejecutada');\r\n         console.log('Valores seleccionados:', {\r\n           selectedVendedorId: this.selectedVendedorId,\r\n           startSerial: this.startSerial,\r\n           endSerial: this.endSerial\r\n         });\r\n\r\n         this.errorMessage = '';\r\n         this.successMessage = '';\r\n\r\n         if (!this.selectedVendedorId || !this.startSerial || !this.endSerial) {\r\n           console.log('Campos incompletos, mostrando mensaje de error');\r\n           this.errorMessage = 'Por favor, completa todos los campos.';\r\n           return;\r\n         }\r\n\r\n         try {\r\n           // Determinar el rango de seriales seleccionados\r\n           const startIndex = this.availableCartons.findIndex(carton => carton.serial === this.startSerial);\r\n           const endIndex = this.availableCartons.findIndex(carton => carton.serial === this.endSerial);\r\n\r\n           if (startIndex === -1 || endIndex === -1) {\r\n             console.log('Seriales no encontrados en la lista de cartones disponibles');\r\n             this.errorMessage = 'Los seriales seleccionados no están disponibles.';\r\n             return;\r\n           }\r\n\r\n           if (startIndex > endIndex) {\r\n             console.log('Rango inválido: el serial inicial debe ser menor o igual al serial final');\r\n             this.errorMessage = 'El serial inicial debe ser menor o igual al serial final.';\r\n             return;\r\n           }\r\n\r\n           const cartonesToAssign = this.availableCartons.slice(startIndex, endIndex + 1);\r\n           console.log('Cartones a asignar:', cartonesToAssign);\r\n\r\n           if (cartonesToAssign.length === 0) {\r\n             console.log('No hay cartones para asignar en el rango seleccionado');\r\n             this.errorMessage = 'No hay cartones para asignar en el rango seleccionado.';\r\n             return;\r\n           }\r\n\r\n           // Verificar si algún cartón ya está asignado (por si cambió mientras se cargaba la página)\r\n           let alreadyAssignedSerials = [];\r\n           for (const carton of cartonesToAssign) {\r\n             const cartonRef = doc(db, 'cartones', carton.id);\r\n             const cartonDoc = await getDoc(cartonRef);\r\n             if (cartonDoc.exists() && cartonDoc.data().vendedorId && cartonDoc.data().vendedorId !== this.selectedVendedorId) {\r\n               alreadyAssignedSerials.push(carton.serial);\r\n             }\r\n           }\r\n\r\n           if (alreadyAssignedSerials.length > 0) {\r\n             console.log('Cartones ya asignados detectados:', alreadyAssignedSerials);\r\n             this.errorMessage = `Los siguientes cartones ya están asignados a otro vendedor: ${alreadyAssignedSerials.join(', ')}`;\r\n             return;\r\n           }\r\n\r\n           // Asignar los cartones\r\n           console.log('Procediendo a asignar cartones...');\r\n           for (const carton of cartonesToAssign) {\r\n             console.log(`Asignando cartón ${carton.serial} a ${this.selectedVendedorId}`);\r\n             await updateDoc(doc(db, 'cartones', carton.id), {\r\n               vendedorId: this.selectedVendedorId\r\n             });\r\n             console.log(`Cartón ${carton.serial} asignado exitosamente`);\r\n           }\r\n\r\n           console.log('Asignación completada para', cartonesToAssign.length, 'cartones');\r\n           this.successMessage = 'Cartones asignados';\r\n           this.startSerial = '';\r\n           this.endSerial = '';\r\n           this.selectedVendedorId = '';\r\n           // Recargar los cartones disponibles después de asignar\r\n           await this.loadAvailableCartons();\r\n         } catch (error) {\r\n           console.error('Error al asignar cartones:', error);\r\n           this.errorMessage = 'Error al asignar cartones: ' + error.message;\r\n         }\r\n       }\r\n     }\r\n   };\r\n   </script>\r\n\r\n   <style scoped>\r\n   /* Tailwind maneja los estilos */\r\n   </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}