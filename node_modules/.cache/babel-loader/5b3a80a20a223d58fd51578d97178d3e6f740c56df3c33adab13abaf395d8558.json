{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { db } from '../firebase';\nimport { doc, getDoc, updateDoc } from 'firebase/firestore';\nexport default {\n  data() {\n    return {\n      sellers: [],\n      selectedVendedorId: '',\n      startSerial: '',\n      endSerial: '',\n      errorMessage: '',\n      successMessage: ''\n    };\n  },\n  async mounted() {\n    console.log('Componente AssignCartons montado');\n    await this.loadSellers();\n  },\n  methods: {\n    async loadSellers() {\n      try {\n        console.log('Iniciando carga de vendedores...');\n        const {\n          collection,\n          getDocs\n        } = await import('firebase/firestore');\n        const querySnapshot = await getDocs(collection(db, 'vendedores'));\n        this.sellers = querySnapshot.docs.map(doc => doc.data());\n        console.log('Vendedores cargados en AssignCartons:', this.sellers);\n      } catch (error) {\n        console.error('Error al cargar los vendedores:', error);\n        this.errorMessage = 'Error al cargar los vendedores: ' + error.message;\n      }\n    },\n    async assignCartons() {\n      console.log('Función assignCartons ejecutada');\n      console.log('Valores del formulario:', {\n        selectedVendedorId: this.selectedVendedorId,\n        startSerial: this.startSerial,\n        endSerial: this.endSerial\n      });\n      this.errorMessage = '';\n      this.successMessage = '';\n      if (!this.selectedVendedorId || !this.startSerial || !this.endSerial) {\n        console.log('Campos incompletos, mostrando mensaje de error');\n        this.errorMessage = 'Por favor, completa todos los campos.';\n        return;\n      }\n\n      // Validar formato de seriales (LM seguido de números)\n      console.log('Validando formato de seriales...');\n      const serialRegex = /^LM\\d+$/;\n      if (!serialRegex.test(this.startSerial) || !serialRegex.test(this.endSerial)) {\n        console.log('Formato de seriales inválido');\n        this.errorMessage = 'Los seriales deben comenzar con \"LM\" seguido de números (ej. LM0001).';\n        return;\n      }\n\n      // Extraer números de los seriales\n      console.log('Extrayendo números de seriales...');\n      const startNum = parseInt(this.startSerial.replace('LM', ''), 10);\n      const endNum = parseInt(this.endSerial.replace('LM', ''), 10);\n      console.log('Números extraídos:', {\n        startNum,\n        endNum\n      });\n      if (isNaN(startNum) || isNaN(endNum) || startNum > endNum) {\n        console.log('Validación de rango fallida');\n        this.errorMessage = 'El serial inicial debe ser menor o igual al serial final.';\n        return;\n      }\n      try {\n        console.log('Generando lista de seriales...');\n        const serials = [];\n        for (let i = startNum; i <= endNum; i++) {\n          const serial = `LM${i.toString().padStart(4, '0')}`;\n          serials.push(serial);\n        }\n        console.log('Seriales generados:', serials);\n        let allCartones = [];\n        let alreadyAssignedSerials = [];\n\n        // Consultar cada cartón individualmente\n        for (const serial of serials) {\n          console.log(`Consultando cartón con serial ${serial}...`);\n          const cartonRef = doc(db, 'cartones', serial);\n          const cartonDoc = await getDoc(cartonRef);\n          if (cartonDoc.exists()) {\n            const cartonData = cartonDoc.data();\n            console.log(`Cartón ${serial} encontrado:`, cartonData);\n            if (cartonData.vendedorId && cartonData.vendedorId !== this.selectedVendedorId) {\n              alreadyAssignedSerials.push(serial);\n            } else {\n              allCartones.push({\n                id: cartonDoc.id,\n                data: () => cartonData\n              });\n            }\n          } else {\n            console.log(`Cartón ${serial} no encontrado`);\n          }\n        }\n        if (allCartones.length === 0 && alreadyAssignedSerials.length === 0) {\n          console.log('No se encontraron cartones para el rango:', serials);\n          this.errorMessage = 'No se encontraron cartones en el rango especificado.';\n          return;\n        }\n        if (alreadyAssignedSerials.length > 0) {\n          console.log('Cartones ya asignados detectados:', alreadyAssignedSerials);\n          this.errorMessage = `Los siguientes cartones ya están asignados a otro vendedor: ${alreadyAssignedSerials.join(', ')}`;\n          return;\n        }\n\n        // Actualizar vendedorId para cada cartón\n        console.log('Procediendo a asignar cartones...');\n        for (const carton of allCartones) {\n          console.log(`Asignando cartón ${carton.id} a ${this.selectedVendedorId}`);\n          await updateDoc(doc(db, 'cartones', carton.id), {\n            vendedorId: this.selectedVendedorId\n          });\n          console.log(`Cartón ${carton.id} asignado exitosamente`);\n        }\n        console.log('Asignación completada para', allCartones.length, 'cartones');\n        this.successMessage = 'Cartones asignados';\n        this.startSerial = '';\n        this.endSerial = '';\n        this.selectedVendedorId = '';\n      } catch (error) {\n        console.error('Error general al asignar cartones:', error);\n        this.errorMessage = 'Error al asignar cartones: ' + error.message;\n      }\n    }\n  }\n};","map":{"version":3,"names":["db","doc","getDoc","updateDoc","data","sellers","selectedVendedorId","startSerial","endSerial","errorMessage","successMessage","mounted","console","log","loadSellers","methods","collection","getDocs","querySnapshot","docs","map","error","message","assignCartons","serialRegex","test","startNum","parseInt","replace","endNum","isNaN","serials","i","serial","toString","padStart","push","allCartones","alreadyAssignedSerials","cartonRef","cartonDoc","exists","cartonData","vendedorId","id","length","join","carton"],"sources":["D:\\Lotweb\\venta-cartones\\src\\components\\AssignCartons.vue"],"sourcesContent":["```vue\r\n   <template>\r\n     <div class=\"bg-white p-6 rounded-lg shadow-md mb-6\">\r\n       <h2 class=\"text-2xl font-semibold text-gray-800 mb-4\">Asignar Cartones por Lote</h2>\r\n       <div class=\"space-y-4\">\r\n         <div>\r\n           <label class=\"block text-gray-600 mb-1\">Seleccionar Vendedor</label>\r\n           <select\r\n             v-model=\"selectedVendedorId\"\r\n             class=\"w-full p-2 border rounded-md\"\r\n           >\r\n             <option value=\"\" disabled>Selecciona un vendedor</option>\r\n             <option v-for=\"seller in sellers\" :key=\"seller.vendedorId\" :value=\"seller.vendedorId\">\r\n               {{ seller.nombre || seller.vendedorId }}\r\n             </option>\r\n           </select>\r\n         </div>\r\n         <div>\r\n           <label class=\"block text-gray-600 mb-1\">Serial Inicial (ej. LM0001)</label>\r\n           <input\r\n             v-model=\"startSerial\"\r\n             type=\"text\"\r\n             placeholder=\"LM0001\"\r\n             class=\"w-full p-2 border rounded-md\"\r\n           />\r\n         </div>\r\n         <div>\r\n           <label class=\"block text-gray-600 mb-1\">Serial Final (ej. LM0100)</label>\r\n           <input\r\n             v-model=\"endSerial\"\r\n             type=\"text\"\r\n             placeholder=\"LM0100\"\r\n             class=\"w-full p-2 border rounded-md\"\r\n           />\r\n         </div>\r\n         <button\r\n           @click=\"assignCartons\"\r\n           class=\"bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 transition\"\r\n           :disabled=\"!selectedVendedorId || !startSerial || !endSerial\"\r\n         >\r\n           Asignar Lote\r\n         </button>\r\n       </div>\r\n       <p v-if=\"errorMessage\" class=\"text-red-600 mt-2\">{{ errorMessage }}</p>\r\n       <p v-if=\"successMessage\" class=\"text-green-600 mt-2\">{{ successMessage }}</p>\r\n     </div>\r\n   </template>\r\n\r\n   <script>\r\n   import { db } from '../firebase';\r\n   import { doc, getDoc, updateDoc } from 'firebase/firestore';\r\n\r\n   export default {\r\n     data() {\r\n       return {\r\n         sellers: [],\r\n         selectedVendedorId: '',\r\n         startSerial: '',\r\n         endSerial: '',\r\n         errorMessage: '',\r\n         successMessage: ''\r\n       };\r\n     },\r\n     async mounted() {\r\n       console.log('Componente AssignCartons montado');\r\n       await this.loadSellers();\r\n     },\r\n     methods: {\r\n       async loadSellers() {\r\n         try {\r\n           console.log('Iniciando carga de vendedores...');\r\n           const { collection, getDocs } = await import('firebase/firestore');\r\n           const querySnapshot = await getDocs(collection(db, 'vendedores'));\r\n           this.sellers = querySnapshot.docs.map(doc => doc.data());\r\n           console.log('Vendedores cargados en AssignCartons:', this.sellers);\r\n         } catch (error) {\r\n           console.error('Error al cargar los vendedores:', error);\r\n           this.errorMessage = 'Error al cargar los vendedores: ' + error.message;\r\n         }\r\n       },\r\n       async assignCartons() {\r\n         console.log('Función assignCartons ejecutada');\r\n         console.log('Valores del formulario:', {\r\n           selectedVendedorId: this.selectedVendedorId,\r\n           startSerial: this.startSerial,\r\n           endSerial: this.endSerial\r\n         });\r\n\r\n         this.errorMessage = '';\r\n         this.successMessage = '';\r\n\r\n         if (!this.selectedVendedorId || !this.startSerial || !this.endSerial) {\r\n           console.log('Campos incompletos, mostrando mensaje de error');\r\n           this.errorMessage = 'Por favor, completa todos los campos.';\r\n           return;\r\n         }\r\n\r\n         // Validar formato de seriales (LM seguido de números)\r\n         console.log('Validando formato de seriales...');\r\n         const serialRegex = /^LM\\d+$/;\r\n         if (!serialRegex.test(this.startSerial) || !serialRegex.test(this.endSerial)) {\r\n           console.log('Formato de seriales inválido');\r\n           this.errorMessage = 'Los seriales deben comenzar con \"LM\" seguido de números (ej. LM0001).';\r\n           return;\r\n         }\r\n\r\n         // Extraer números de los seriales\r\n         console.log('Extrayendo números de seriales...');\r\n         const startNum = parseInt(this.startSerial.replace('LM', ''), 10);\r\n         const endNum = parseInt(this.endSerial.replace('LM', ''), 10);\r\n         console.log('Números extraídos:', { startNum, endNum });\r\n\r\n         if (isNaN(startNum) || isNaN(endNum) || startNum > endNum) {\r\n           console.log('Validación de rango fallida');\r\n           this.errorMessage = 'El serial inicial debe ser menor o igual al serial final.';\r\n           return;\r\n         }\r\n\r\n         try {\r\n           console.log('Generando lista de seriales...');\r\n           const serials = [];\r\n           for (let i = startNum; i <= endNum; i++) {\r\n             const serial = `LM${i.toString().padStart(4, '0')}`;\r\n             serials.push(serial);\r\n           }\r\n           console.log('Seriales generados:', serials);\r\n\r\n           let allCartones = [];\r\n           let alreadyAssignedSerials = [];\r\n\r\n           // Consultar cada cartón individualmente\r\n           for (const serial of serials) {\r\n             console.log(`Consultando cartón con serial ${serial}...`);\r\n             const cartonRef = doc(db, 'cartones', serial);\r\n             const cartonDoc = await getDoc(cartonRef);\r\n             if (cartonDoc.exists()) {\r\n               const cartonData = cartonDoc.data();\r\n               console.log(`Cartón ${serial} encontrado:`, cartonData);\r\n               if (cartonData.vendedorId && cartonData.vendedorId !== this.selectedVendedorId) {\r\n                 alreadyAssignedSerials.push(serial);\r\n               } else {\r\n                 allCartones.push({ id: cartonDoc.id, data: () => cartonData });\r\n               }\r\n             } else {\r\n               console.log(`Cartón ${serial} no encontrado`);\r\n             }\r\n           }\r\n\r\n           if (allCartones.length === 0 && alreadyAssignedSerials.length === 0) {\r\n             console.log('No se encontraron cartones para el rango:', serials);\r\n             this.errorMessage = 'No se encontraron cartones en el rango especificado.';\r\n             return;\r\n           }\r\n\r\n           if (alreadyAssignedSerials.length > 0) {\r\n             console.log('Cartones ya asignados detectados:', alreadyAssignedSerials);\r\n             this.errorMessage = `Los siguientes cartones ya están asignados a otro vendedor: ${alreadyAssignedSerials.join(', ')}`;\r\n             return;\r\n           }\r\n\r\n           // Actualizar vendedorId para cada cartón\r\n           console.log('Procediendo a asignar cartones...');\r\n           for (const carton of allCartones) {\r\n             console.log(`Asignando cartón ${carton.id} a ${this.selectedVendedorId}`);\r\n             await updateDoc(doc(db, 'cartones', carton.id), {\r\n               vendedorId: this.selectedVendedorId\r\n             });\r\n             console.log(`Cartón ${carton.id} asignado exitosamente`);\r\n           }\r\n\r\n           console.log('Asignación completada para', allCartones.length, 'cartones');\r\n           this.successMessage = 'Cartones asignados';\r\n           this.startSerial = '';\r\n           this.endSerial = '';\r\n           this.selectedVendedorId = '';\r\n         } catch (error) {\r\n           console.error('Error general al asignar cartones:', error);\r\n           this.errorMessage = 'Error al asignar cartones: ' + error.message;\r\n         }\r\n       }\r\n     }\r\n   };\r\n   </script>\r\n\r\n   <style scoped>\r\n   /* Tailwind maneja los estilos */\r\n   </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}