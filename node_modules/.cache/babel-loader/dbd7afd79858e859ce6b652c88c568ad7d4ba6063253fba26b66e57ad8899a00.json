{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"p-6\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_upload_carton = _resolveComponent(\"upload-carton\");\n  const _component_assign_cartons = _resolveComponent(\"assign-cartons\");\n  const _component_carton_list = _resolveComponent(\"carton-list\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"h1\", {\n    class: \"text-3xl font-bold text-gray-800 mb-6\"\n  }, \"Dashboard\", -1 /* HOISTED */)), _createVNode(_component_upload_carton, {\n    onImagesUploaded: $options.handleImagesUploaded,\n    onCheckDuplicates: $options.checkDuplicates\n  }, null, 8 /* PROPS */, [\"onImagesUploaded\", \"onCheckDuplicates\"]), _createVNode(_component_assign_cartons, {\n    onCartonesAsignados: $options.refreshCartones\n  }, null, 8 /* PROPS */, [\"onCartonesAsignados\"]), _createVNode(_component_carton_list)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_createVNode","_component_upload_carton","onImagesUploaded","$options","handleImagesUploaded","onCheckDuplicates","checkDuplicates","_component_assign_cartons","onCartonesAsignados","refreshCartones","_component_carton_list"],"sources":["D:\\Lotweb\\venta-cartones\\src\\views\\HomePage.vue"],"sourcesContent":["```vue\r\n<template>\r\n  <div class=\"p-6\">\r\n    <h1 class=\"text-3xl font-bold text-gray-800 mb-6\">Dashboard</h1>\r\n    <upload-carton @images-uploaded=\"handleImagesUploaded\" @check-duplicates=\"checkDuplicates\" />\r\n    <assign-cartons @cartones-asignados=\"refreshCartones\" />\r\n    <carton-list />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { db } from '../firebase';\r\nimport { collection, addDoc } from 'firebase/firestore';\r\nimport UploadCarton from '../components/UploadCarton.vue';\r\nimport AssignCartons from '../components/AssignCartons.vue';\r\nimport CartonList from '../components/CartonList.vue';\r\n\r\nexport default {\r\n  components: {\r\n    UploadCarton,\r\n    AssignCartons,\r\n    CartonList\r\n  },\r\n  data() {\r\n    return {\r\n      cartones: []\r\n    };\r\n  },\r\n  methods: {\r\n    async handleImagesUploaded(images) {\r\n      try {\r\n        const batch = [];\r\n        for (const { serial, imageUrl } of images) {\r\n          batch.push(addDoc(collection(db, 'cartones'), {\r\n            serial,\r\n            imageUrl,\r\n            estado: 'disponible',\r\n            vendedorId: null,\r\n            createdAt: new Date()\r\n          }));\r\n        }\r\n        await Promise.all(batch);\r\n        console.log('Cartones guardados en Firestore:', images);\r\n        this.refreshCartones();\r\n      } catch (error) {\r\n        console.error('Error al guardar cartones:', error);\r\n        alert('Error al guardar cartones: ' + error.message);\r\n      }\r\n    },\r\n    checkDuplicates({ serials, files }, callback) {\r\n      // Simulación de verificación de duplicados (debería consultar Firestore)\r\n      this.$nextTick(() => {\r\n        const existingSerials = this.cartones.map(c => c.serial); // Simulación\r\n        const nonDuplicates = files.filter(file => !existingSerials.includes(file.name.split('.')[0]));\r\n        callback(nonDuplicates);\r\n      });\r\n    },\r\n    async refreshCartones() {\r\n      this.$refs.cartonList.loadData(); // Suponiendo que CartonList tiene un ref\r\n    }\r\n  },\r\n  async mounted() {\r\n    // Listener en tiempo real para refrescar CartonList\r\n    const unsubscribe = db.collection('cartones').onSnapshot(snapshot => {\r\n      this.cartones = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n      this.$refs.cartonList.loadData(); // Refresca la lista en tiempo real\r\n    }, error => {\r\n      console.error('Error en listener de cartones:', error);\r\n    });\r\n    // Limpieza del listener al desmontar\r\n    this.$once('hook:beforeDestroy', unsubscribe);\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Tailwind maneja los estilos */\r\n</style>\r\n```"],"mappings":";;EAEOA,KAAK,EAAC;AAAK;;;;;uBAAhBC,mBAAA,CAKM,OALNC,UAKM,G,0BAJJC,mBAAA,CAAgE;IAA5DH,KAAK,EAAC;EAAuC,GAAC,WAAS,sBAC3DI,YAAA,CAA6FC,wBAAA;IAA7EC,gBAAe,EAAEC,QAAA,CAAAC,oBAAoB;IAAGC,iBAAgB,EAAEF,QAAA,CAAAG;sEAC1EN,YAAA,CAAwDO,yBAAA;IAAvCC,mBAAkB,EAAEL,QAAA,CAAAM;EAAe,kDACpDT,YAAA,CAAeU,sBAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}