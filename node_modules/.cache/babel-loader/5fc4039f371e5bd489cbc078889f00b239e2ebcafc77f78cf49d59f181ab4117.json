{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"href\"];\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"h2\", null, \"Subir Cartones\", -1 /* HOISTED */)), _createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[0] || (_cache[0] = (...args) => $options.onFileChange && $options.onFileChange(...args)),\n    accept: \"image/*\",\n    multiple: \"\"\n  }, null, 32 /* NEED_HYDRATION */), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.checkAndUploadImages && $options.checkAndUploadImages(...args))\n  }, \"Subir Imágenes\"), $data.uploadedUrls.length > 0 ? (_openBlock(), _createElementBlock(\"p\", _hoisted_1, [_cache[2] || (_cache[2] = _createTextVNode(\" Imágenes subidas: \")), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.uploadedUrls, (url, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index\n    }, [_createElementVNode(\"a\", {\n      href: url,\n      target: \"_blank\"\n    }, _toDisplayString(url), 9 /* TEXT, PROPS */, _hoisted_2)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), $data.duplicates.length > 0 ? (_openBlock(), _createElementBlock(\"p\", _hoisted_3, [_cache[3] || (_cache[3] = _createTextVNode(\" Archivos ya existentes: \")), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.duplicates, duplicate => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: duplicate\n    }, _toDisplayString(duplicate), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","_createElementBlock","_createElementVNode","type","onChange","_cache","args","$options","onFileChange","accept","multiple","onClick","checkAndUploadImages","$data","uploadedUrls","length","_hoisted_1","_createTextVNode","_Fragment","_renderList","url","index","href","target","_hoisted_2","_createCommentVNode","duplicates","_hoisted_3","duplicate","_toDisplayString"],"sources":["D:\\Lotweb\\venta-cartones\\src\\components\\UploadCarton.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>Subir Cartones</h2>\r\n    <input type=\"file\" @change=\"onFileChange\" accept=\"image/*\" multiple />\r\n    <button @click=\"checkAndUploadImages\">Subir Imágenes</button>\r\n    <p v-if=\"uploadedUrls.length > 0\">\r\n      Imágenes subidas:\r\n      <ul>\r\n        <li v-for=\"(url, index) in uploadedUrls\" :key=\"index\">\r\n          <a :href=\"url\" target=\"_blank\">{{ url }}</a>\r\n        </li>\r\n      </ul>\r\n    </p>\r\n    <p v-if=\"duplicates.length > 0\">\r\n      Archivos ya existentes:\r\n      <ul>\r\n        <li v-for=\"duplicate in duplicates\" :key=\"duplicate\">{{ duplicate }}</li>\r\n      </ul>\r\n    </p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      selectedFiles: [],\r\n      uploadedUrls: [],\r\n      duplicates: [], // Almacena los nombres de archivos duplicados\r\n      cloudinaryUrl: 'https://api.cloudinary.com/v1_1/dardyvsja/image/upload',\r\n      uploadPreset: 'cartones_upload'\r\n    };\r\n  },\r\n  methods: {\r\n    onFileChange(event) {\r\n      this.selectedFiles = Array.from(event.target.files);\r\n      this.uploadedUrls = [];\r\n      this.duplicates = [];\r\n    },\r\n    async checkAndUploadImages() {\r\n      if (this.selectedFiles.length === 0) {\r\n        alert('Por favor, selecciona al menos una imagen.');\r\n        return;\r\n      }\r\n\r\n      // Extraer seriales de los archivos\r\n      const serials = this.selectedFiles.map(file => file.name.split('.')[0]);\r\n\r\n      // Emitir seriales para verificar duplicados\r\n      this.$emit('check-duplicates', { serials, files: this.selectedFiles }, async (nonDuplicates) => {\r\n        if (nonDuplicates.length === 0) {\r\n          alert('Todos los archivos seleccionados ya existen.');\r\n          return;\r\n        }\r\n\r\n        this.uploadedUrls = [];\r\n        this.duplicates = this.selectedFiles\r\n          .filter(file => !nonDuplicates.some(nd => nd.name === file.name))\r\n          .map(file => file.name);\r\n\r\n        const uploadPromises = nonDuplicates.map(async (file) => {\r\n          const serial = file.name.split('.')[0];\r\n          const formData = new FormData();\r\n          formData.append('file', file);\r\n          formData.append('upload_preset', this.uploadPreset);\r\n\r\n          try {\r\n            const response = await fetch(this.cloudinaryUrl, {\r\n              method: 'POST',\r\n              body: formData\r\n            });\r\n            const data = await response.json();\r\n            if (data.secure_url) {\r\n              this.uploadedUrls.push(data.secure_url);\r\n              return { serial, imageUrl: data.secure_url };\r\n            } else {\r\n              throw new Error(`Error al subir ${file.name}: ${JSON.stringify(data)}`);\r\n            }\r\n          } catch (error) {\r\n            console.error(`Error al subir ${file.name}:`, error);\r\n            return null;\r\n          }\r\n        });\r\n\r\n        try {\r\n          const results = await Promise.all(uploadPromises);\r\n          const validResults = results.filter(result => result !== null);\r\n          if (validResults.length > 0) {\r\n            this.$emit('images-uploaded', validResults);\r\n            alert(`${validResults.length} de ${nonDuplicates.length} imágenes subidas correctamente.`);\r\n          } else {\r\n            alert('No se subieron imágenes correctamente.');\r\n          }\r\n        } catch (error) {\r\n          console.error('Error en el proceso de subida:', error);\r\n          alert('Error en el proceso de subida: ' + error.message);\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\ndiv {\r\n  margin: 20px;\r\n}\r\ninput, button {\r\n  margin: 10px 0;\r\n}\r\nul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\nli {\r\n  margin: 5px 0;\r\n}\r\n</style>"],"mappings":";;EAAAA,GAAA;AAAA;mBAAA;;EAAAA,GAAA;AAAA;;uBACEC,mBAAA,CAkBM,c,0BAjBJC,mBAAA,CAAuB,YAAnB,gBAAc,sBAClBA,mBAAA,CAAsE;IAA/DC,IAAI,EAAC,MAAM;IAAEC,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;IAAEG,MAAM,EAAC,SAAS;IAACC,QAAQ,EAAR;qCAC3DR,mBAAA,CAA6D;IAApDS,OAAK,EAAAN,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAK,oBAAA,IAAAL,QAAA,CAAAK,oBAAA,IAAAN,IAAA,CAAoB;KAAE,gBAAc,GAC3CO,KAAA,CAAAC,YAAY,CAACC,MAAM,Q,cAA5Bd,mBAAA,CAOI,KAZRe,UAAA,G,0BAAAC,gBAAA,CAKsC,qBAEhC,IAAAf,mBAAA,CAIK,c,kBAHHD,mBAAA,CAEKiB,SAAA,QAVbC,WAAA,CAQmCN,KAAA,CAAAC,YAAY,EAR/C,CAQoBM,GAAG,EAAEC,KAAK;yBAAtBpB,mBAAA,CAEK;MAFqCD,GAAG,EAAEqB;IAAK,IAClDnB,mBAAA,CAA4C;MAAxCoB,IAAI,EAAEF,GAAG;MAAEG,MAAM,EAAC;wBAAYH,GAAG,wBAT/CI,UAAA,E;wCAAAC,mBAAA,gBAaaZ,KAAA,CAAAa,UAAU,CAACX,MAAM,Q,cAA1Bd,mBAAA,CAKI,KAlBR0B,UAAA,G,0BAAAV,gBAAA,CAaoC,2BAE9B,IAAAf,mBAAA,CAEK,c,kBADHD,mBAAA,CAAyEiB,SAAA,QAhBjFC,WAAA,CAgBgCN,KAAA,CAAAa,UAAU,EAAvBE,SAAS;yBAApB3B,mBAAA,CAAyE;MAApCD,GAAG,EAAE4B;IAAS,GAAAC,gBAAA,CAAKD,SAAS;wCAhBzEH,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}