{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { db } from '../firebase';\nimport { collection, query, where, onSnapshot, doc, updateDoc, setDoc } from 'firebase/firestore';\nimport { auth } from '../firebase';\nimport { createUserWithEmailAndPassword } from 'firebase/auth';\nexport default {\n  data() {\n    return {\n      sellers: [],\n      selectedSeller: null,\n      assignedCartons: [],\n      soldCartons: [],\n      availableCartons: [],\n      loading: false,\n      showAddModal: false,\n      newSellerEmail: '',\n      newSellerPassword: '',\n      newSellerUsername: '',\n      unsubscribeSellers: null,\n      unsubscribeCartons: null\n    };\n  },\n  mounted() {\n    this.loadSellers();\n  },\n  beforeUnmount() {\n    if (this.unsubscribeSellers) {\n      this.unsubscribeSellers();\n    }\n    if (this.unsubscribeCartons) {\n      this.unsubscribeCartons();\n    }\n  },\n  methods: {\n    async loadSellers() {\n      this.loading = true;\n      const sellersRef = collection(db, 'vendedores');\n\n      // Usamos onSnapshot para escuchar cambios en tiempo real\n      this.unsubscribeSellers = onSnapshot(sellersRef, async querySnapshot => {\n        this.sellers = await Promise.all(querySnapshot.docs.map(async docSnapshot => {\n          const data = docSnapshot.data();\n          const sellerData = {\n            id: docSnapshot.id,\n            ...data,\n            vendedorId: data.vendedorId || docSnapshot.id\n          };\n          const assignedQuery = query(collection(db, 'cartones'), where('vendedorId', '==', sellerData.id), where('estado', '==', 'asignado'));\n          const assignedSnapshot = await getDocs(assignedQuery);\n          sellerData.assignedCartons = assignedSnapshot.size;\n          return sellerData;\n        }));\n        this.loading = false;\n      }, error => {\n        console.error('Error al escuchar vendedores:', error);\n        alert('Error al cargar vendedores: ' + error.message);\n        this.loading = false;\n      });\n    },\n    async showSellerDetails(seller) {\n      this.selectedSeller = seller;\n      if (!seller.vendedorId) {\n        console.error('Error: vendedorId no está definido para este vendedor:', seller);\n        this.assignedCartons = [];\n        this.soldCartons = [];\n        this.availableCartons = [];\n        return;\n      }\n      await this.loadSellerCartons(seller.vendedorId);\n    },\n    async loadSellerCartons(vendedorId) {\n      try {\n        const assignedQuery = query(collection(db, 'cartones'), where('vendedorId', '==', vendedorId), where('estado', '==', 'asignado'));\n        const soldQuery = query(collection(db, 'cartones'), where('vendedorId', '==', vendedorId), where('estado', '==', 'vendido'));\n        const availableQuery = query(collection(db, 'cartones'), where('vendedorId', '==', null), where('estado', '==', 'disponible'));\n\n        // Escuchar cambios en tiempo real para los cartones asignados\n        this.unsubscribeCartons = onSnapshot(assignedQuery, assignedSnapshot => {\n          this.assignedCartons = assignedSnapshot.docs.map(doc => ({\n            id: doc.id,\n            serial: doc.data().serial\n          }));\n          this.assignedCartons.sort((a, b) => {\n            const serialA = parseInt(a.serial.replace('LM', ''), 10);\n            const serialB = parseInt(b.serial.replace('LM', ''), 10);\n            return serialA - serialB;\n          });\n        });\n\n        // Escuchar cambios en tiempo real para los cartones vendidos\n        onSnapshot(soldQuery, soldSnapshot => {\n          this.soldCartons = soldSnapshot.docs.map(doc => ({\n            id: doc.id,\n            serial: doc.data().serial\n          }));\n          this.soldCartons.sort((a, b) => {\n            const serialA = parseInt(a.serial.replace('LM', ''), 10);\n            const serialB = parseInt(b.serial.replace('LM', ''), 10);\n            return serialA - serialB;\n          });\n        });\n\n        // Escuchar cambios en tiempo real para los cartones disponibles\n        onSnapshot(availableQuery, availableSnapshot => {\n          this.availableCartons = availableSnapshot.docs.map(doc => ({\n            id: doc.id,\n            serial: doc.data().serial\n          }));\n          this.availableCartons.sort((a, b) => {\n            const serialA = parseInt(a.serial.replace('LM', ''), 10);\n            const serialB = parseInt(b.serial.replace('LM', ''), 10);\n            return serialA - serialB;\n          });\n        });\n      } catch (error) {\n        console.error('Error al cargar los cartones del vendedor:', error);\n        this.assignedCartons = [];\n        this.soldCartons = [];\n        this.availableCartons = [];\n      }\n    },\n    async sellCarton(cartonId) {\n      try {\n        const cartonRef = doc(db, 'cartones', cartonId);\n        await updateDoc(cartonRef, {\n          estado: 'vendido'\n        });\n        const sellerRef = doc(db, 'vendedores', this.selectedSeller.id);\n        const currentSaldo = this.selectedSeller.saldoGenerado || 0;\n        await updateDoc(sellerRef, {\n          saldoGenerado: currentSaldo + 5\n        });\n        this.selectedSeller.saldoGenerado = currentSaldo + 5;\n        await this.loadSellerCartons(this.selectedSeller.vendedorId);\n      } catch (error) {\n        console.error('Error al vender el cartón:', error);\n        alert('Error al vender el cartón: ' + error.message);\n      }\n    },\n    async addSeller() {\n      if (!this.newSellerEmail || !this.newSellerPassword || !this.newSellerUsername) {\n        alert('Por favor, complete todos los campos: Correo, Clave y Nombre de Usuario.');\n        return;\n      }\n      try {\n        const userCredential = await createUserWithEmailAndPassword(auth, this.newSellerEmail, this.newSellerPassword);\n        const user = userCredential.user;\n        await setDoc(doc(db, 'vendedores', user.uid), {\n          email: this.newSellerEmail,\n          nombre: this.newSellerUsername,\n          saldoGenerado: 0\n        });\n        alert('Vendedor agregado exitosamente');\n        this.newSellerEmail = '';\n        this.newSellerPassword = '';\n        this.newSellerUsername = '';\n        this.showAddModal = false;\n        await this.loadSellers();\n      } catch (error) {\n        console.error('Error al agregar vendedor:', error);\n        alert('Error al agregar vendedor: ' + error.message);\n      }\n    }\n  }\n};","map":{"version":3,"names":["db","collection","query","where","onSnapshot","doc","updateDoc","setDoc","auth","createUserWithEmailAndPassword","data","sellers","selectedSeller","assignedCartons","soldCartons","availableCartons","loading","showAddModal","newSellerEmail","newSellerPassword","newSellerUsername","unsubscribeSellers","unsubscribeCartons","mounted","loadSellers","beforeUnmount","methods","sellersRef","querySnapshot","Promise","all","docs","map","docSnapshot","sellerData","id","vendedorId","assignedQuery","assignedSnapshot","getDocs","size","error","console","alert","message","showSellerDetails","seller","loadSellerCartons","soldQuery","availableQuery","serial","sort","a","b","serialA","parseInt","replace","serialB","soldSnapshot","availableSnapshot","sellCarton","cartonId","cartonRef","estado","sellerRef","currentSaldo","saldoGenerado","addSeller","userCredential","user","uid","email","nombre"],"sources":["D:\\Lotweb\\venta-cartones\\src\\components\\SellerList.vue"],"sourcesContent":["<template>\r\n  <div class=\"bg-white p-6 rounded-lg shadow-md\">\r\n    <div class=\"flex justify-between items-center mb-4\">\r\n      <h2 class=\"text-xl font-semibold text-gray-800\">Lista de Vendedores</h2>\r\n      <button\r\n        @click=\"showAddModal = true\"\r\n        class=\"bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition\"\r\n      >\r\n        Agregar Vendedor\r\n      </button>\r\n    </div>\r\n    <div v-if=\"loading\" class=\"text-center text-gray-600\">Cargando vendedores...</div>\r\n    <div v-else-if=\"sellers.length === 0\" class=\"text-gray-600\">No hay vendedores registrados.</div>\r\n    <div v-else class=\"space-y-4\">\r\n      <div v-for=\"seller in sellers\" :key=\"seller.id\" class=\"border p-4 rounded-md flex justify-between items-center\">\r\n        <div>\r\n          <p class=\"text-lg font-medium text-gray-700\">{{ seller.nombre || seller.id || 'Sin nombre' }}</p>\r\n          <p class=\"text-sm text-gray-500\">Saldo Generado: ${{ seller.saldoGenerado || 0 }}</p>\r\n          <p class=\"text-sm text-gray-500\">Cartones Asignados: {{ seller.assignedCartons }}</p>\r\n        </div>\r\n        <button\r\n          @click=\"showSellerDetails(seller)\"\r\n          class=\"bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition\"\r\n        >\r\n          Ver Detalles\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Modal para mostrar detalles del vendedor -->\r\n    <div v-if=\"selectedSeller\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center\">\r\n      <div class=\"bg-white p-6 rounded-lg shadow-lg max-w-md w-full\">\r\n        <h3 class=\"text-xl font-semibold text-gray-800 mb-4\">{{ selectedSeller.nombre || selectedSeller.id || 'Sin nombre' }}</h3>\r\n        <div class=\"space-y-2\">\r\n          <p><strong>Cartones Asignados:</strong> {{ assignedCartons.length }}</p>\r\n          <p v-if=\"assignedCartons.length === 0\">No hay cartones asignados.</p>\r\n          <div v-else>\r\n            <ul class=\"list-disc pl-5\">\r\n              <li v-for=\"carton in assignedCartons\" :key=\"carton.id\">\r\n                {{ carton.serial }}\r\n                <button\r\n                  @click=\"sellCarton(carton.id)\"\r\n                  class=\"ml-2 bg-green-500 text-white px-2 py-1 rounded-md hover:bg-green-600 transition\"\r\n                >\r\n                  Vender\r\n                </button>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <p><strong>Cartones Vendidos:</strong> {{ soldCartons.length }}</p>\r\n          <p><strong>Cartones Disponibles (Global):</strong> {{ availableCartons.length }}</p>\r\n          <p><strong>Saldo Generado:</strong> ${{ selectedSeller.saldoGenerado || 0 }}</p>\r\n        </div>\r\n        <button\r\n          @click=\"selectedSeller = null\"\r\n          class=\"bg-indigo-600 text-white px-4 py-2 rounded-md mt-4 hover:bg-indigo-700 transition\"\r\n        >\r\n          Cerrar\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Modal para Agregar Vendedor -->\r\n    <div v-if=\"showAddModal\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n      <div class=\"bg-white p-6 rounded-lg shadow-lg max-w-md w-full\">\r\n        <h3 class=\"text-xl font-semibold text-gray-800 mb-4\">Agregar Nuevo Vendedor</h3>\r\n        <form @submit.prevent=\"addSeller\" class=\"space-y-4\">\r\n          <div>\r\n            <label for=\"sellerEmail\" class=\"block text-sm font-medium text-gray-700\">Correo</label>\r\n            <input\r\n              v-model=\"newSellerEmail\"\r\n              id=\"sellerEmail\"\r\n              type=\"email\"\r\n              required\r\n              class=\"mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-300\"\r\n              placeholder=\"vendedor1@example.com\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label for=\"sellerPassword\" class=\"block text-sm font-medium text-gray-700\">Clave</label>\r\n            <input\r\n              v-model=\"newSellerPassword\"\r\n              id=\"sellerPassword\"\r\n              type=\"password\"\r\n              required\r\n              class=\"mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-300\"\r\n              placeholder=\"Ingrese la clave\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label for=\"sellerUsername\" class=\"block text-sm font-medium text-gray-700\">Nombre de Usuario</label>\r\n            <input\r\n              v-model=\"newSellerUsername\"\r\n              id=\"sellerUsername\"\r\n              type=\"text\"\r\n              required\r\n              class=\"mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-300\"\r\n              placeholder=\"Nombre del vendedor\"\r\n            />\r\n          </div>\r\n          <div class=\"flex justify-end space-x-4\">\r\n            <button\r\n              type=\"button\"\r\n              @click=\"showAddModal = false\"\r\n              class=\"bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600 transition\"\r\n            >\r\n              Cancelar\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              class=\"bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition\"\r\n            >\r\n              Agregar\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { db } from '../firebase';\r\nimport { collection, query, where, onSnapshot, doc, updateDoc, setDoc } from 'firebase/firestore';\r\nimport { auth } from '../firebase';\r\nimport { createUserWithEmailAndPassword } from 'firebase/auth';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      sellers: [],\r\n      selectedSeller: null,\r\n      assignedCartons: [],\r\n      soldCartons: [],\r\n      availableCartons: [],\r\n      loading: false,\r\n      showAddModal: false,\r\n      newSellerEmail: '',\r\n      newSellerPassword: '',\r\n      newSellerUsername: '',\r\n      unsubscribeSellers: null,\r\n      unsubscribeCartons: null\r\n    };\r\n  },\r\n  mounted() {\r\n    this.loadSellers();\r\n  },\r\n  beforeUnmount() {\r\n    if (this.unsubscribeSellers) {\r\n      this.unsubscribeSellers();\r\n    }\r\n    if (this.unsubscribeCartons) {\r\n      this.unsubscribeCartons();\r\n    }\r\n  },\r\n  methods: {\r\n    async loadSellers() {\r\n      this.loading = true;\r\n      const sellersRef = collection(db, 'vendedores');\r\n\r\n      // Usamos onSnapshot para escuchar cambios en tiempo real\r\n      this.unsubscribeSellers = onSnapshot(sellersRef, async (querySnapshot) => {\r\n        this.sellers = await Promise.all(querySnapshot.docs.map(async (docSnapshot) => {\r\n          const data = docSnapshot.data();\r\n          const sellerData = {\r\n            id: docSnapshot.id,\r\n            ...data,\r\n            vendedorId: data.vendedorId || docSnapshot.id\r\n          };\r\n          const assignedQuery = query(\r\n            collection(db, 'cartones'),\r\n            where('vendedorId', '==', sellerData.id),\r\n            where('estado', '==', 'asignado')\r\n          );\r\n          const assignedSnapshot = await getDocs(assignedQuery);\r\n          sellerData.assignedCartons = assignedSnapshot.size;\r\n          return sellerData;\r\n        }));\r\n        this.loading = false;\r\n      }, (error) => {\r\n        console.error('Error al escuchar vendedores:', error);\r\n        alert('Error al cargar vendedores: ' + error.message);\r\n        this.loading = false;\r\n      });\r\n    },\r\n    async showSellerDetails(seller) {\r\n      this.selectedSeller = seller;\r\n      if (!seller.vendedorId) {\r\n        console.error('Error: vendedorId no está definido para este vendedor:', seller);\r\n        this.assignedCartons = [];\r\n        this.soldCartons = [];\r\n        this.availableCartons = [];\r\n        return;\r\n      }\r\n      await this.loadSellerCartons(seller.vendedorId);\r\n    },\r\n    async loadSellerCartons(vendedorId) {\r\n      try {\r\n        const assignedQuery = query(\r\n          collection(db, 'cartones'),\r\n          where('vendedorId', '==', vendedorId),\r\n          where('estado', '==', 'asignado')\r\n        );\r\n        const soldQuery = query(\r\n          collection(db, 'cartones'),\r\n          where('vendedorId', '==', vendedorId),\r\n          where('estado', '==', 'vendido')\r\n        );\r\n        const availableQuery = query(\r\n          collection(db, 'cartones'),\r\n          where('vendedorId', '==', null),\r\n          where('estado', '==', 'disponible')\r\n        );\r\n\r\n        // Escuchar cambios en tiempo real para los cartones asignados\r\n        this.unsubscribeCartons = onSnapshot(assignedQuery, (assignedSnapshot) => {\r\n          this.assignedCartons = assignedSnapshot.docs.map(doc => ({\r\n            id: doc.id,\r\n            serial: doc.data().serial\r\n          }));\r\n          this.assignedCartons.sort((a, b) => {\r\n            const serialA = parseInt(a.serial.replace('LM', ''), 10);\r\n            const serialB = parseInt(b.serial.replace('LM', ''), 10);\r\n            return serialA - serialB;\r\n          });\r\n        });\r\n\r\n        // Escuchar cambios en tiempo real para los cartones vendidos\r\n        onSnapshot(soldQuery, (soldSnapshot) => {\r\n          this.soldCartons = soldSnapshot.docs.map(doc => ({\r\n            id: doc.id,\r\n            serial: doc.data().serial\r\n          }));\r\n          this.soldCartons.sort((a, b) => {\r\n            const serialA = parseInt(a.serial.replace('LM', ''), 10);\r\n            const serialB = parseInt(b.serial.replace('LM', ''), 10);\r\n            return serialA - serialB;\r\n          });\r\n        });\r\n\r\n        // Escuchar cambios en tiempo real para los cartones disponibles\r\n        onSnapshot(availableQuery, (availableSnapshot) => {\r\n          this.availableCartons = availableSnapshot.docs.map(doc => ({\r\n            id: doc.id,\r\n            serial: doc.data().serial\r\n          }));\r\n          this.availableCartons.sort((a, b) => {\r\n            const serialA = parseInt(a.serial.replace('LM', ''), 10);\r\n            const serialB = parseInt(b.serial.replace('LM', ''), 10);\r\n            return serialA - serialB;\r\n          });\r\n        });\r\n      } catch (error) {\r\n        console.error('Error al cargar los cartones del vendedor:', error);\r\n        this.assignedCartons = [];\r\n        this.soldCartons = [];\r\n        this.availableCartons = [];\r\n      }\r\n    },\r\n    async sellCarton(cartonId) {\r\n      try {\r\n        const cartonRef = doc(db, 'cartones', cartonId);\r\n        await updateDoc(cartonRef, {\r\n          estado: 'vendido'\r\n        });\r\n\r\n        const sellerRef = doc(db, 'vendedores', this.selectedSeller.id);\r\n        const currentSaldo = this.selectedSeller.saldoGenerado || 0;\r\n        await updateDoc(sellerRef, {\r\n          saldoGenerado: currentSaldo + 5\r\n        });\r\n\r\n        this.selectedSeller.saldoGenerado = currentSaldo + 5;\r\n        await this.loadSellerCartons(this.selectedSeller.vendedorId);\r\n      } catch (error) {\r\n        console.error('Error al vender el cartón:', error);\r\n        alert('Error al vender el cartón: ' + error.message);\r\n      }\r\n    },\r\n    async addSeller() {\r\n      if (!this.newSellerEmail || !this.newSellerPassword || !this.newSellerUsername) {\r\n        alert('Por favor, complete todos los campos: Correo, Clave y Nombre de Usuario.');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const userCredential = await createUserWithEmailAndPassword(auth, this.newSellerEmail, this.newSellerPassword);\r\n        const user = userCredential.user;\r\n        await setDoc(doc(db, 'vendedores', user.uid), {\r\n          email: this.newSellerEmail,\r\n          nombre: this.newSellerUsername,\r\n          saldoGenerado: 0\r\n        });\r\n        alert('Vendedor agregado exitosamente');\r\n        this.newSellerEmail = '';\r\n        this.newSellerPassword = '';\r\n        this.newSellerUsername = '';\r\n        this.showAddModal = false;\r\n        await this.loadSellers();\r\n      } catch (error) {\r\n        console.error('Error al agregar vendedor:', error);\r\n        alert('Error al agregar vendedor: ' + error.message);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Tailwind maneja los estilos */\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}