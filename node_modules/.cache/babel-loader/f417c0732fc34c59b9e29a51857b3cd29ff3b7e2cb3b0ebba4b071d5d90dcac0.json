{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"bg-white p-6 rounded-lg shadow-md\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"text-green-500\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"text-red-500\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[1] || (_cache[1] = _createElementVNode(\"h2\", {\n    class: \"text-2xl font-semibold text-gray-800 mb-4\"\n  }, \"Subir Cartones\", -1 /* HOISTED */)), _createElementVNode(\"input\", {\n    type: \"file\",\n    multiple: \"\",\n    onChange: _cache[0] || (_cache[0] = (...args) => $options.handleFileUpload && $options.handleFileUpload(...args)),\n    accept: \"image/*\",\n    class: \"mb-4\"\n  }, null, 32 /* NEED_HYDRATION */), $data.uploadMessage ? (_openBlock(), _createElementBlock(\"p\", _hoisted_2, _toDisplayString($data.uploadMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), $data.errorMessage ? (_openBlock(), _createElementBlock(\"p\", _hoisted_3, _toDisplayString($data.errorMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","type","multiple","onChange","_cache","args","$options","handleFileUpload","accept","$data","uploadMessage","_hoisted_2","_toDisplayString","_createCommentVNode","errorMessage","_hoisted_3"],"sources":["D:\\Lotweb\\venta-cartones\\src\\components\\UploadCarton.vue"],"sourcesContent":["```vue\r\n<template>\r\n  <div class=\"bg-white p-6 rounded-lg shadow-md\">\r\n    <h2 class=\"text-2xl font-semibold text-gray-800 mb-4\">Subir Cartones</h2>\r\n    <input type=\"file\" multiple @change=\"handleFileUpload\" accept=\"image/*\" class=\"mb-4\" />\r\n    <p v-if=\"uploadMessage\" class=\"text-green-500\">{{ uploadMessage }}</p>\r\n    <p v-if=\"errorMessage\" class=\"text-red-500\">{{ errorMessage }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { db } from '../firebase';\r\nimport { collection, query, where, getDocs, addDoc } from 'firebase/firestore';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      uploadMessage: '',\r\n      errorMessage: ''\r\n    };\r\n  },\r\n  methods: {\r\n    async handleFileUpload(event) {\r\n      const files = Array.from(event.target.files);\r\n      if (files.length === 0) return;\r\n\r\n      const serials = files.map(file => file.name.split('.')[0]);\r\n      const images = [];\r\n\r\n      try {\r\n        // Verificar duplicados\r\n        const nonDuplicates = await this.checkDuplicates({ serials, files });\r\n        if (nonDuplicates.length === 0) {\r\n          this.errorMessage = 'Todos los cartones seleccionados ya existen.';\r\n          return;\r\n        }\r\n\r\n        // Simular URLs de imágenes (en producción, subirías las imágenes a Firebase Storage)\r\n        for (const file of nonDuplicates) {\r\n          const serial = file.name.split('.')[0];\r\n          const imageUrl = URL.createObjectURL(file); // Simulación de URL\r\n          images.push({ serial, imageUrl });\r\n        }\r\n\r\n        // Guardar en Firestore\r\n        await this.handleImagesUploaded(images);\r\n        this.uploadMessage = 'Cartones subidos exitosamente.';\r\n        this.errorMessage = '';\r\n      } catch (error) {\r\n        this.errorMessage = 'Error al subir los cartones: ' + error.message;\r\n        this.uploadMessage = '';\r\n      }\r\n    },\r\n    async checkDuplicates({ serials, files }) {\r\n      try {\r\n        const cartonesRef = collection(db, 'cartones');\r\n        const q = query(cartonesRef, where('serial', 'in', serials));\r\n        const querySnapshot = await getDocs(q);\r\n        const existingSerials = querySnapshot.docs.map(doc => doc.data().serial);\r\n        const nonDuplicates = files.filter(file => !existingSerials.includes(file.name.split('.')[0]));\r\n        return nonDuplicates;\r\n      } catch (error) {\r\n        console.error('Error al verificar duplicados:', error);\r\n        throw error;\r\n      }\r\n    },\r\n    async handleImagesUploaded(images) {\r\n      try {\r\n        for (const image of images) {\r\n          const docRef = await addDoc(collection(db, 'cartones'), {\r\n            serial: image.serial,\r\n            imageUrl: image.imageUrl,\r\n            estado: 'disponible',\r\n            createdAt: new Date(),\r\n            vendedorId: null\r\n          });\r\n          console.log(`Cartón ${image.serial} guardado con ID:`, docRef.id);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al guardar los cartones:', error);\r\n        throw error;\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Tailwind maneja los estilos */\r\n</style>"],"mappings":";;EAEOA,KAAK,EAAC;AAAmC;;EAFhDC,GAAA;EAK4BD,KAAK,EAAC;;;EALlCC,GAAA;EAM2BD,KAAK,EAAC;;;uBAJ/BE,mBAAA,CAKM,OALNC,UAKM,G,0BAJJC,mBAAA,CAAyE;IAArEJ,KAAK,EAAC;EAA2C,GAAC,gBAAc,sBACpEI,mBAAA,CAAuF;IAAhFC,IAAI,EAAC,MAAM;IAACC,QAAQ,EAAR,EAAQ;IAAEC,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,gBAAA,IAAAD,QAAA,CAAAC,gBAAA,IAAAF,IAAA,CAAgB;IAAEG,MAAM,EAAC,SAAS;IAACZ,KAAK,EAAC;qCACrEa,KAAA,CAAAC,aAAa,I,cAAtBZ,mBAAA,CAAsE,KAAtEa,UAAsE,EAAAC,gBAAA,CAApBH,KAAA,CAAAC,aAAa,oBALnEG,mBAAA,gBAMaJ,KAAA,CAAAK,YAAY,I,cAArBhB,mBAAA,CAAkE,KAAlEiB,UAAkE,EAAAH,gBAAA,CAAnBH,KAAA,CAAAK,YAAY,oBAN/DD,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}