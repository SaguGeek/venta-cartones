{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { db } from '../firebase';\nimport { collection, query, where, getDocs, doc, updateDoc } from 'firebase/firestore';\nexport default {\n  data() {\n    return {\n      sellers: [],\n      availableCartons: [],\n      selectedSeller: null,\n      selectedCartons: []\n    };\n  },\n  async mounted() {\n    await this.loadSellers();\n    await this.loadAvailableCartons();\n  },\n  methods: {\n    async loadSellers() {\n      try {\n        console.log('Cargando vendedores...');\n        const querySnapshot = await getDocs(collection(db, 'vendedores'));\n        this.sellers = querySnapshot.docs.map(docSnapshot => {\n          const data = docSnapshot.data();\n          return {\n            id: docSnapshot.id,\n            ...data,\n            vendedorId: data.vendedorId || docSnapshot.id\n          };\n        });\n        console.log('Vendedores cargados:', this.sellers);\n      } catch (error) {\n        console.error('Error al cargar los vendedores:', error);\n      }\n    },\n    async loadAvailableCartons() {\n      try {\n        console.log('Cargando cartones disponibles...');\n        const q = query(collection(db, 'cartones'), where('vendedorId', '==', null), where('estado', '==', 'disponible'));\n        const querySnapshot = await getDocs(q);\n        this.availableCartons = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          serial: doc.data().serial\n        }));\n        console.log('Cartones disponibles:', this.availableCartons);\n      } catch (error) {\n        console.error('Error al cargar cartones disponibles:', error);\n      }\n    },\n    async assignCartons() {\n      if (!this.selectedSeller || this.selectedCartons.length === 0) return;\n      try {\n        console.log('Asignando cartones a vendedor:', this.selectedSeller, 'Cartones:', this.selectedCartons);\n        const batch = [];\n        for (const cartonId of this.selectedCartons) {\n          const cartonRef = doc(db, 'cartones', cartonId);\n          batch.push(updateDoc(cartonRef, {\n            vendedorId: this.selectedSeller,\n            estado: 'asignado' // Actualizar estado a \"asignado\"\n          }));\n        }\n        await Promise.all(batch);\n        console.log('Cartones asignados exitosamente');\n        alert('Cartones asignados exitosamente');\n        this.selectedCartons = [];\n        await this.loadAvailableCartons(); // Recargar cartones disponibles\n      } catch (error) {\n        console.error('Error al asignar cartones:', error);\n        alert('Error al asignar cartones: ' + error.message);\n      }\n    }\n  }\n};","map":{"version":3,"names":["db","collection","query","where","getDocs","doc","updateDoc","data","sellers","availableCartons","selectedSeller","selectedCartons","mounted","loadSellers","loadAvailableCartons","methods","console","log","querySnapshot","docs","map","docSnapshot","id","vendedorId","error","q","serial","assignCartons","length","batch","cartonId","cartonRef","push","estado","Promise","all","alert","message"],"sources":["D:\\Lotweb\\venta-cartones\\src\\components\\AssignCartons.vue"],"sourcesContent":["```vue\r\n   <template>\r\n     <div class=\"bg-white p-6 rounded-lg shadow-md\">\r\n       <h2 class=\"text-2xl font-semibold text-gray-800 mb-4\">Asignar Cartones por Lote</h2>\r\n       <form @submit.prevent=\"assignCartons\">\r\n         <div class=\"mb-4\">\r\n           <label for=\"seller\" class=\"block text-sm font-medium text-gray-700\">Seleccionar Vendedor</label>\r\n           <select v-model=\"selectedSeller\" id=\"seller\" class=\"mt-1 block w-full border-gray-300 rounded-md shadow-sm\">\r\n             <option v-for=\"seller in sellers\" :key=\"seller.id\" :value=\"seller.id\">{{ seller.nombre || seller.id }}</option>\r\n           </select>\r\n         </div>\r\n         <div class=\"mb-4\">\r\n           <label class=\"block text-sm font-medium text-gray-700\">Seleccionar Cartones</label>\r\n           <div class=\"mt-2 space-y-2\">\r\n             <label v-for=\"carton in availableCartons\" :key=\"carton.id\" class=\"flex items-center\">\r\n               <input type=\"checkbox\" v-model=\"selectedCartons\" :value=\"carton.id\" class=\"mr-2\">\r\n               {{ carton.serial }}\r\n             </label>\r\n           </div>\r\n         </div>\r\n         <button type=\"submit\" class=\"bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition\" :disabled=\"!selectedSeller || selectedCartons.length === 0\">\r\n           Asignar Seleccionados\r\n         </button>\r\n         <p v-if=\"!selectedSeller || selectedCartons.length === 0\" class=\"text-yellow-600 mt-2\">Por favor, selecciona un vendedor y al menos un cart√≥n.</p>\r\n       </form>\r\n     </div>\r\n   </template>\r\n\r\n   <script>\r\n   import { db } from '../firebase';\r\n   import { collection, query, where, getDocs, doc, updateDoc } from 'firebase/firestore';\r\n\r\n   export default {\r\n     data() {\r\n       return {\r\n         sellers: [],\r\n         availableCartons: [],\r\n         selectedSeller: null,\r\n         selectedCartons: []\r\n       };\r\n     },\r\n     async mounted() {\r\n       await this.loadSellers();\r\n       await this.loadAvailableCartons();\r\n     },\r\n     methods: {\r\n       async loadSellers() {\r\n         try {\r\n           console.log('Cargando vendedores...');\r\n           const querySnapshot = await getDocs(collection(db, 'vendedores'));\r\n           this.sellers = querySnapshot.docs.map(docSnapshot => {\r\n             const data = docSnapshot.data();\r\n             return {\r\n               id: docSnapshot.id,\r\n               ...data,\r\n               vendedorId: data.vendedorId || docSnapshot.id\r\n             };\r\n           });\r\n           console.log('Vendedores cargados:', this.sellers);\r\n         } catch (error) {\r\n           console.error('Error al cargar los vendedores:', error);\r\n         }\r\n       },\r\n       async loadAvailableCartons() {\r\n         try {\r\n           console.log('Cargando cartones disponibles...');\r\n           const q = query(\r\n             collection(db, 'cartones'),\r\n             where('vendedorId', '==', null),\r\n             where('estado', '==', 'disponible')\r\n           );\r\n           const querySnapshot = await getDocs(q);\r\n           this.availableCartons = querySnapshot.docs.map(doc => ({\r\n             id: doc.id,\r\n             serial: doc.data().serial\r\n           }));\r\n           console.log('Cartones disponibles:', this.availableCartons);\r\n         } catch (error) {\r\n           console.error('Error al cargar cartones disponibles:', error);\r\n         }\r\n       },\r\n       async assignCartons() {\r\n         if (!this.selectedSeller || this.selectedCartons.length === 0) return;\r\n\r\n         try {\r\n           console.log('Asignando cartones a vendedor:', this.selectedSeller, 'Cartones:', this.selectedCartons);\r\n           const batch = [];\r\n           for (const cartonId of this.selectedCartons) {\r\n             const cartonRef = doc(db, 'cartones', cartonId);\r\n             batch.push(updateDoc(cartonRef, {\r\n               vendedorId: this.selectedSeller,\r\n               estado: 'asignado' // Actualizar estado a \"asignado\"\r\n             }));\r\n           }\r\n           await Promise.all(batch);\r\n           console.log('Cartones asignados exitosamente');\r\n           alert('Cartones asignados exitosamente');\r\n           this.selectedCartons = [];\r\n           await this.loadAvailableCartons(); // Recargar cartones disponibles\r\n         } catch (error) {\r\n           console.error('Error al asignar cartones:', error);\r\n           alert('Error al asignar cartones: ' + error.message);\r\n         }\r\n       }\r\n     }\r\n   };\r\n   </script>\r\n\r\n   <style scoped>\r\n   /* Tailwind maneja los estilos */\r\n   </style>\r\n   ```"],"mappings":";;;AA6BG,SAASA,EAAC,QAAS,aAAa;AAChC,SAASC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,EAAEC,GAAG,EAAEC,SAAQ,QAAS,oBAAoB;AAEtF,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,EAAE;MACXC,gBAAgB,EAAE,EAAE;MACpBC,cAAc,EAAE,IAAI;MACpBC,eAAe,EAAE;IACnB,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACC,WAAW,CAAC,CAAC;IACxB,MAAM,IAAI,CAACC,oBAAoB,CAAC,CAAC;EACnC,CAAC;EACDC,OAAO,EAAE;IACP,MAAMF,WAAWA,CAAA,EAAG;MAClB,IAAI;QACFG,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;QACrC,MAAMC,aAAY,GAAI,MAAMd,OAAO,CAACH,UAAU,CAACD,EAAE,EAAE,YAAY,CAAC,CAAC;QACjE,IAAI,CAACQ,OAAM,GAAIU,aAAa,CAACC,IAAI,CAACC,GAAG,CAACC,WAAU,IAAK;UACnD,MAAMd,IAAG,GAAIc,WAAW,CAACd,IAAI,CAAC,CAAC;UAC/B,OAAO;YACLe,EAAE,EAAED,WAAW,CAACC,EAAE;YAClB,GAAGf,IAAI;YACPgB,UAAU,EAAEhB,IAAI,CAACgB,UAAS,IAAKF,WAAW,CAACC;UAC7C,CAAC;QACH,CAAC,CAAC;QACFN,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE,IAAI,CAACT,OAAO,CAAC;MACnD,EAAE,OAAOgB,KAAK,EAAE;QACdR,OAAO,CAACQ,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACzD;IACF,CAAC;IACD,MAAMV,oBAAoBA,CAAA,EAAG;MAC3B,IAAI;QACFE,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;QAC/C,MAAMQ,CAAA,GAAIvB,KAAK,CACbD,UAAU,CAACD,EAAE,EAAE,UAAU,CAAC,EAC1BG,KAAK,CAAC,YAAY,EAAE,IAAI,EAAE,IAAI,CAAC,EAC/BA,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAE,YAAY,CACpC,CAAC;QACD,MAAMe,aAAY,GAAI,MAAMd,OAAO,CAACqB,CAAC,CAAC;QACtC,IAAI,CAAChB,gBAAe,GAAIS,aAAa,CAACC,IAAI,CAACC,GAAG,CAACf,GAAE,KAAM;UACrDiB,EAAE,EAAEjB,GAAG,CAACiB,EAAE;UACVI,MAAM,EAAErB,GAAG,CAACE,IAAI,CAAC,CAAC,CAACmB;QACrB,CAAC,CAAC,CAAC;QACHV,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE,IAAI,CAACR,gBAAgB,CAAC;MAC7D,EAAE,OAAOe,KAAK,EAAE;QACdR,OAAO,CAACQ,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC/D;IACF,CAAC;IACD,MAAMG,aAAaA,CAAA,EAAG;MACpB,IAAI,CAAC,IAAI,CAACjB,cAAa,IAAK,IAAI,CAACC,eAAe,CAACiB,MAAK,KAAM,CAAC,EAAE;MAE/D,IAAI;QACFZ,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAE,IAAI,CAACP,cAAc,EAAE,WAAW,EAAE,IAAI,CAACC,eAAe,CAAC;QACrG,MAAMkB,KAAI,GAAI,EAAE;QAChB,KAAK,MAAMC,QAAO,IAAK,IAAI,CAACnB,eAAe,EAAE;UAC3C,MAAMoB,SAAQ,GAAI1B,GAAG,CAACL,EAAE,EAAE,UAAU,EAAE8B,QAAQ,CAAC;UAC/CD,KAAK,CAACG,IAAI,CAAC1B,SAAS,CAACyB,SAAS,EAAE;YAC9BR,UAAU,EAAE,IAAI,CAACb,cAAc;YAC/BuB,MAAM,EAAE,UAAS,CAAE;UACrB,CAAC,CAAC,CAAC;QACL;QACA,MAAMC,OAAO,CAACC,GAAG,CAACN,KAAK,CAAC;QACxBb,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;QAC9CmB,KAAK,CAAC,iCAAiC,CAAC;QACxC,IAAI,CAACzB,eAAc,GAAI,EAAE;QACzB,MAAM,IAAI,CAACG,oBAAoB,CAAC,CAAC,EAAE;MACrC,EAAE,OAAOU,KAAK,EAAE;QACdR,OAAO,CAACQ,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDY,KAAK,CAAC,6BAA4B,GAAIZ,KAAK,CAACa,OAAO,CAAC;MACtD;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}