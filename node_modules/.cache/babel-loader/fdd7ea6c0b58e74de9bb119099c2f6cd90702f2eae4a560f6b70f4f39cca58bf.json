{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  class: \"space-y-4\"\n};\nconst _hoisted_2 = [\"value\"];\nconst _hoisted_3 = {\n  class: \"flex flex-col sm:flex-row sm:space-x-4 space-y-4 sm:space-y-0\"\n};\nconst _hoisted_4 = {\n  class: \"w-full sm:w-1/2\"\n};\nconst _hoisted_5 = [\"value\"];\nconst _hoisted_6 = {\n  class: \"w-full sm:w-1/2\"\n};\nconst _hoisted_7 = [\"value\"];\nconst _hoisted_8 = [\"disabled\"];\nconst _hoisted_9 = {\n  key: 0,\n  class: \"text-yellow-600 text-sm text-center\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[10] || (_cache[10] = _createElementVNode(\"h2\", {\n    class: \"text-xl font-semibold text-gray-800 mb-4\"\n  }, \"Asignar Cartones por Lote\", -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[3] || (_cache[3] = _withModifiers((...args) => $options.assignCartons && $options.assignCartons(...args), [\"prevent\"])),\n    class: \"space-y-4\"\n  }, [_createCommentVNode(\" Selección de Vendedor \"), _createElementVNode(\"div\", null, [_cache[5] || (_cache[5] = _createElementVNode(\"label\", {\n    for: \"seller\",\n    class: \"block text-sm font-medium text-gray-700\"\n  }, \"Seleccionar Vendedor\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedSeller = $event),\n    id: \"seller\",\n    class: \"mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-300\"\n  }, [_cache[4] || (_cache[4] = _createElementVNode(\"option\", {\n    value: \"\",\n    disabled: \"\"\n  }, \"Selecciona un vendedor\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.sellers, seller => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: seller.id,\n      value: seller.id\n    }, _toDisplayString(seller.nombre || seller.id), 9 /* TEXT, PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedSeller]])]), _createCommentVNode(\" Rango de Cartones Disponibles \"), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_cache[7] || (_cache[7] = _createElementVNode(\"label\", {\n    for: \"fromCarton\",\n    class: \"block text-sm font-medium text-gray-700\"\n  }, \"Desde\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.fromCarton = $event),\n    id: \"fromCarton\",\n    class: \"mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-300\"\n  }, [_cache[6] || (_cache[6] = _createElementVNode(\"option\", {\n    value: \"\",\n    disabled: \"\"\n  }, \"Selecciona un cartón\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.availableCartons, carton => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: carton.id,\n      value: carton.id\n    }, _toDisplayString(carton.serial), 9 /* TEXT, PROPS */, _hoisted_5);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.fromCarton]])]), _createElementVNode(\"div\", _hoisted_6, [_cache[9] || (_cache[9] = _createElementVNode(\"label\", {\n    for: \"toCarton\",\n    class: \"block text-sm font-medium text-gray-700\"\n  }, \"Hasta\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.toCarton = $event),\n    id: \"toCarton\",\n    class: \"mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-300\"\n  }, [_cache[8] || (_cache[8] = _createElementVNode(\"option\", {\n    value: \"\",\n    disabled: \"\"\n  }, \"Selecciona un cartón\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.availableCartons, carton => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: carton.id,\n      value: carton.id\n    }, _toDisplayString(carton.serial), 9 /* TEXT, PROPS */, _hoisted_7);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.toCarton]])])]), _createCommentVNode(\" Botón de Asignar \"), _createElementVNode(\"button\", {\n    type: \"submit\",\n    class: \"w-full bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50 transition duration-300\",\n    disabled: !$data.selectedSeller || !$data.fromCarton || !$data.toCarton\n  }, \" Asignar Seleccionados \", 8 /* PROPS */, _hoisted_8), _createCommentVNode(\" Mensaje de Advertencia \"), !$data.selectedSeller || !$data.fromCarton || !$data.toCarton ? (_openBlock(), _createElementBlock(\"p\", _hoisted_9, \" Por favor, selecciona un vendedor y un rango de cartones. \")) : _createCommentVNode(\"v-if\", true)], 32 /* NEED_HYDRATION */)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","onSubmit","_cache","_withModifiers","args","$options","assignCartons","_createCommentVNode","for","$event","$data","selectedSeller","id","value","disabled","_Fragment","_renderList","sellers","seller","nombre","_hoisted_2","_hoisted_3","_hoisted_4","fromCarton","availableCartons","carton","serial","_hoisted_5","_hoisted_6","toCarton","_hoisted_7","type","_hoisted_8","_hoisted_9"],"sources":["D:\\Lotweb\\venta-cartones\\src\\components\\AssignCartons.vue"],"sourcesContent":["```vue\r\n<template>\r\n  <div class=\"space-y-4\">\r\n    <h2 class=\"text-xl font-semibold text-gray-800 mb-4\">Asignar Cartones por Lote</h2>\r\n    <form @submit.prevent=\"assignCartons\" class=\"space-y-4\">\r\n      <!-- Selección de Vendedor -->\r\n      <div>\r\n        <label for=\"seller\" class=\"block text-sm font-medium text-gray-700\">Seleccionar Vendedor</label>\r\n        <select\r\n          v-model=\"selectedSeller\"\r\n          id=\"seller\"\r\n          class=\"mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-300\"\r\n        >\r\n          <option value=\"\" disabled>Selecciona un vendedor</option>\r\n          <option v-for=\"seller in sellers\" :key=\"seller.id\" :value=\"seller.id\">{{ seller.nombre || seller.id }}</option>\r\n        </select>\r\n      </div>\r\n\r\n      <!-- Rango de Cartones Disponibles -->\r\n      <div class=\"flex flex-col sm:flex-row sm:space-x-4 space-y-4 sm:space-y-0\">\r\n        <div class=\"w-full sm:w-1/2\">\r\n          <label for=\"fromCarton\" class=\"block text-sm font-medium text-gray-700\">Desde</label>\r\n          <select\r\n            v-model=\"fromCarton\"\r\n            id=\"fromCarton\"\r\n            class=\"mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-300\"\r\n          >\r\n            <option value=\"\" disabled>Selecciona un cartón</option>\r\n            <option v-for=\"carton in availableCartons\" :key=\"carton.id\" :value=\"carton.id\">{{ carton.serial }}</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"w-full sm:w-1/2\">\r\n          <label for=\"toCarton\" class=\"block text-sm font-medium text-gray-700\">Hasta</label>\r\n          <select\r\n            v-model=\"toCarton\"\r\n            id=\"toCarton\"\r\n            class=\"mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-300\"\r\n          >\r\n            <option value=\"\" disabled>Selecciona un cartón</option>\r\n            <option v-for=\"carton in availableCartons\" :key=\"carton.id\" :value=\"carton.id\">{{ carton.serial }}</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Botón de Asignar -->\r\n      <button\r\n        type=\"submit\"\r\n        class=\"w-full bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50 transition duration-300\"\r\n        :disabled=\"!selectedSeller || !fromCarton || !toCarton\"\r\n      >\r\n        Asignar Seleccionados\r\n      </button>\r\n\r\n      <!-- Mensaje de Advertencia -->\r\n      <p v-if=\"!selectedSeller || !fromCarton || !toCarton\" class=\"text-yellow-600 text-sm text-center\">\r\n        Por favor, selecciona un vendedor y un rango de cartones.\r\n      </p>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { db } from '../firebase';\r\nimport { collection, query, where, getDocs, doc, updateDoc } from 'firebase/firestore';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      sellers: [],\r\n      availableCartons: [],\r\n      selectedSeller: '',\r\n      fromCarton: '',\r\n      toCarton: ''\r\n    };\r\n  },\r\n  async mounted() {\r\n    await this.loadSellers();\r\n    await this.loadAvailableCartons();\r\n  },\r\n  methods: {\r\n    async loadSellers() {\r\n      try {\r\n        console.log('Cargando vendedores...');\r\n        const querySnapshot = await getDocs(collection(db, 'vendedores'));\r\n        this.sellers = querySnapshot.docs.map(docSnapshot => {\r\n          const data = docSnapshot.data();\r\n          return {\r\n            id: docSnapshot.id,\r\n            ...data,\r\n            vendedorId: data.vendedorId || docSnapshot.id\r\n          };\r\n        });\r\n        console.log('Vendedores cargados:', this.sellers);\r\n      } catch (error) {\r\n        console.error('Error al cargar los vendedores:', error);\r\n      }\r\n    },\r\n    async loadAvailableCartons() {\r\n      try {\r\n        console.log('Cargando cartones disponibles...');\r\n        const q = query(\r\n          collection(db, 'cartones'),\r\n          where('vendedorId', '==', null),\r\n          where('estado', '==', 'disponible')\r\n        );\r\n        const querySnapshot = await getDocs(q);\r\n        this.availableCartons = querySnapshot.docs.map(doc => ({\r\n          id: doc.id,\r\n          serial: doc.data().serial\r\n        }));\r\n        // Ordenar los cartones por serial para facilitar la selección de rangos\r\n        this.availableCartons.sort((a, b) => a.serial.localeCompare(b.serial));\r\n        console.log('Cartones disponibles:', this.availableCartons);\r\n      } catch (error) {\r\n        console.error('Error al cargar cartones disponibles:', error);\r\n      }\r\n    },\r\n    async assignCartons() {\r\n      if (!this.selectedSeller || !this.fromCarton || !this.toCarton) return;\r\n\r\n      try {\r\n        console.log('Asignando cartones a vendedor:', this.selectedSeller, 'Desde:', this.fromCarton, 'Hasta:', this.toCarton);\r\n        // Encontrar los índices de los cartones seleccionados\r\n        const fromIndex = this.availableCartons.findIndex(carton => carton.id === this.fromCarton);\r\n        const toIndex = this.availableCartons.findIndex(carton => carton.id === this.toCarton);\r\n\r\n        if (fromIndex === -1 || toIndex === -1) {\r\n          throw new Error('Cartón inicial o final no encontrado');\r\n        }\r\n\r\n        // Asegurarse de que el rango sea válido (fromIndex <= toIndex)\r\n        const startIndex = Math.min(fromIndex, toIndex);\r\n        const endIndex = Math.max(fromIndex, toIndex);\r\n\r\n        // Seleccionar todos los cartones dentro del rango\r\n        const selectedCartons = this.availableCartons.slice(startIndex, endIndex + 1).map(carton => carton.id);\r\n        console.log('Cartones seleccionados en el rango:', selectedCartons);\r\n\r\n        // Actualizar los cartones en Firestore\r\n        const batch = [];\r\n        for (const cartonId of selectedCartons) {\r\n          const cartonRef = doc(db, 'cartones', cartonId);\r\n          batch.push(updateDoc(cartonRef, {\r\n            vendedorId: this.selectedSeller,\r\n            estado: 'asignado'\r\n          }));\r\n        }\r\n        await Promise.all(batch);\r\n        console.log('Cartones asignados exitosamente');\r\n        alert('Cartones asignados exitosamente');\r\n\r\n        // Limpiar los campos y recargar los cartones disponibles\r\n        this.fromCarton = '';\r\n        this.toCarton = '';\r\n        await this.loadAvailableCartons();\r\n      } catch (error) {\r\n        console.error('Error al asignar cartones:', error);\r\n        alert('Error al asignar cartones: ' + error.message);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Tailwind maneja los estilos */\r\n</style>\r\n```"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}